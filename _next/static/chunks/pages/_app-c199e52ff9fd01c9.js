(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[888],{6840:function(e,t,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/_app",function(){return a(8676)}])},2659:function(e,t,a){"use strict";let n=a(6513),o=n.basePath&&"/"!==n.basePath?n.basePath:"";e.exports={basePath:o,output:"export",trailingSlash:!0,reactStrictMode:!0}},1863:function(e,t,a){"use strict";function n(e){}Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"clientHookInServerComponentError",{enumerable:!0,get:function(){return n}}),a(8754),a(7294),("function"==typeof t.default||"object"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,"__esModule",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},6522:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,t){for(var a in t)Object.defineProperty(e,a,{enumerable:!0,get:t[a]})}(t,{ReadonlyURLSearchParams:function(){return g},useSearchParams:function(){return f},usePathname:function(){return m},ServerInsertedHTMLContext:function(){return d.ServerInsertedHTMLContext},useServerInsertedHTML:function(){return d.useServerInsertedHTML},useRouter:function(){return b},useParams:function(){return y},useSelectedLayoutSegments:function(){return w},useSelectedLayoutSegment:function(){return v},redirect:function(){return p.redirect},permanentRedirect:function(){return p.permanentRedirect},RedirectType:function(){return p.RedirectType},notFound:function(){return c.notFound}});let n=a(7294),o=a(2497),r=a(1844),i=a(1863),s=a(83),l=a(1665),d=a(3861),p=a(2061),c=a(4265),u=Symbol("internal for urlsearchparams readonly");function h(){return Error("ReadonlyURLSearchParams cannot be modified")}class g{[Symbol.iterator](){return this[u][Symbol.iterator]()}append(){throw h()}delete(){throw h()}set(){throw h()}sort(){throw h()}constructor(e){this[u]=e,this.entries=e.entries.bind(e),this.forEach=e.forEach.bind(e),this.get=e.get.bind(e),this.getAll=e.getAll.bind(e),this.has=e.has.bind(e),this.keys=e.keys.bind(e),this.values=e.values.bind(e),this.toString=e.toString.bind(e),this.size=e.size}}function f(){(0,i.clientHookInServerComponentError)("useSearchParams");let e=(0,n.useContext)(r.SearchParamsContext);return(0,n.useMemo)(()=>e?new g(e):null,[e])}function m(){return(0,i.clientHookInServerComponentError)("usePathname"),(0,n.useContext)(r.PathnameContext)}function b(){(0,i.clientHookInServerComponentError)("useRouter");let e=(0,n.useContext)(o.AppRouterContext);if(null===e)throw Error("invariant expected app router to be mounted");return e}function y(){(0,i.clientHookInServerComponentError)("useParams");let e=(0,n.useContext)(o.GlobalLayoutRouterContext),t=(0,n.useContext)(r.PathParamsContext);return(0,n.useMemo)(()=>(null==e?void 0:e.tree)?function e(t,a){for(let n of(void 0===a&&(a={}),Object.values(t[1]))){let t=n[0],o=Array.isArray(t),r=o?t[1]:t;!r||r.startsWith(l.PAGE_SEGMENT_KEY)||(o&&("c"===t[2]||"oc"===t[2])?a[t[0]]=t[1].split("/"):o&&(a[t[0]]=t[1]),a=e(n,a))}return a}(e.tree):t,[null==e?void 0:e.tree,t])}function w(e){void 0===e&&(e="children"),(0,i.clientHookInServerComponentError)("useSelectedLayoutSegments");let{tree:t}=(0,n.useContext)(o.LayoutRouterContext);return function e(t,a,n,o){let r;if(void 0===n&&(n=!0),void 0===o&&(o=[]),n)r=t[1][a];else{var i;let e=t[1];r=null!=(i=e.children)?i:Object.values(e)[0]}if(!r)return o;let d=r[0],p=(0,s.getSegmentValue)(d);return!p||p.startsWith(l.PAGE_SEGMENT_KEY)?o:(o.push(p),e(r,a,!1,o))}(t,e)}function v(e){void 0===e&&(e="children"),(0,i.clientHookInServerComponentError)("useSelectedLayoutSegment");let t=w(e);return 0===t.length?null:t[0]}("function"==typeof t.default||"object"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,"__esModule",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},4265:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,t){for(var a in t)Object.defineProperty(e,a,{enumerable:!0,get:t[a]})}(t,{notFound:function(){return n},isNotFoundError:function(){return o}});let a="NEXT_NOT_FOUND";function n(){let e=Error(a);throw e.digest=a,e}function o(e){return"object"==typeof e&&null!==e&&"digest"in e&&e.digest===a}("function"==typeof t.default||"object"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,"__esModule",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},4341:function(e,t){"use strict";var a,n;Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"RedirectStatusCode",{enumerable:!0,get:function(){return a}}),(n=a||(a={}))[n.SeeOther=303]="SeeOther",n[n.TemporaryRedirect=307]="TemporaryRedirect",n[n.PermanentRedirect=308]="PermanentRedirect",("function"==typeof t.default||"object"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,"__esModule",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},2061:function(e,t,a){"use strict";var n,o;Object.defineProperty(t,"__esModule",{value:!0}),function(e,t){for(var a in t)Object.defineProperty(e,a,{enumerable:!0,get:t[a]})}(t,{RedirectType:function(){return n},getRedirectError:function(){return d},redirect:function(){return p},permanentRedirect:function(){return c},isRedirectError:function(){return u},getURLFromRedirectError:function(){return h},getRedirectTypeFromError:function(){return g},getRedirectStatusCodeFromError:function(){return f}});let r=a(8276),i=a(3241),s=a(4341),l="NEXT_REDIRECT";function d(e,t,a){void 0===a&&(a=s.RedirectStatusCode.TemporaryRedirect);let n=Error(l);n.digest=l+";"+t+";"+e+";"+a+";";let o=r.requestAsyncStorage.getStore();return o&&(n.mutableCookies=o.mutableCookies),n}function p(e,t){void 0===t&&(t="replace");let a=i.actionAsyncStorage.getStore();throw d(e,t,(null==a?void 0:a.isAction)?s.RedirectStatusCode.SeeOther:s.RedirectStatusCode.TemporaryRedirect)}function c(e,t){void 0===t&&(t="replace");let a=i.actionAsyncStorage.getStore();throw d(e,t,(null==a?void 0:a.isAction)?s.RedirectStatusCode.SeeOther:s.RedirectStatusCode.PermanentRedirect)}function u(e){if("object"!=typeof e||null===e||!("digest"in e)||"string"!=typeof e.digest)return!1;let[t,a,n,o]=e.digest.split(";",4),r=Number(o);return t===l&&("replace"===a||"push"===a)&&"string"==typeof n&&!isNaN(r)&&r in s.RedirectStatusCode}function h(e){return u(e)?e.digest.split(";",3)[2]:null}function g(e){if(!u(e))throw Error("Not a redirect error");return e.digest.split(";",2)[1]}function f(e){if(!u(e))throw Error("Not a redirect error");return Number(e.digest.split(";",4)[3])}(o=n||(n={})).push="push",o.replace="replace",("function"==typeof t.default||"object"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,"__esModule",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},83:function(e,t){"use strict";function a(e){return Array.isArray(e)?e[1]:e}Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"getSegmentValue",{enumerable:!0,get:function(){return a}}),("function"==typeof t.default||"object"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,"__esModule",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},5634:function(e,t){"use strict";var a,n;Object.defineProperty(t,"__esModule",{value:!0}),function(e,t){for(var a in t)Object.defineProperty(e,a,{enumerable:!0,get:t[a]})}(t,{PrefetchKind:function(){return a},ACTION_REFRESH:function(){return o},ACTION_NAVIGATE:function(){return r},ACTION_RESTORE:function(){return i},ACTION_SERVER_PATCH:function(){return s},ACTION_PREFETCH:function(){return l},ACTION_FAST_REFRESH:function(){return d},ACTION_SERVER_ACTION:function(){return p},isThenable:function(){return c}});let o="refresh",r="navigate",i="restore",s="server-patch",l="prefetch",d="fast-refresh",p="server-action";function c(e){return e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof e.then}(n=a||(a={})).AUTO="auto",n.FULL="full",n.TEMPORARY="temporary",("function"==typeof t.default||"object"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,"__esModule",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},7149:function(e,t,a){"use strict";function n(e,t,a,n){return!1}Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"getDomainLocale",{enumerable:!0,get:function(){return n}}),a(4648),("function"==typeof t.default||"object"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,"__esModule",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},5494:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return v}});let n=a(8754),o=a(5893),r=n._(a(7294)),i=a(5203),s=a(298),l=a(1024),d=a(5522),p=a(2208),c=a(5832),u=a(2497),h=a(7283),g=a(7149),f=a(9290),m=a(5634),b=new Set;function y(e,t,a,n,o,r){if(r||(0,s.isLocalURL)(t)){if(!n.bypassPrefetchedCheck){let o=t+"%"+a+"%"+(void 0!==n.locale?n.locale:"locale"in e?e.locale:void 0);if(b.has(o))return;b.add(o)}Promise.resolve(r?e.prefetch(t,o):e.prefetch(t,a,n)).catch(e=>{})}}function w(e){return"string"==typeof e?e:(0,l.formatUrl)(e)}let v=r.default.forwardRef(function(e,t){let a,n;let{href:l,as:b,children:v,prefetch:k=null,passHref:x,replace:S,shallow:_,scroll:A,locale:j,onClick:T,onMouseEnter:q,onTouchStart:I,legacyBehavior:P=!1,...C}=e;a=v,P&&("string"==typeof a||"number"==typeof a)&&(a=(0,o.jsx)("a",{children:a}));let O=r.default.useContext(c.RouterContext),M=r.default.useContext(u.AppRouterContext),R=null!=O?O:M,E=!O,D=!1!==k,W=null===k?m.PrefetchKind.AUTO:m.PrefetchKind.FULL,{href:L,as:F}=r.default.useMemo(()=>{if(!O){let e=w(l);return{href:e,as:b?w(b):e}}let[e,t]=(0,i.resolveHref)(O,l,!0);return{href:e,as:b?(0,i.resolveHref)(O,b):t||e}},[O,l,b]),J=r.default.useRef(L),G=r.default.useRef(F);P&&(n=r.default.Children.only(a));let z=P?n&&"object"==typeof n&&n.ref:t,[H,N,B]=(0,h.useIntersection)({rootMargin:"200px"}),U=r.default.useCallback(e=>{(G.current!==F||J.current!==L)&&(B(),G.current=F,J.current=L),H(e),z&&("function"==typeof z?z(e):"object"==typeof z&&(z.current=e))},[F,z,L,B,H]);r.default.useEffect(()=>{R&&N&&D&&y(R,L,F,{locale:j},{kind:W},E)},[F,L,N,j,D,null==O?void 0:O.locale,R,E,W]);let V={ref:U,onClick(e){P||"function"!=typeof T||T(e),P&&n.props&&"function"==typeof n.props.onClick&&n.props.onClick(e),R&&!e.defaultPrevented&&function(e,t,a,n,o,i,l,d,p){let{nodeName:c}=e.currentTarget;if("A"===c.toUpperCase()&&(function(e){let t=e.currentTarget.getAttribute("target");return t&&"_self"!==t||e.metaKey||e.ctrlKey||e.shiftKey||e.altKey||e.nativeEvent&&2===e.nativeEvent.which}(e)||!p&&!(0,s.isLocalURL)(a)))return;e.preventDefault();let u=()=>{let e=null==l||l;"beforePopState"in t?t[o?"replace":"push"](a,n,{shallow:i,locale:d,scroll:e}):t[o?"replace":"push"](n||a,{scroll:e})};p?r.default.startTransition(u):u()}(e,R,L,F,S,_,A,j,E)},onMouseEnter(e){P||"function"!=typeof q||q(e),P&&n.props&&"function"==typeof n.props.onMouseEnter&&n.props.onMouseEnter(e),R&&(D||!E)&&y(R,L,F,{locale:j,priority:!0,bypassPrefetchedCheck:!0},{kind:W},E)},onTouchStart(e){P||"function"!=typeof I||I(e),P&&n.props&&"function"==typeof n.props.onTouchStart&&n.props.onTouchStart(e),R&&(D||!E)&&y(R,L,F,{locale:j,priority:!0,bypassPrefetchedCheck:!0},{kind:W},E)}};if((0,d.isAbsoluteUrl)(F))V.href=F;else if(!P||x||"a"===n.type&&!("href"in n.props)){let e=void 0!==j?j:null==O?void 0:O.locale,t=(null==O?void 0:O.isLocaleDomain)&&(0,g.getDomainLocale)(F,e,null==O?void 0:O.locales,null==O?void 0:O.domainLocales);V.href=t||(0,f.addBasePath)((0,p.addLocale)(F,e,null==O?void 0:O.defaultLocale))}return P?r.default.cloneElement(n,V):(0,o.jsx)("a",{...C,...V,children:a})});("function"==typeof t.default||"object"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,"__esModule",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},7283:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"useIntersection",{enumerable:!0,get:function(){return l}});let n=a(7294),o=a(9833),r="function"==typeof IntersectionObserver,i=new Map,s=[];function l(e){let{rootRef:t,rootMargin:a,disabled:l}=e,d=l||!r,[p,c]=(0,n.useState)(!1),u=(0,n.useRef)(null),h=(0,n.useCallback)(e=>{u.current=e},[]);return(0,n.useEffect)(()=>{if(r){if(d||p)return;let e=u.current;if(e&&e.tagName)return function(e,t,a){let{id:n,observer:o,elements:r}=function(e){let t;let a={root:e.root||null,margin:e.rootMargin||""},n=s.find(e=>e.root===a.root&&e.margin===a.margin);if(n&&(t=i.get(n)))return t;let o=new Map;return t={id:a,observer:new IntersectionObserver(e=>{e.forEach(e=>{let t=o.get(e.target),a=e.isIntersecting||e.intersectionRatio>0;t&&a&&t(a)})},e),elements:o},s.push(a),i.set(a,t),t}(a);return r.set(e,t),o.observe(e),function(){if(r.delete(e),o.unobserve(e),0===r.size){o.disconnect(),i.delete(n);let e=s.findIndex(e=>e.root===n.root&&e.margin===n.margin);e>-1&&s.splice(e,1)}}}(e,e=>e&&c(e),{root:null==t?void 0:t.current,rootMargin:a})}else if(!p){let e=(0,o.requestIdleCallback)(()=>c(!0));return()=>(0,o.cancelIdleCallback)(e)}},[d,a,t,p,u.current]),[h,p,(0,n.useCallback)(()=>{c(!1)},[])]}("function"==typeof t.default||"object"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,"__esModule",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},3861:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e,t){for(var a in t)Object.defineProperty(e,a,{enumerable:!0,get:t[a]})}(t,{ServerInsertedHTMLContext:function(){return o},useServerInsertedHTML:function(){return r}});let n=a(1757)._(a(7294)),o=n.default.createContext(null);function r(e){let t=(0,n.useContext)(o);t&&t(e)}},4520:function(e,t,a){"use strict";var n=a(5893);a(7294),t.Z=e=>(0,n.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16",...e,children:(0,n.jsx)("rect",{width:12,height:12,x:2,y:2,rx:3,transform:"rotate(-45 8 8)"})})},8257:function(e,t,a){"use strict";var n=a(5893);a(7294),t.Z=e=>(0,n.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16",...e,children:(0,n.jsx)("circle",{cx:8,cy:8,r:6})})},1713:function(e,t,a){"use strict";var n=a(5893);a(7294),t.Z=e=>(0,n.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",...e,children:(0,n.jsx)("path",{d:"m.247 10.212 5.02-8.697a2 2 0 0 1 3.465 0l5.021 8.697a2 2 0 0 1-1.732 3H1.98a2 2 0 0 1-1.732-3z"})})},240:function(e,t,a){"use strict";var n=a(5893);a(7294),t.Z=e=>(0,n.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 22 22",...e,children:(0,n.jsx)("path",{fillRule:"evenodd",d:"m18.7 1.4-7.68 7.73-7.67-7.72c-.54-.54-1.4-.54-1.89 0-.54.54-.54 1.41 0 1.89l7.67 7.73L1.4 18.7c-.54.54-.54 1.41 0 1.89.54.54 1.41.54 1.89 0l7.73-7.68 7.68 7.68c.54.54 1.41.54 1.89 0 .49-.54.54-1.41 0-1.89l-7.68-7.68 7.68-7.67c.54-.54.54-1.4 0-1.89-.48-.54-1.35-.54-1.89-.06"})})},4043:function(e,t,a){"use strict";var n=a(5893);a(7294),t.Z=e=>(0,n.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 22 22",...e,children:(0,n.jsx)("path",{fillRule:"evenodd",d:"M5.67 1C4.22 1 3 2.22 3 3.67v15.11C3 20.01 4 21 5.22 21h13.11c.35 0 .67-.32.67-.67V5.67c0-.39-.29-.67-.67-.67C17.69 5 17 4.31 17 3.67s.69-1.33 1.33-1.33c.35 0 .67-.31.67-.67S18.69 1 18.33 1H5.66Zm0 1.33h10.37c-.23.39-.37.85-.37 1.33s.14.94.37 1.33H5.67c-.64 0-1.33-.69-1.33-1.33s.69-1.33 1.33-1.33M4.34 5.96c.39.23.85.37 1.33.37h12v13.33H5.22a.88.88 0 0 1-.89-.86V5.97Zm2.44 2.81c-.37.01-.65.32-.64.69.01.35.29.63.64.64h8.44c.37-.01.65-.32.64-.69a.66.66 0 0 0-.64-.64zm0 3.56a.67.67 0 0 0 0 1.34h8.44a.67.67 0 0 0 0-1.34zm0 3.56c-.37.01-.65.32-.64.69.01.35.29.63.64.64h8.44c.37-.01.65-.32.64-.69a.66.66 0 0 0-.64-.64z"})})},284:function(e,t,a){"use strict";var n=a(5893);a(7294),t.Z=e=>(0,n.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 22 22",...e,children:(0,n.jsx)("path",{fillRule:"evenodd",d:"M9.71.38h-.64v2.61C4.22 3.32.38 7.36.38 12.29s4.19 9.33 9.33 9.33 8.97-3.84 9.3-8.69h2.61v-.64C21.62 5.72 16.28.38 9.71.38m0 19.95c-4.44 0-8.05-3.61-8.05-8.05s3.26-7.69 7.4-8.02v8.66h8.66c-.33 4.14-3.8 7.4-8.02 7.4Zm9.33-8.69h-8.69V1.69c5.34.32 9.63 4.61 9.95 9.96h-1.27Z"})})},2929:function(e,t,a){"use strict";var n=a(5893);a(7294),t.Z=e=>(0,n.jsxs)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 22 22",...e,children:[(0,n.jsx)("path",{d:"M11 22C4.9 22 0 17 0 11S4.9 0 11 0c6 0 11 4.9 11 11s-5 11-11 11m0-20.5c-5.2 0-9.5 4.2-9.5 9.5s4.2 9.5 9.5 9.5 9.5-4.2 9.5-9.5-4.3-9.5-9.5-9.5"}),(0,n.jsx)("path",{fillRule:"evenodd",d:"M11 16.65c-.7 0-1.2-.5-1.2-1.2s.6-1.2 1.2-1.2 1.2.6 1.2 1.2-.5 1.2-1.2 1.2m2.8-6.9c-.1.2-.3.4-.4.5l-.4.4c-.2.1-.3.3-.4.4l-.3.3c-.2.3-.3.6-.3 1v.7h-1.8v-1c0-.3 0-.6.2-.9s.4-.6.7-.8l1.1-1.1c.2-.3.4-.6.4-1s-.1-.7-.4-.9-.6-.4-1-.4-.7.1-1 .4-.4.6-.5 1h-2c.1-.8.5-1.6 1.1-2.2.7-.5 1.5-.8 2.3-.8s1.6.2 2.3.8q.9.75.9 2.1c0 .5-.2 1-.5 1.5"})]})},5630:function(e,t,a){"use strict";var n=a(5893);a(7294),t.Z=e=>(0,n.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 22 22",...e,children:(0,n.jsx)("path",{fillRule:"evenodd",d:"m20.6 18.31-4.01-4.01c2.44-3.37 2.15-8.11-.89-11.14A8.55 8.55 0 0 0 9.61.64c-2.28 0-4.48.91-6.09 2.52-3.36 3.36-3.36 8.82 0 12.18a8.55 8.55 0 0 0 6.09 2.52c1.78 0 3.55-.55 5.05-1.64l4.01 4.01c.26.26.61.4.96.4.75 0 1.36-.61 1.36-1.36 0-.36-.14-.71-.4-.96ZM4.87 13.99a6.71 6.71 0 0 1 0-9.49 6.7 6.7 0 0 1 4.74-1.97c1.79 0 3.48.7 4.74 1.97a6.71 6.71 0 0 1 0 9.49 6.7 6.7 0 0 1-4.74 1.97c-1.78 0-3.49-.7-4.74-1.97"})})},9116:function(e,t,a){"use strict";var n=a(5893);a(7294),t.Z=e=>(0,n.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",xmlSpace:"preserve",viewBox:"0 0 30 30",...e,children:(0,n.jsx)("path",{d:"M23 3h-6a2 2 0 0 0-1.414.586l-12 12a2 2 0 0 0 0 2.828l8 8a2 2 0 0 0 2.828 0l12-12A2 2 0 0 0 27 13V7a4 4 0 0 0-4-4m0 6a2 2 0 1 1-.001-3.999A2 2 0 0 1 23 9"})})},1342:function(e,t,a){"use strict";a.d(t,{ln:function(){return o},I8:function(){return r},rj:function(){return i},yx:function(){return s},Tp:function(){return l},bL:function(){return d},zU:function(){return p},V7:function(){return c},CR:function(){return u},PC:function(){return h}});var n=a(5893);a(7294);var o=e=>(0,n.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",...e,children:(0,n.jsx)("path",{d:"M12.846 5.211a1 1 0 0 0-1.691 0L2.783 18.466A1 1 0 0 0 3.63 20H20.37a1 1 0 0 0 .846-1.534zM9.464 4.143c1.177-1.864 3.895-1.864 5.073 0l8.37 13.255C24.17 19.396 22.735 22 20.372 22H3.63c-2.363 0-3.798-2.604-2.537-4.602zM13 17a1 1 0 1 1-2 0 1 1 0 0 1 2 0m-2.306-6.836.724 4.343a.59.59 0 0 0 1.164 0l.724-4.343A1 1 0 0 0 12.32 9h-.64a1 1 0 0 0-.986 1.164",clipRule:"evenodd"})});a(4520),a(8257),a(1713),a(240);var r=e=>(0,n.jsxs)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",...e,children:[(0,n.jsx)("path",{d:"m18.988 2.012 3 3L19.701 7.3l-3-3zM8 16h3l7.287-7.287-3-3L8 13z"}),(0,n.jsx)("path",{d:"M19 19H8.158c-.026 0-.053.01-.079.01-.033 0-.066-.009-.1-.01H5V5h6.847l2-2H5c-1.103 0-2 .896-2 2v14c0 1.104.897 2 2 2h14a2 2 0 0 0 2-2v-8.668l-2 2z"})]});a(4043),a(284),a(2929),a(5630);var i=e=>(0,n.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 320 512",...e,children:(0,n.jsx)("path",{d:"m279.14 288 14.22-92.66h-88.91v-60.13c0-25.35 12.42-50.06 52.24-50.06h40.42V6.26S260.43 0 225.36 0c-73.22 0-121.08 44.38-121.08 124.72v70.62H22.89V288h81.39v224h100.17V288z"})}),s=e=>(0,n.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 496 512",...e,children:(0,n.jsx)("path",{d:"M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6m-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3m44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9M244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8M97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1m-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7m32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1m-11.4-14.7c-1.6 1-1.6 3.6 0 5.9s4.3 3.3 5.6 2.3c1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2"})}),l=e=>(0,n.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 496 512",...e,children:(0,n.jsx)("path",{d:"m487.75 200.06-.7-1.78-67.5-176.19a17.63 17.63 0 0 0-6.95-8.37c-6.44-4-14.69-3.55-20.66 1.11a18.07 18.07 0 0 0-5.99 9.09l-45.58 139.46H155.79L110.2 23.93c-.99-3.59-3.09-6.78-5.99-9.12a18.08 18.08 0 0 0-20.66-1.11 17.8 17.8 0 0 0-6.95 8.37L8.96 198.18l-.67 1.78c-19.96 52.17-3.01 111.25 41.58 144.89l.23.18.62.44 102.84 77.01 50.88 38.51 30.99 23.4a20.84 20.84 0 0 0 25.21 0l30.99-23.4 50.88-38.51L445.97 345l.26-.21c44.49-33.64 61.41-92.62 41.53-144.73Z"})}),d=e=>(0,n.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 448 512",...e,children:(0,n.jsx)("path",{d:"M224.1 141c-63.6 0-114.9 51.3-114.9 114.9s51.3 114.9 114.9 114.9S339 319.5 339 255.9 287.7 141 224.1 141m0 189.6c-41.1 0-74.7-33.5-74.7-74.7s33.5-74.7 74.7-74.7 74.7 33.5 74.7 74.7-33.6 74.7-74.7 74.7m146.4-194.3c0 14.9-12 26.8-26.8 26.8-14.9 0-26.8-12-26.8-26.8s12-26.8 26.8-26.8 26.8 12 26.8 26.8m76.1 27.2c-1.7-35.9-9.9-67.7-36.2-93.9-26.2-26.2-58-34.4-93.9-36.2-37-2.1-147.9-2.1-184.9 0-35.8 1.7-67.6 9.9-93.9 36.1s-34.4 58-36.2 93.9c-2.1 37-2.1 147.9 0 184.9 1.7 35.9 9.9 67.7 36.2 93.9s58 34.4 93.9 36.2c37 2.1 147.9 2.1 184.9 0 35.9-1.7 67.7-9.9 93.9-36.2 26.2-26.2 34.4-58 36.2-93.9 2.1-37 2.1-147.8 0-184.8M398.8 388c-7.8 19.6-22.9 34.7-42.6 42.6-29.5 11.7-99.5 9-132.1 9s-102.7 2.6-132.1-9c-19.6-7.8-34.7-22.9-42.6-42.6-11.7-29.5-9-99.5-9-132.1s-2.6-102.7 9-132.1c7.8-19.6 22.9-34.7 42.6-42.6 29.5-11.7 99.5-9 132.1-9s102.7-2.6 132.1 9c19.6 7.8 34.7 22.9 42.6 42.6 11.7 29.5 9 99.5 9 132.1s2.7 102.7-9 132.1"})}),p=e=>(0,n.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 448 512",...e,children:(0,n.jsx)("path",{d:"M100.28 448H7.4V148.9h92.88zM53.79 108.1C24.09 108.1 0 83.5 0 53.8a53.79 53.79 0 0 1 107.58 0c0 29.7-24.1 54.3-53.79 54.3M447.9 448h-92.68V302.4c0-34.7-.7-79.2-48.29-79.2-48.29 0-55.69 37.7-55.69 76.7V448h-92.78V148.9h89.08v40.8h1.3c12.4-23.5 42.69-48.3 87.88-48.3 94 0 111.28 61.9 111.28 142.3V448z"})}),c=e=>(0,n.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 16 16",...e,children:(0,n.jsx)("path",{d:"M12.6.75h2.454l-5.36 6.142L16 15.25h-4.937l-3.867-5.07-4.425 5.07H.316l5.733-6.57L0 .75h5.063l3.495 4.633L12.601.75Zm-.86 13.028h1.36L4.323 2.145H2.865z"})}),u=e=>(0,n.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 384 512",...e,children:(0,n.jsx)("path",{d:"M162.7 210c-1.8 3.3-25.2 44.4-70.1 123.5-4.9 8.3-10.8 12.5-17.7 12.5H9.8c-7.7 0-12.1-7.5-8.5-14.4l69-121.3q.3 0 0-.3l-43.9-75.6c-4.3-7.8.3-14.1 8.5-14.1H100c7.3 0 13.3 4.1 18 12.2zM382.6 46.1l-144 253v.3L330.2 466c3.9 7.1.2 14.1-8.5 14.1h-65.2c-7.6 0-13.6-4-18-12.2l-92.4-168.5c3.3-5.8 51.5-90.8 144.8-255.2 4.6-8.1 10.4-12.2 17.5-12.2h65.7c8 0 12.3 6.7 8.5 14.1"})}),h=e=>(0,n.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 576 512",...e,children:(0,n.jsx)("path",{d:"M549.655 124.083c-6.281-23.65-24.787-42.276-48.284-48.597C458.781 64 288 64 288 64S117.22 64 74.629 75.486c-23.497 6.322-42.003 24.947-48.284 48.597-11.412 42.867-11.412 132.305-11.412 132.305s0 89.438 11.412 132.305c6.281 23.65 24.787 41.5 48.284 47.821C117.22 448 288 448 288 448s170.78 0 213.371-11.486c23.497-6.321 42.003-24.171 48.284-47.821 11.412-42.867 11.412-132.305 11.412-132.305s0-89.438-11.412-132.305m-317.51 213.508V175.185l142.739 81.205z"})});a(9116)},8153:function(e,t,a){"use strict";a.d(t,{PO:function(){return u},f6:function(){return g},Hr:function(){return x},r0:function(){return m},L6:function(){return f},H1:function(){return j},rV:function(){return T},kk:function(){return A},id:function(){return d},OW:function(){return h},VM:function(){return _},ie:function(){return S},pS:function(){return w},VU:function(){return y},TX:function(){return b},OY:function(){return c},dv:function(){return v},NJ:function(){return k},mE:function(){return p},B4:function(){return P},Y6:function(){return I},J7:function(){return q}});var n=JSON.parse('{"yN":["2017-03-01","2018-03-01","2019-11-01","2021-07-01","2022-03-28","2023-02-23","2023-11-01"],"pJ":["agile","architecture","backend","build","ci/cd","coding","devops","documentation","frontend","quality assurance","security","ux/ui"],"ev":[{"id":"adobe-creative-cloud","release":"2023-11-01","title":"Adobe Creative Cloud","ring":"adopt","quadrant":"tools","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.adobe.com/creativecloud.html\\">Adobe Creative Cloud</a> transcends traditional design boundaries by providing a comprehensive platform that fosters seamless collaboration and streamlines the design process. We use applications such as Adobe XD, Photoshop, Illustrator, InDesign, and more, each of which serves a unique purpose in the design workflow, including photo and video editing. The integration of these specialized tools allows us to work efficiently and effectively, thus maximizing our productivity.</p>\\n","featured":true,"flag":"new","tags":["ux/ui"],"position":[445,508]},{"id":"adr","release":"2021-07-01","title":"ADR","ring":"adopt","quadrant":"methods-and-patterns","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://adr.github.io/\\">ADRs</a> have proven to be a useful tool for documentation and are commonly used in \\nour organisation. We therefore promote it to the &quot;adopt&quot; ring.</p>\\n","featured":true,"flag":"default","tags":["architecture","documentation"],"revisions":[{"release":"2018-03-01","ring":"assess","body":"<p>Architecture Decision Records</p>\\n<p>ADR is a lightweight documentation of important architecture decisions taken by the team.\\nWithout documentation of the architecture and the architecture decisions, new team members can only do two things:</p>\\n<ul>\\n<li>either (blindly) accept what they find and see or</li>\\n<li>(blindly) change things</li>\\n</ul>\\n<p>It goes without saying that both options aren&#39;t right.</p>\\n<p>Therefore, we suggest documenting the important architecture decisions. We use a simple tool such as <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/npryce/adr-tools\\">https://github.com/npryce/adr-tools</a> and store them in version control.\\nIn larger projects with many teams we also establish a regular &quot;architecture board / COI&quot; with regular meetings.\\nOften, the architecture decisions are taken in such meetings.</p>\\n<p>The main purpose of this documentation is to:</p>\\n<ul>\\n<li>inform new team members about the previous architecture decisions and their purpose and backgrounds</li>\\n<li>inform the whole team (including all people who were absent)</li>\\n<li>create documentation that can be used to remember things (e.g. conventions, patterns, etc.)</li>\\n</ul>\\n"}],"position":[479,283]},{"id":"assisted-ai","release":"2023-11-01","title":"AI Assisted Programming","ring":"assess","quadrant":"methods-and-patterns","body":"<p>In recent years, the field of Artificial Intelligence (AI) has made monumental strides, and AI has demonstrated its ability to augment human capabilities and enhance user experiences. One noteworthy facet of this evolution is Assisted AI—a paradigm that holds great promise for software development companies.</p>\\n<p>Assisted AI combines human and machine intelligence to enhance productivity. It leverages AI&#39;s computational capabilities while preserving human critical thinking.</p>\\n<h3>Advantages and Opportunities</h3>\\n<p>Developers should consider using generative artificial intelligence (AI) for a multitude of reasons:</p>\\n<ul>\\n<li><strong>Code Enhancement</strong>: Assisted AI offers intelligent code suggestions, optimizing and refactoring. It helps save time and boost quality and developer satisfaction.</li>\\n<li><strong>Automated Testing</strong>: It accelerates testing, identifies bugs, and generates test cases for more robust, reliable software.</li>\\n<li><strong>NLP-powered Documentation</strong>: Assisted AI assists in writing precise, comprehensive documentation.</li>\\n<li><strong>Security</strong>: Assisted AI can help identify vulnerabilities.</li>\\n</ul>\\n<h3>Providers and Solutions</h3>\\n<ul>\\n<li><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://chat.openai.com/\\">ChatGPT</a><ul>\\n<li>Powered by OpenAI&#39;s advanced GPT-3/4 technology.</li>\\n<li>Delivers human-like conversation experiences.</li>\\n<li>Can also interpret and generate visual content, providing a multifaceted interaction experience.</li>\\n</ul>\\n</li>\\n<li><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://copilot.github.com/\\">GitHub Copilot</a><ul>\\n<li>Transforms natural language prompts into relevant code suggestions.</li>\\n<li>Offers seamless integration with numerous IDEs for an enhanced developer experience.</li>\\n<li>Empowered by training on billions of lines of code.</li>\\n</ul>\\n</li>\\n<li><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://aws.amazon.com/codewhisperer/\\">Amazon CodeWhisperer</a><ul>\\n<li>Completely free to use for individual developers.</li>\\n<li>Advanced features to trace the origin of code snippets.</li>\\n<li>Integrated with AWS, providing robust and scalable solutions.</li>\\n</ul>\\n</li>\\n<li><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/fauxpilot/fauxpilot\\">FauxPilot</a><ul>\\n<li>A credible open-source counterpart to GitHub Copilot server.</li>\\n<li>Prioritizes user privacy and data sovereignty.</li>\\n<li>Continuously updated by a vibrant community of developers.</li>\\n</ul>\\n</li>\\n</ul>\\n<h3>Challenges and Considerations</h3>\\n<p>Ethical, privacy, and bias concerns need careful attention, especially data protection concerns while working with cloud-based solutions, which are important to consider.</p>\\n<h3>Future Outlook</h3>\\n<p>Assisted AI is a pivotal development. Embracing this shift promises improved efficiency and better products.</p>\\n<p>We are currently establishing the following aspects:</p>\\n<ul>\\n<li>Maintaining a risk assessment and working on mitigations regularly.</li>\\n<li>Setting up usage guidelines and providing training.</li>\\n<li>Establishing a regular &quot;learning group&quot; as an exchange between teams to share best practices and learnings.</li>\\n</ul>\\n","featured":true,"flag":"new","tags":["coding","architecture"],"position":[598,172]},{"id":"akeneo","release":"2021-07-01","title":"Akeneo","ring":"adopt","quadrant":"tools","body":"<p>We continue to use Akeneo with a variety of customers to store and process product data in a standardized format. It is the de facto standard for open source PIM&#39;s and therefore an integral part of our e-commerce solutions.</p>\\n<p>In the meantime, Akeneo has been continuously developed and offers many new features that further facilitate product data collection.</p>\\n<p>The recent switch to Elasticsearch and an update of Symfony improved runtime behaviour as well as scalability for future-prove use. Support for the latest release of PHP 8 is upcoming.</p>\\n","featured":false,"flag":"default","revisions":[{"release":"2019-11-01","ring":"assess","body":""},{"release":"2017-03-01","ring":"assess","body":"<p>Akeneo is a Product Information Management system (also known as PIM, PCM or Product MDM) and helps centralize and harmonize all the technical and marketing information of products.</p>\\n<p>We use Akeneo with success in our projects and products (For example in OM3), where it is responsible for:</p>\\n<ul>\\n<li>Keeping product data separate from other applications - such as E-Commerce systems</li>\\n<li>Managing lifecycles of products and managing product portfolios with their category structures</li>\\n<li>Managing attributes and families and therefore acting as attribute master for the suite</li>\\n</ul>\\n<p>The system has a modern and friendly user interface and product managers find things such as completeness check, translation views and mass editing very helpful.</p>\\n<p>With delta export and import capabilities and the usage of Mongo DB as persistence backend, the performance is acceptable. We miss a richer API - but the system is extendable and based on PHP/Symfony 2.</p>\\n"}],"position":[470,517]},{"id":"akka","release":"2023-11-01","title":"Akka","ring":"hold","quadrant":"languages-and-frameworks","body":"<p>With the growing adoption of microservice-based architectures, the interest in frameworks and tools that make building systems that follow the reactive manifesto possible has increased.</p>\\n<p>Akka provides you a toolkit and runtime based on the Actor model known from Erlang to reach this goal.</p>\\n<p>It&#39;s one of the most-adopted toolkits in its space with its key contributors being heavily involved in the overall movement of the reactive community as well.\\nAt AOE, we use Akka when we need high-performance, efficient data processing or where its finite state machine plays nicely with the domain of the application. It is worth mentioning that the actor model might come with extra complexity and therefore should be used in problem spaces where the advantages of this approach bring enough value and no accidental complexity.</p>\\n","featured":true,"flag":"changed","tags":["coding"],"revisions":[{"release":"2017-03-01","ring":"trial","body":"<p>With the growing adoption of microservice-based architectures, the interest in frameworks and tools that make building systems that follow the reactive manifesto possible has increased.</p>\\n<p>Akka provides you a toolkit and runtime based on the Actor model known from Erlang to reach this goal.</p>\\n<p>It&#39;s one of the most-adopted toolkits in its space with its key contributors being heavily involved in the overall movement of the reactive community as well.\\nAt AOE, we use Akka when we need high-performance, efficient data processing or where its finite state machine plays nicely with the domain of the application. It is worth mentioning that the actor model might come with extra complexity and therefore should be used in problem spaces where the advantages of this approach bring enough value and no accidental complexity.</p>\\n"}],"position":[97,178]},{"id":"akka-streams","release":"2019-11-01","title":"Akka Streams","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p>Updated to &quot;adopt&quot;</p>\\n","featured":false,"flag":"default","revisions":[{"release":"2018-03-01","ring":"assess","body":"<p>In our backend services, we frequently encounter the task to transform data coming from and uploading to external sources and services.</p>\\n<p>Building more complex data transformation processes with Akka Actors has proven very difficult for us in the past.</p>\\n<p>Seeing this data as a stream of elements could allow handling them piece by piece and only keeping as much of the data in-process as can currently be handled.</p>\\n<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://doc.akka.io/docs/akka/current/scala/stream/index.html\\">Akka Streams</a> is a <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://www.reactive-streams.org/\\">Reactive Streams</a> implementation that provides a very end-user friendly API for setting up streams for data processing that are bounded in resource usage and efficient. \\nIt uses the Akka Actor Framework to execute these streams in an asynchronous and parallel fashion exploiting today&#39;s multi-core architectures without having the user to interact with Actors directly. \\nIt handles things such as message resending in failure cases and preventing message overflow. It is also interoperable with other Reactive Streams implementations.</p>\\n<p>Our first trials with Akka Streams were promising but we haven&#39;t yet implemented complex services with it.</p>\\n<p>We will continue looking into it together with the <a href=\\"/digital_xp_techradar/languages-and-frameworks/alpakka/\\">Alpakka</a> Connectors for integration\\nwork.</p>\\n"}],"position":[252,321]},{"id":"alpakka","release":"2023-11-01","title":"Alpakka","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p>Updated to &quot;adopt&quot;</p>\\n","featured":false,"flag":"changed","tags":["coding"],"revisions":[{"release":"2018-03-01","ring":"assess","body":"<p>When using <a href=\\"/digital_xp_techradar/languages-and-frameworks/akka-streams/\\">Akka Streams</a> to build reactive data transformation services you usually need to connect to several services such as FTP, S3 buckets, AMQP brokers or different databases.</p>\\n<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://developer.lightbend.com/docs/alpakka/current/\\">Alpakka</a> provides integration building blocks for Akka Streams to access these services in a reactive fashion and contains transformations for working with XML, CSV or JSON structured data.</p>\\n<p>Combined, Akka Streams and Alpakka enable us to build small reactive integration services with minimal resource consumption and good performance, and are a good alternative to larger ESB solutions or integration tools.</p>\\n"}],"position":[308,346]},{"id":"angular","release":"2023-11-01","title":"Angular","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://angular.io/\\">Angular</a>, now in version 15, remains a robust and well-maintained front-end framework that continues to build new features on its solid foundation. Angular offers excellent tools for building large-scale applications.</p>\\n<p>For instance, it includes built-in capabilities for setting up and managing a monorepo, simplifying the sharing of components across multiple projects. As a framework, Angular takes an opinionated approach to solving various problems, reducing the need for extensive decision-making while maintaining consistency, yet still providing flexibility where necessary. Angular 15 further stabilizes standalone components, a feature introduced in Angular 14, with the aim of simplifying Angular applications and reducing module complexity, addressing a common criticism of Angular.</p>\\n<p>The ease of upgrading to new versions has improved significantly due to the framework&#39;s stability and the detailed migration guides provided by the maintainers.</p>\\n","featured":true,"flag":"changed","tags":["coding","frontend"],"revisions":[{"release":"2021-07-01","ring":"adopt","body":"<p>Actually in version 11 Angular has become an adult SPA framework with much faster build time and significant smaller production builds.\\nUpdating to newer versions has become mostly a &quot;no-brainer&quot; which helps us to integrate the latest community bug-fix &amp; improvements on a friday during a cup of coffee.\\nAngular ships as a fully integrated development platform from scaffolding, code generation, routing, guarding, unit/e2e-testing, multi-language builds (i18n) and stable dev/build processes and keeping it extensible at the same time.\\nThis holistic nature of Angular makes it in the beginning way more difficult to learn but once understood it&#39;s a great candidate to go very fast into &quot;requirement implementation&quot; aka providing early value rather than library wiring.\\nBeside the existing telco-industry projects we&#39;ve actually also chosen Angular for resource critical industry 4.0 / embedded projects.\\nHere we&#39;ve selected Angular beside the performance aspects to fulfill requirements like adaptive multi device support (custom hardware buttons, tablets and laptops) on the one hand and on the other hand to reduce the risk loosing time by having too many self-managed external dependencies.</p>\\n"},{"release":"2018-03-01","ring":"trial","body":"<p>In addition to numerous major upgrades from version 2 to 5, which often needed a &quot;hands-on&quot; approach, a lot has happened in the Angular ecosystem in 2017. \\nSpecifically, the improvements in the HTTP-Client, which now requires less coding effort. \\nOr the vast improvements on angular.cli such as aot (ahead of time compile) for faster rendering, fewer requests and much smaller builds, to just name the most important ones.</p>\\n<p>We have achieved particularly good results using Angular in large and medium-size projects. \\nActually, it&#39;s our framework-of-choice in our telecommunication sector teams as a single-page application framework (SPA) for microservice front ends.</p>\\n<p>The convenient scaffolding of unit- and end-to-end-tests provides a quality-driven workflow. \\nAlso, the module- and component architecture helps to keep the codebase understandable end maintainable.</p>\\n"},{"release":"2017-03-01","ring":"assess","body":"<p>The latest version of the Angular Framework, which is used for large single-page applications.</p>\\n<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://angular.io/\\">Angular</a> is a complete rewrite of Angular 1 — many things have changed compared to the first version. The latest best practices and toolings from the JavaScript community have found their way into Angular.</p>\\n<p>It supports DI (dependency injection), it has a clean inheritance and a good separation of concerns. Angular follows the <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.w3.org/standards/techs/components#w3c_all\\">web component standards</a> to avoid negative side effects between components.</p>\\n<p>We think that Angular is well-structured on both a development and an application level.</p>\\n<p>When talking about Angular, we must consider the <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://cli.angular.io/\\">angular.cli</a> as well, which provides a huge level of intelligent automation along the development process and project setup.</p>\\n"}],"position":[381,351]},{"id":"ant","release":"2019-11-01","title":"Ant","ring":"hold","quadrant":"tools","body":"<p>Apache Ant was build in 1997 to have something like Make in the C/C++ world for Java.\\nAnt uses xml files to describe steps required to produce executable artifacts from source code.\\nThe main concepts of tasks and targets are programmable in an imperative style.</p>\\n<p>Apache Ant was and is widely used by large software projects.\\nOur recommendation is to stop using Apache Ant for new projects.\\nIf you are free to choose, we recommend Gradle as an Apache Ant replacement.</p>\\n","featured":false,"flag":"default","position":[762,465]},{"id":"anypoint-platform","release":"2019-11-01","title":"Anypoint Platform","ring":"trial","quadrant":"tools","body":"<p>Recently our teams migrated some project from Anypoint to <a href=\\"/digital_xp_techradar/tools/apache-camel/\\">&quot;Apache Camel&quot;</a> or use <a href=\\"/digital_xp_techradar/tools/alpakka/\\">&quot;Alpakka&quot;</a> for integration work.</p>\\n","featured":false,"flag":"default","revisions":[{"release":"2017-03-01","ring":"trial","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.mulesoft.com/integration-resources\\">Anypoint platform</a> (formerly known as Mule or Mule ESB) is an Enterprise Integration Platform written in Java.</p>\\n<p>Anypoint provides tools to use Enterprise Integration Patterns (EAI) and has a high number of ready-to-use connectors to communicate with software tools such as SAP, Salesforce, etc.</p>\\n<p>Anypoint Community Version is Open Source and contribution is possible.\\nThe platform is pluggable with own connectors.\\nMulesoft is also driving the <a href=\\"/digital_xp_techradar/tools/raml/\\">RAML</a> specification and related Open Source tools.</p>\\n<p>AOE is a Mulesoft Partner and we use both the Community and Enterprise Versions of Anypoint.\\nWe use Anypoint as an API Gateway to combine and transform data from multiple backends.\\nWe use it as ESB or Integration platform for loose coupling of software components.\\nWe also use it as legacy modernization to provide modern APIs for legacy or external software.</p>\\n"}],"position":[446,622]},{"id":"apisix","release":"2023-02-23","title":"Apache APISIX","ring":"assess","quadrant":"tools","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://apisix.apache.org/\\">Apache APISIX</a> is an open-source, high-performance API gateway, designed for\\nmicroservices, cloud-native and container-based architecture. It provides a wide range of features to manage\\nand secure API services:</p>\\n<ul>\\n<li>Scalability: Load balancing and routing, dynamic scaling</li>\\n<li>Performance: Fast and reliable, supports caching and rate limiting</li>\\n<li>Multi-Protocol Support: Supports HTTP, HTTPS, WebSockets and gRPC</li>\\n<li>Customization: Plugins for authentication, authorization and traffic management</li>\\n</ul>\\n<p>At AOE, we are currently assessing Apache APISIX in one of our cloud infrastructure projects.</p>\\n","featured":true,"flag":"default","tags":["devops"],"position":[545,690]},{"id":"apache-camel","release":"2019-11-01","title":"Apache Camel","ring":"trial","quadrant":"languages-and-frameworks","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://camel.apache.org/\\">&quot;Camel&quot;</a> is an open source integration framework that empowers you to quickly and easily integrate various systems consuming or producing data.</p>\\n<p>Our teams are using Apache Camel as API Gateway that offers APIs and takes care of Federation to various Backends as well as Authorisation tasks.</p>\\n","featured":false,"flag":"default","position":[354,155]},{"id":"api-first-design-approach","release":"2022-03-28","title":"API-First Design Approach","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>The API of any software we develop shapes in which way developers, teams, customers and users interact with our\\nsoftware.</p>\\n<p>No matter if a Frontend-API like GraphQL, a rpc-API like gRPC or an internal API published by a module in a larger\\nproject or shared library, messing the API up always creates headaches and is hard to correct.\\nIf we stick to semantic versioning, it&#39;s actually pretty impossible to change a once-published API without breaking\\nconsumers.</p>\\n<p>By today&#39;s standards we prioritize API design before actual development, to be clear on how our software interacts, and\\nthus move this pattern to &quot;adopt&quot;.</p>\\n","featured":true,"flag":"default","tags":["architecture"],"revisions":[{"release":"2017-03-01","ring":"trial","body":"<p>The API-First Design Approach puts the API design at the beginning of the implementation without any constraints, for example, from the current IT infrastructure or the implementation itself.\\nThe idea is to design the API in a way that it serves its purpose best and the consumers are enabled to work efficiently.</p>\\n<p>There are several advantages to this approach. For example, it can help to avoid reflecting the internal structure of the application or any internal constraints.\\nFurthermore, as one of the most important design aspects is consistency, one can define features such as the behavior of security, URL schemes, and API keys upfront.\\nIt also helps speed up parallel implementation.\\nA team that consumes the API can start working directly after the API design because it can easily be mocked.</p>\\n<p>There are several tools for modelling an API, but here at AOE we mainly use <a href=\\"/digital_xp_techradar/tools/raml/\\">RAML</a> as it provides a rich set of tools for generating documentation, mocking and more.\\nFor mocking we use <a href=\\"/digital_xp_techradar/tools/wiremock/\\">WireMock</a>, for example.</p>\\n<p>Related to the &quot;API-First&quot; approach is the &quot;Headless&quot; approach where an existing application (with or without existing API) is used as a backend for a separate frontend.\\nWe used this with sucess for Magento-based E-Commerce platforms.\\nThis allows encapsulating the core features of that application, while integrating it into a larger landscape of components using its API as a unified way to interact between components.\\nDecoupling the core logic from its presentation layer allows picking the best technology stack for the various parts independently.</p>\\n<p>For further reading see:</p>\\n<ul>\\n<li><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.programmableweb.com/api-university/understanding-api-first-design\\">Understanding API First Design</a></li>\\n<li><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://www.techradar.com/news/software/applications/when-crafting-your-api-strategy-put-design-first-1262043?src=rss&attr=all\\">When crafting your API strategy, put design first</a></li>\\n</ul>\\n"}],"position":[469,352]},{"id":"apicurio","release":"2021-07-01","title":"Apicurio Studio","ring":"trial","quadrant":"tools","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.apicur.io/studio/\\">Apicurio Studio</a> is a browser-based, open-source API design studio. It can be used to create or modify APIs using the <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://swagger.io/specification/\\">OpenAPI specification</a>. The visual editor supports collaborative development and allows to easily define example responses matching incoming requests.</p>\\n<p>At AOE, we use Apicurio Studio in conjunction with <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://microcks.io/\\">Microcks</a> as part of our API-first development approach. While specifying an API, a corresponding mock server can be set up with a single mouse click. The frontend and backend parts of an application can then be developed independently by using the mock server and the API specification generated by Apicurio Studio.</p>\\n","featured":true,"flag":"default","tags":["architecture"],"position":[624,491]},{"id":"apollo-client","release":"2023-02-23","title":"Apollo Client","ring":"trial","quadrant":"tools","body":"<p>The <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/apollographql/apollo-client\\">Apollo Client</a> is a tool to efficiently work together with an GraphQL server. \\nIt makes it easy to run your queries and mutations, cache results, brings tooling to download schemas and generate types to name a few of the useful features.</p>\\n","featured":false,"flag":"default","tags":["architecture"],"position":[504,627]},{"id":"apm","release":"2021-07-01","title":"Application Performance Management","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>Application performance management (APM) enables to predict and prevent performance issues before they impact your users or your business.\\nAPM solutions help organizations to ensure that applications meet performance, availability and user experience expectations.\\nThis can be achieved by measuring application performance, providing visibility into performance issues, alerting developers and administrators when performance problems appear, and allow analysing how reliable an improvement is compared to a previous state.\\nIn the last years APM solutions are evolving from application performance monitoring tools to more feature full systems that incorporating observability, performance data collection and analysis, which is more to date with distributed cloud-native applications.</p>\\n<p>Our experience with APM relates to the instrumentation of applications. This includes exposing metrics, tracing and integration with external services such as <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://newrelic.com/\\">New Relic</a>. We decided to go for this approach given the simplicity and the benefits they proved on a daily basis when analyzing and optimizing our software.</p>\\n","featured":true,"flag":"default","tags":["devops"],"position":[426,367]},{"id":"argocd","release":"2022-03-28","title":"Argo CD","ring":"trial","quadrant":"tools","body":"<p>We&#39;ve been managing the state of application deployments in YAML files via Git repositories in the past. But we still\\nwouldn&#39;t call this GitOps. A lot of custom glue code and tools were involved.\\nWhile <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/roboll/helmfile\\">helmfile</a> replaces some of our custom tooling in a nice way we&#39;ve also been\\ntrying a new approach with <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://argoproj.github.io/cd/\\">Argo CD</a>.</p>\\n<p>Argo CD watches Git repositories continuously and makes sure the state defined there is applied to the Kubernetes\\ncluster. It introduces a couple of CRDs including one representing a Helm deployment. Using\\nan &quot;<a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://argo-cd.readthedocs.io/en/stable/operator-manual/cluster-bootstrapping/#app-of-apps-pattern\\">app of apps</a>&quot;\\npattern you can bundle multiple apps together and use existing Git workflows (branching, tagging, PR) to manage releases\\nto your various stages.</p>\\n<p>Also, the fact the Argo CD only needs read-only access to the Git repositories makes it a lot cleaner from a security\\npoint of view since no credentials to any clusters need to be buried in any CI/CD pipelines anymore.</p>\\n<p>Additionally, Argo CD comes with a nice web frontend that gives a lot of insight into what has been deployed and where\\nproblems might exist. For many developers this view on the cluster (with focus on their apps) might be the first go-to\\nfor checking their apps and troubleshooting issues making other tools like Lens or access via kubectl obsolete.</p>\\n","featured":true,"flag":"default","tags":["ci/cd"],"position":[633,448]},{"id":"asciidoc","release":"2019-11-01","title":"AsciiDoc","ring":"assess","quadrant":"tools","body":"<p>AsciiDoc is a <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://en.wikipedia.org/wiki/Lightweight_markup_language\\">lightweight markup language</a> such as Markdown. \\nWith a concise Syntax, it supports more features than Markdown without extensions such as Tables and Table of Contents.\\nIt&#39;s easy to write complex documentation with AsciiDoc. And with Asciidoctor you can export your text to Pdf, HTML, etc.</p>\\n<p>At AOE, we use AsciiDoc for Documentation in our Repositories.</p>\\n","featured":false,"flag":"default","position":[514,676]},{"id":"axure","release":"2023-11-01","title":"Axure","ring":"trial","quadrant":"tools","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.axure.com/\\">Axure</a> is a tool that enables the creation of flowcharts, wireframes, mockups, user journeys and more.\\nThrough features such as conditional logic, dynamic content and animations it is possible to create highly functional and rich UI prototypes, which convey a realistic look and feel as to how the application to be developed should behave and look.</p>\\n<p>We at AOE have used Axure successfully in several projects and it helped us a lot, particularly:</p>\\n<ul>\\n<li>as a basis for discussing how features should look, feel and work with customers</li>\\n<li>as a basis for customers&#39; discussions with other stakeholders</li>\\n<li>as a basis for discussion and specifications for developers as to how features should look and behave</li>\\n</ul>\\n<p>In conclusion, Axure is a great tool that provides all stakeholders with a common understanding and helped us a lot to specify requirements and find their implications.</p>\\n","featured":false,"flag":"changed","tags":["ux/ui"],"position":[613,535]},{"id":"babel","release":"2022-03-28","title":"Babel","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p>We have been using babel for some time now. Since we have started using it, we don&#39;t have to struggle with unimplemented features of ECMAScript. \\nIn this regard, JavaScript is JavaScript, no matter what browser you are using. We strongly recommend using Babel or similar solutions (e.g. TypeScript).</p>\\n","featured":false,"flag":"default","revisions":[{"release":"2017-03-01","ring":"trial","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://babeljs.io/\\">Babel</a> gives you the possibility to use the latest features from JavaScript (<a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://en.wikipedia.org/wiki/ECMAScript\\">ECMAScript</a>) in the browser of your choice.</p>\\n<p>Without Babel you had to use the feature set of your oldest browser or use feature detections such as <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://modernizr.com/\\">modernizr</a> or write polyfills on your own.</p>\\n<p>In general, Babel is split in 2 ways to bring you the new goodies you want.</p>\\n<ol>\\n<li><p>New syntax will be compiled to old EcmaScript 5 code e.g.:</p>\\n<ul>\\n<li><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\\">arrow-functions</a></li>\\n<li><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator\\">generators</a></li>\\n<li><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\\">destructuring</a></li>\\n<li><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\\">template literals</a></li>\\n<li><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://babeljs.io/learn-es2015/\\">...</a></li>\\n</ul>\\n</li>\\n<li><p>New globals and functions are provided by <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://babeljs.io/docs/usage/polyfill/\\">babel-polyfill</a> e.g.:</p>\\n<ul>\\n<li><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\\">Promise</a></li>\\n<li><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\\">Array.find</a></li>\\n<li><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\\">Array.includes</a></li>\\n<li><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/zloirock/core-js#index\\">...</a></li>\\n</ul>\\n</li>\\n</ol>\\n<p>The configuration is really simple due to the <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://babeljs.io/docs/plugins/\\">plugin system</a>. You can choose which ECMAScript version and <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://babeljs.io/docs/plugins/#presets\\">stage presets</a> you want to use.</p>\\n<ul>\\n<li>for the latest ECMAScript version use <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://babeljs.io/docs/plugins/preset-env/\\">babel-preset-env</a></li>\\n<li>for version 2015 only use <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://babeljs.io/docs/plugins/preset-es2015/\\">babel-preset-2015</a></li>\\n</ul>\\n<p>To know what you need you can practice ECMAScript 6 by doing it with <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://es6katas.org/\\">es6katas</a> and ask <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://caniuse.com/\\">caniuse</a>.</p>\\n<p>If you are using <a href=\\"/digital_xp_techradar/languages-and-frameworks/typescript/\\">TypeScript</a>, Babel is not necessary since you already get the new features with TypeScript.</p>\\n"}],"position":[311,304]},{"id":"backstage","release":"2022-03-28","title":"backstage","ring":"assess","quadrant":"tools","body":"<p>We see a lot of clustering in teams, microservices, libraries, and so on. We think a centralized software catalog\\nlike <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://backstage.io/\\">Backstage</a> can help use to get a clearer view of our stack and the dependencies of a\\nplatform.\\nIt also helps to get the information and documentation you need as a developer more quickly.</p>\\n<p>Backstage is an open-source developer portal platform created by Spotify. There is a very active community around it\\nwith already a lot of plugins for integrations with other tools, ci, monitoring and so on.</p>\\n<p>At AOE we assess backstage in a big project with a subset of features.</p>\\n","featured":true,"flag":"default","tags":["documentation","agile"],"position":[591,646]},{"id":"blameless-post-mortems","release":"2023-11-01","title":"Blameless Post Mortems","ring":"adopt","quadrant":"methods-and-patterns","body":"<blockquote>\\n<p>Failure and invention are inseparable twins.</p>\\n<p>— <cite>Jeff Bezos</cite></p>\\n</blockquote>\\n<p>Blameless Post Mortems provide a concept for dealing with failures that inevitably occur when developing and operating complex software solutions. After any major incident or outage, the team gathers to perform an in-depth analysis of what happened and what can be done to mitigate the risk of similar issues in the future.</p>\\n<p>Based on trust and the assumption that everyone involved had good intentions to do the best possible job given the information at hand, Blameless Post Mortems offer an opportunity to continuously improve the quality of software and infrastructure and the processes for dealing with critical situations. We consider this a fundamental principle that enables our staff to address deficiencies without fear of repercussions and reduces the probability of incidents being concealed.</p>\\n<p>The post-mortem documentation usually includes a timeline of the events leading to an incident and the steps taken for its remediation, as well as future actions and lessons learned to enhance the resilience and stability of our services.</p>\\n<p>At AOE, we make it a priority to conduct a Blameless Post Mortem meeting after every user-visible incident.</p>\\n","featured":false,"flag":"changed","tags":["devops","documentation"],"revisions":[{"release":"2019-11-01","ring":"assess","body":""},{"release":"2018-03-01","ring":"trial","body":"<blockquote>\\n<p>Failure and invention are inseparable twins.</p>\\n<p>— <cite>Jeff Bezos</cite></p>\\n</blockquote>\\n<p>Blameless Post Mortems provide a concept of dealing with failures that inevitably occur when developing and operating complex software solutions. After any major incident or outage, the team gets together to perform an in-depth analysis of what happened and what can be done to mitigate the risk of similar issues happening in the future.</p>\\n<p>Based on trust, and under the assumption that every person involved had good intentions to do the best-possible job given the information at hand, Blameless Post Mortems provide an opportunity to continuously improve the quality of software and infrastructure and the processes to deal with critical situations.</p>\\n<p>The post mortem documentation usually consists of both a timeline of the events leading to an incident and the steps taken to its remediation, as well as future actions and learnings for increasing resilience and stability of our services.</p>\\n<p>At AOE, we strive to conduct a Blameless Post Mortem meeting after every user-visible incident.</p>\\n"}],"position":[424,293]},{"id":"bower","release":"2019-11-01","title":"Bower","ring":"hold","quadrant":"tools","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://bower.io/\\">Bower</a> is a package manager for frontend resources such as JavaScript libraries and CSS frameworks. Compared to <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.npmjs.com/\\">npm</a>, it has a somewhat different approach to loading and resolving the packages, resulting in a smaller and cleaner folder structure.</p>\\n<p>In small web projects, this approach is good and sufficient, but larger projects will need more dependencies such as task runners or testing frameworks, which are not available through Bower.\\nAs most of the frontend libraries are also available through npm, it&#39;s not surprising that we ask ourselves why Bower is still needed.</p>\\n<p>At AOE, we decided to use npm as the only package manager to avoid having multiple tools doing similar things.\\nDevelopers only need to deal with one solution, which makes the project easier to maintain.</p>\\n","featured":false,"flag":"default","position":[762,517]},{"id":"csharp","release":"2023-02-23","title":"C#","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p>C# is a statically, strongly typed and object-oriented language.</p>\\n<p>After PHP and several JVM languages, we also have projects with C#. We value all features of this highly developed\\nlanguage.</p>\\n","featured":true,"flag":"default","tags":["coding"],"position":[262,354]},{"id":"client-side-error-logging","release":"2023-02-23","title":"Client-Side Error Logging","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>Updated to adopt.</p>\\n","featured":true,"flag":"default","tags":["architecture","frontend"],"revisions":[{"release":"2017-03-01","ring":"trial","body":"<p>More and more business logic is done client-side with various web and app technologies.\\nHow do we know if everything works in production?\\nWe can easily track backend exceptions in the server logs, but what about client-side errors in the user&#39;s browser or mobile app?</p>\\n<p>With client-side error logging, we send errors to a central server to see instantly what is going wrong.\\nWith this method errors can be found and resolved quickly before they affect even more users.</p>\\n<p>At AOE, we use the Open Source solution <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://sentry.io/welcome/\\">Sentry</a>.io.\\nIt can handle multiple projects and teams and integrates well with other services such as Mattermost/Slack and Issue Tracking Systems.</p>\\n"}],"position":[449,339]},{"id":"cockpit","release":"2021-07-01","title":"Cockpit","ring":"hold","quadrant":"tools","body":"<p>We decided to put this CMS on hold due to other - more adopted - alternatives like <a href=\\"/digital_xp_techradar/tools/strapi/\\">Strapi</a>.</p>\\n","featured":false,"flag":"default","revisions":[{"release":"2019-11-01","ring":"assess","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://getcockpit.com/\\">Cockpit</a> is a self-hosted headless and api-driven content management system.</p>\\n"}],"position":[677,649]},{"id":"colima","release":"2022-03-28","title":"Colima","ring":"assess","quadrant":"tools","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/abiosoft/colima\\">Colima</a> provides container runtimes on macOS with minimal setup.</p>\\n<p>At AOE, we are using Colima as drop-in replacement\\nfor <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.docker.com/products/docker-desktop/\\">Docker Desktop</a>.</p>\\n<p>The main benefits are</p>\\n<ul>\\n<li>Support of M1 Macs</li>\\n<li>Simple CLI interface</li>\\n</ul>\\n<p>as well as the usual requirements for container runtimes like</p>\\n<ul>\\n<li>Docker and Containerd support</li>\\n<li>Port forwarding</li>\\n<li>Volume mount</li>\\n<li>Kubernetes</li>\\n</ul>\\n","featured":false,"flag":"default","position":[655,598]},{"id":"complexity-management","release":"2021-07-01","title":"Complexity Management","ring":"trial","quadrant":"methods-and-patterns","body":"<p>Our world is increasingly complex - our society and the economic system is developing fast - we constantly have to deal with surprises and uncertainty. This is especially the case in IT organisations that collaboratively and cross-functional work on innovations, &quot;digitalization strategies&quot; or &quot;transformation projects&quot;.</p>\\n<p>Something is complex, when it is not possible to relate all its elements at the same time. There is no clear cause and result relationship. Decision making processes cannot be well structured.</p>\\n<p>But of course that should not be used as an excuse. This realisation can motivate us to find ways to better deal with it. To come to better and new ideas together, to take good decisions and to learn from them.</p>\\n<p>Complexity management capabilities describe the ability to deal with complexity. The more different dimensions are used to observe and analyse a situation, the higher they are differenciated and the faster this is done - the better complexity is managed. <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.carl-auer.de/magazin/systemzeit/komplexitatsmanagement-modell-stufen-formen\\">C2M Model</a></p>\\n<p>The complexity in IT initiatives and projects comes from the uncertainties of how a product is adopted by the users and the market, the nearly endless choices of technical ingredients, the team and organisational structures and the established collaboration and communication etc.</p>\\n<p>Agile methods and other best practices evolved from that challenges - and are now widely adopted - but without proper reflection and complexity management they can also lead to dysfunctional communication patterns.</p>\\n<p>Since we are solving problems in collaboration we also need to deal with the complexity of the communication system (social system):</p>\\n<ul>\\n<li>We are often seeing how large and historical organisations have a hard time with their transformation initiatives. </li>\\n<li>We are seeing teams, where over the time dysfunctional patterns have emerged. </li>\\n<li>We see teams where no clear communication is established and where the important conflicts are not addressed.</li>\\n<li>We see teams that argue one-dimensional and spend time and energy in useless debates.</li>\\n<li>We see organisations that are full of internal orientation and activities - while they are losing the connection to the external customers and market.</li>\\n</ul>\\n<p>An understanding of how communication systems are working - and what conditions for working communication (and therefore collaboration) exist, helps to address such situations better. It also helps to understand how we can use conflicts for creativity (creating new perspectives and ideas).</p>\\n<p>That includes the awareness that we can always learn from each other! </p>\\n<p>That is the reason we see systemic perspectives with proper system theoretical background emerging in the space of organisational development. We believe that proper learning of these perspectives and the awareness of complexity management capabilities can help organisations to form functional collaboration. This learning helps to reflect systems and oneself more conscious - and that can be a healthy condition for more impact and learning. It may also help that an organisation does not blindly follow the next model, agile &quot;hype&quot; or consultant promises.</p>\\n<p>More on that topic: <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.carl-auer.de/magazin/systemzeit/communication-reorganization-of-undetermined\\">Systemic Communication</a></p>\\n","featured":true,"flag":"default","tags":["agile","architecture"],"position":[608,303]},{"id":"concourse-ci","release":"2023-02-23","title":"Concourse","ring":"trial","quadrant":"tools","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://concourse-ci.org/\\">Concourse</a> is an open-source continuous &quot;thing-doer&quot;.\\nIt represents a general approach for automation which can be used for Continuous Integration and Continuous Delivery.\\nConcourse CI follows a strict concept that is based on idempotency, immutability, declarative config, stateless workers, and reproducible builds.\\nPipelines are built on the mechanics of resources, tasks and jobs, which are all configured in one or multiple YAML files.</p>\\n<p>Concourse claims to be &quot;simple&quot; but has a steep learning curve in the beginning till it gets simple to use. \\nConcourse is used in the Congstar Team to automate infrastructure deployments.</p>\\n","featured":false,"flag":"default","tags":["ci/cd"],"position":[584,523]},{"id":"consul","release":"2018-03-01","title":"Consul","ring":"assess","quadrant":"tools","body":"<p>Consul is a lightweight service to provide a service discovery registry with failure detection (health checks) for circuit breakers. It also provides configuration management with key/value storage.<br>The typical way to use it is that a consul master cluster takes care of the update and write processes and consul clients run locally on the apps host - data is shared across the complete Consul cluster.\\nThe data can be accessed by using DNS and HTTP APIs.</p>\\n<p>At AOE, we use Consul for settings distribution with consul-template as a way to do <a href=\\"/digital_xp_techradar/methods-and-patterns/settings-injection/\\">Settings Injection</a> during deployment.\\nConsul is also used as service discovery between apps inside <a href=\\"/digital_xp_techradar/methods-and-patterns/microservices/\\">microservice</a> environments.</p>\\n<p>With Vault there is another tool that can be used to manage and share secrets.</p>\\n","featured":false,"flag":"default","position":[670,562]},{"id":"container-based-builds","release":"2022-03-28","title":"Container-based builds","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>Updated to &quot;adopt&quot;. Container based builds has getting to the de facto standard for our pipelines in <a href=\\"/digital_xp_techradar/tools/gitlab/\\">GitLab</a> or other CI Tools.</p>\\n","featured":false,"flag":"default","revisions":[{"release":"2017-03-01","ring":"assess","body":"<p>Running your builds in isolated containers keeps your build servers clean.\\nIt allows you to even run them with multiple versions of a framework or programming language.\\nYou don&#39;t need additional machines like you would for running builds with PHP5 or PHP7 at the same time or running some legacy builds.</p>\\n<p>Note that you need to think about some kind of caching mechanism for your dependencies to avoid downloading them in every build, which would cause long build times.</p>\\n<p>At AOE, we are currently starting to use this approach for building services and it is especially useful if your build has special dependencies.\\nAlso, it&#39;s possible to use GitLab as a build tool or use Docker with the new Jenkins pipeline.\\nFor caching we are evaluating minio as a cache server.\\nWe noticed that our builds run quite rapidly and reliably with that.\\nAlso, the complexity of the builds decreased since we don&#39;t need any workarounds, which were caused by having everything installed on one build server.</p>\\n"}],"position":[503,353]},{"id":"conventionalcommits","release":"2022-03-28","title":"Conventional Commits","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>Conventional commits are being widely used in our teams, therefore we&#39;re changing this to adopt. Using commit messages\\nwhich follow the <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.conventionalcommits.org/en/v1.0.0/\\">conventional commits specification</a> helps us to easily\\nprocess changes made within a software release. It also helps to reduce confusion around commit message requirements for\\nnew team members.</p>\\n<p>The <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/AOEpeople/semanticore\\">Semanticore</a> release bot is a tool we published, which utilizes\\nconventional commits to maintain the release notes of our software and suggests the correct version of the upcoming\\nrelease.</p>\\n","featured":true,"flag":"default","tags":["coding","quality assurance","ci/cd"],"revisions":[{"release":"2021-07-01","ring":"trial","body":"<p>The Conventional Commits specification is a lightweight convention on top of commit messages.\\nIt provides a small set of rules for writing commit messages and therefore creating an explicit commit history.\\nThe convention dovetails with <a href=\\"/digital_xp_techradar/methods-and-patterns/semver2/\\">SemVer</a>, by describing the features, fixes, and breaking changes made in commit messages.\\nThe specification contains only 16 items that are easy to follow. The predefined structure allows everyone in the team to get a better overview of what the commit messages relates to and what part of the code a change has to do with.\\nSome benefits of using these specifications include: the ability to automatically generate changelogs, the ability to determine a semantic version bump (based on the types of commits landed) and being able to communicate the nature of changes to teammates and stakeholders.</p>\\n<p>We use conventional commits in the team with the help of a git template.\\nThe template contains a guide of elements that are required in the specification plus some information about project specific items that should also be part of a commit, such as a ticket number.</p>\\n"}],"position":[473,329]},{"id":"crc","release":"2022-03-28","title":"CRC Games","ring":"assess","quadrant":"methods-and-patterns","body":"<p>Class Responsibility Collaboration Card Games are a method to discuss and align the software design - especially useful for object-oriented software.</p>\\n<p>A proper software design is one of the most important things to ensure the sucess and the maintainability of your software.\\nEspecially for iterative development methods, where you work on a software task by task, it is important to have designs sessions that also look forward to the next iterations and the conceptional whole.</p>\\n<p>And for software design to be successful, it is very important that everybody (in the team) has the same understanding of the design and stands behind it.</p>\\n<p>CRC sessions help to design and align the high-level object design and collaboration of your system with the whole team. During such sessions new team members can learn from the experience and explanations of tropers.</p>\\n<p>This is how we often conduct a CRC Session:</p>\\n<ul>\\n<li>Preparation:<ul>\\n<li>Make sure everybody has a high-level overview of the software (bounded context / use case overview). Because design should also focus on the long term.</li>\\n<li>Choose some scenarios (such as &quot;customer adds a promoted product to cart and sees the discounts...&quot;) that you want to discuss in this session</li>\\n</ul>\\n</li>\\n<li>Collect candidates for classes:<ul>\\n<li>For the first session, it makes sense to search for potential candidates for classes.</li>\\n<li>Just put them on a whiteboard. Often nouns in scenarios are good candidates.</li>\\n<li>Put the most promising ones on Post-its. (You can add more at any time)</li>\\n</ul>\\n</li>\\n<li>CRC session:<ul>\\n<li>1 or 2 people stand up and try to explain the scenario with the help of the classes.</li>\\n<li>This is similar to explaining a sequence diagram and the cards are put on the table from left to right. During or after this, you can discuss design decisions and alternatives with the team.</li>\\n<li>After this, someone else can stand up and present a potential alternative sequence.</li>\\n<li>Once the team is aligned on a version they want to implement, it makes sense that it is repeated by different persons. Being exact is very important and avoids the situation where people can have an individual understanding of the model. The model and the collaboration lives in the heads of the people in the team – therefore it is important that everyone understands it the same way.</li>\\n</ul>\\n</li>\\n<li>Closing:<ul>\\n<li>We are often not too enthusiastic about adding a list of &quot;collaborators&quot; to the cards, since the sequence explains this very well.</li>\\n<li>So just take a picture and document the result somewhere, so that you can review the status for the next CRC session.</li>\\n<li>Maybe some decisions are worth being documented in your <a href=\\"/digital_xp_techradar/methods-and-patterns/adr/\\">Architecture decision records</a></li>\\n</ul>\\n</li>\\n</ul>\\n","featured":false,"flag":"default","position":[656,203]},{"id":"css-in-js","release":"2023-11-01","title":"CSS-in-JS","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>Since the release of React 18, many CSS-in-JS libraries like styled-components, emotion, and stitches have encountered a significant challenge. They generate CSS only at runtime, making them incompatible with streaming and <a href=\\"../methods-and-patterns/react-server-components.html\\">React Server Components</a>. React developers have addressed this issue in an <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/reactwg/react-18/discussions/110\\">article</a>, where they explicitly advise against using CSS-in-JS libraries that generate CSS at runtime.</p>\\n<p>This has created substantial uncertainty among developers and the communities of these affected libraries. The question arises: Is it possible to refactor these runtime libraries into buildtime libraries? To date, none of the libraries have announced any such plans, and, unfortunately, one of the most popular new libraries, stitches, is <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/stitchesjs/stitches/discussions/1149#discussioncomment-6223090\\">no longer being maintained</a>.</p>\\n<p>Fortunately, there has been a growing number of CSS-in-JS solutions that generate CSS at buildtime. Libraries like <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://vanilla-extract.style/\\">Vanilla Extract</a>, <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://panda-css.com/\\">panda</a>, and <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.kuma-ui.com/\\">Kuma UI</a> maintain an excellent developer experience, overcome performance disadvantages, and are compatible with React 18.</p>\\n<p>Unfortunately, these libraries are not yet widely adopted, and it&#39;s challenging to predict how they will develop in the future. Therefore, at AOE, we continue to use established solutions as long as the new React features are not mandatory.</p>\\n<p>Moreover, we are gaining experience with these new libraries because we see significant potential in them.</p>\\n","featured":true,"flag":"changed","tags":["coding","frontend"],"revisions":[{"release":"2022-03-28","ring":"adopt","body":"<p>At AOE we use CSS-in-JS over regular CSS because it provides a much better developer experience and plays nicely together with modern component libraries like React.</p>\\n"},{"release":"2021-07-01","ring":"trial","body":"<p>CSS-in-JS is a method where JavaScript is used to style components. The first libraries which implemented this technique were <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://styled-components.com/\\">Styled-Components</a>, <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://emotion.sh/\\">Emotion</a> &amp; <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://cssinjs.org/\\">JSS</a>.</p>\\n<h3>Example:</h3>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-keyword\\">const</span> <span class=\\"hljs-title class_\\">Button</span> = styled.<span class=\\"hljs-property\\">button</span><span class=\\"hljs-string\\">`\\n  display: inline-block;\\n  padding: 0.5rem 0;\\n  background: transparent;\\n  color: white;\\n  border: 2px solid white;\\n\\n  <span class=\\"hljs-subst\\">${(props) =&gt;\\n    props.primary &amp;&amp;\\n    css`<span class=\\"language-css\\">\\n      <span class=\\"hljs-attribute\\">background</span>: white;\\n      <span class=\\"hljs-attribute\\">color</span>: black;\\n    `</span>}</span>\\n`</span>;\\n\\n<span class=\\"hljs-keyword\\">return</span> <span class=\\"language-xml\\"><span class=\\"hljs-tag\\">&lt;<span class=\\"hljs-name\\">Button</span> <span class=\\"hljs-attr\\">primary</span>&gt;</span>Click me<span class=\\"hljs-tag\\">&lt;/<span class=\\"hljs-name\\">Button</span>&gt;</span></span>;\\n</code></pre><p>Advantages of CSS-in-JS</p>\\n<ul>\\n<li>Local scoping instead of global namespace</li>\\n<li>No classname to element mapping</li>\\n<li>Use the full power of JavaScript to enhance CSS (loops, variables &amp; more)</li>\\n<li>Dynamic styling &amp; theming (access to state or props)</li>\\n<li>TypeScript support</li>\\n</ul>\\n<p>Disadvantages of CSS-in-JS</p>\\n<ul>\\n<li>Runtime cost when using dynamic styling</li>\\n<li>Slightly different syntax than traditional CSS (object syntax vs template literals)</li>\\n<li>Can add an extra layer of complexity</li>\\n</ul>\\n<p>In the meantime CSS-in-JS has evolved even more. There are some libraries which leverages nearly zero-runtime costs such as <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://stitches.dev/\\">Stitches</a> or <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://vanilla-extract.style/\\">Vanilla Extract</a> while still providing an excellent developer experience with TypeScript.</p>\\n<p>We at AOE think that CSS-in-JS is the future of writing good, performant and maintainable CSS, therefore we already use different CSS-in-JS solutions throughout multiple applications.</p>\\n"}],"position":[446,280]},{"id":"cypress","release":"2021-07-01","title":"Cypress","ring":"adopt","quadrant":"tools","body":"<p>Cypress has proven itself in AOE projects.\\nWith its support for JavaScript and TypeScript, Cypress is a testing tool that strongly relates to front-end developers.\\nIt is very easy to adopt, and the test specifications are easy to implement and to maintain.\\nTest execution is very fast, and the results are well documented, understandable and easy to publish, e.g. via GitLab Pages.\\nIt currently supports Chrome, Firefox and Electron.</p>\\n","featured":true,"flag":"default","tags":["frontend","quality assurance"],"revisions":[{"release":"2019-11-01","ring":"assess","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.cypress.io/\\">Cypress</a> is a front-end testing tool (E2E). It comes as a simple node package and is therefore easy to use and maintain for front-end developers and testers. Cypress has a different approach than Selenium. It runs in the browser and in the same loop as the device under test.</p>\\n<p>Good:</p>\\n<ul>\\n<li><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/cypress-io/cypress\\">Open source</a></li>\\n<li><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://docs.cypress.io/guides/getting-started/installing-cypress.html#System-requirements\\">Locally installed</a></li>\\n<li>Straightforward (installed via npm and all tests are written in Javascript)</li>\\n<li>Good <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://docs.cypress.io/guides/overview/why-cypress.html#In-a-nutshell\\">documentation</a> and learning material</li>\\n<li>Can run in a <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://docs.cypress.io/guides/guides/command-line.html#cypress-run\\">headless mode</a></li>\\n</ul>\\n<p>Not so good:</p>\\n<ul>\\n<li>No cross browser testing (only Chrome and Electron)</li>\\n<li>Scenarios with multiple browser tabs can not be tested</li>\\n<li>Relatively new test tool, though it is becoming more popular</li>\\n</ul>\\n<p>Example of a test :</p>\\n<pre><code class=\\"hljs language-js\\"><span class=\\"hljs-title function_\\">describe</span>(<span class=\\"hljs-string\\">&#x27;My First Test&#x27;</span>, <span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) {\\n  <span class=\\"hljs-title function_\\">it</span>(<span class=\\"hljs-string\\">&#x27;Visits the Kitchen Sink&#x27;</span>, <span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>) {\\n    cy.<span class=\\"hljs-title function_\\">visit</span>(<span class=\\"hljs-string\\">&#x27;https://example.cypress.io&#x27;</span>)\\n\\n    cy.<span class=\\"hljs-title function_\\">contains</span>(<span class=\\"hljs-string\\">&#x27;type&#x27;</span>).<span class=\\"hljs-title function_\\">click</span>()\\n\\n    cy.<span class=\\"hljs-title function_\\">url</span>().<span class=\\"hljs-title function_\\">should</span>(<span class=\\"hljs-string\\">&#x27;include&#x27;</span>, <span class=\\"hljs-string\\">&#x27;/commands/actions&#x27;</span>)\\n\\n    cy.<span class=\\"hljs-title function_\\">get</span>(<span class=\\"hljs-string\\">&#x27;.action-email&#x27;</span>)\\n      .<span class=\\"hljs-title function_\\">type</span>(<span class=\\"hljs-string\\">&#x27;fake@email.com&#x27;</span>)\\n      .<span class=\\"hljs-title function_\\">should</span>(<span class=\\"hljs-string\\">&#x27;have.value&#x27;</span>, <span class=\\"hljs-string\\">&#x27;fake@email.com&#x27;</span>)\\n  })\\n})\\n</code></pre>"}],"position":[482,439]},{"id":"dagger","release":"2019-11-01","title":"Dagger","ring":"adopt","quadrant":"tools","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://google.github.io/dagger/\\">Dagger</a> is a fully static, compile-time <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://en.wikipedia.org/wiki/Dependency_injection\\">dependency injection</a> framework for both Java and Android. <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://google.github.io/dagger/\\">Dagger</a> doesn&#39;t use reflections at runtime, it saves resources.\\nFor us, it is a perfect match for Android development.</p>\\n<p>We at AOE use it as a base framework for every Android project.</p>\\n","featured":false,"flag":"default","position":[563,444]},{"id":"ddev","release":"2023-02-23","title":"DDEV","ring":"adopt","quadrant":"tools","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.ddev.com/ddev-local/\\">DDEV</a> is an open source tool that makes it dead simple to get local PHP development environments up and running within minutes.\\nIt&#39;s powerful and flexible as a result of its per-project environment configurations, which can be extended, version controlled, and shared.\\nIn short, DDEV aims to allow development teams to use Docker in their workflow without the complexities of bespoke configuration.</p>\\n<p>At AOE, we use DDEV in a variety of PHP projects (large and small).\\nIt has made the onboarding process extremely easy for new developers and developers who have already worked with DDEV feel right at home in other projects.</p>\\n<p>DDEV makes adding needed dependencies super easy and so far has met every requirement we&#39;ve ever had.\\nThis is mainly because DDEV is just a wrapper for existing tools like Docker-Compose. However, it does take away a lot of the complexity that is normally involved in configuring these tools.</p>\\n","featured":false,"flag":"default","tags":["coding","ci/cd"],"position":[441,435]},{"id":"decoupling-infrastructure-via-messaging","release":"2019-11-01","title":"Decoupling Infrastructure via Messaging","ring":"trial","quadrant":"methods-and-patterns","body":"<p>In <a href=\\"/digital_xp_techradar/methods-and-patterns/microservices/\\">Microservices</a> we have already covered the trend that modern architectures are moving away more and more from big monolithic applications to distributed software suites.\\nThe result of splitting our software and infrastructure in smaller parts, is the need to communicate with each other.\\nThis can be done by direct communication or by message-based asynchronouous communication.\\nWhile synchronuous communication allows for more plannable &quot;real-time&quot; response times of the overall systems, asynchronouos communication increases the resilience and stability of the system significantly and allows one to use other integration and scaling patterns. However, it often comes with additional complexity.</p>\\n<p>Most of the IaaS Cloud providers offer messaging services such as AWS SQS which provide the possibility to decouple our infrastructure via Messaging.\\nAlso, we use <a href=\\"/digital_xp_techradar/tools/rabbitmq/\\">RabbitMQ</a> as a Messaging and Broker solution within our applications.\\nThe decision of using messaging and messaging patterns as an integration strategy can be made as part of <a href=\\"/digital_xp_techradar/methods-and-patterns/strategic-domain-driven-design/\\">strategic design</a> considerations.</p>\\n","featured":false,"flag":"default","position":[573,205]},{"id":"deno","release":"2023-11-01","title":"Deno","ring":"assess","quadrant":"languages-and-frameworks","body":"<pre><code class=\\"hljs language-ts\\">&gt; <span class=\\"hljs-string\\">&#x27;node&#x27;</span>.<span class=\\"hljs-title function_\\">split</span>(<span class=\\"hljs-string\\">&#x27;&#x27;</span>).<span class=\\"hljs-title function_\\">sort</span>().<span class=\\"hljs-title function_\\">join</span>(<span class=\\"hljs-string\\">&#x27;&#x27;</span>)\\n&gt; <span class=\\"hljs-string\\">&#x27;deno&#x27;</span>\\n</code></pre><p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://deno.com/runtime\\">Deno</a> is a secure, modern JavaScript and TypeScript runtime built on the V8 JavaScript engine. It was developed as a more secure and developer-friendly alternative to Node.js by Ryan Dahl, the core author of Node.js.</p>\\n<p>Deno prioritizes security by default, enforcing strict permissions for file system access, network access, and environment variable usage. It also offers improved performance, thanks to its utilization of the latest JavaScript features and optimizations. Deno supports TypeScript out of the box, allowing developers to take advantage of static type checking and other TypeScript features. It incorporates a built-in module system, reducing dependency conflicts and simplifying module management.</p>\\n<p>With its streamlined developer experience, which includes a standard library and support for modern language features, Deno offers a compelling option for JavaScript and TypeScript developers.</p>\\n","featured":true,"flag":"new","tags":["coding"],"position":[297,113]},{"id":"dependency-update-scan","release":"2022-03-28","title":"Dependency Update Scan","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>Tools for automated dependency updates continue to offer a big productivity gain when integrated well into the build workflow.</p>\\n<p>Nonetheless, this comes not without a word of warning.\\nWhile it&#39;s great in theory, constant updates might quickly lead to a bombardment of merge requests.\\nIt is crucial that the chosen tools work reliably and are really well integrated. Otherwise, this might become overwhelming for teams.\\nAs an alternative, we also had good experience with disabling automatic merge requests and just manually triggering a job when we wanted to take care of the updates.</p>\\n","featured":true,"flag":"default","tags":["security","ci/cd"],"revisions":[{"release":"2021-07-01","ring":"trial","body":"<p>Tools for automated dependency updates continue to offer a big productivity gain when integrated well into the build workflow.</p>\\n<p>Nonetheless, this comes not without a word of warning.\\nWhile it&#39;s great in theory, constant updates might quickly lead to a bombardment of merge requests.\\nIt is crucial that the chosen tools work reliably and are really well integrated. Otherwise, this might become overwhelming for teams.\\nAs an alternative, we also had good experience with disabled automatic merge requests and just manually triggered a job when we wanted to take care of the updates.</p>\\n"},{"release":"2019-11-01","ring":"assess","body":"<p>Automated dependency scans are useful to remove the manual task of regularly checking for version updates.\\nOur teams are utilizing the Open Source bots <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/renovatebot/renovate\\">Renovate</a> and <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/fthomas/scala-steward\\">Scala Steward</a>, both of which are running as a scheduled GitLab job in our internal infrastructure.\\nThe bots are regularly creating merge requests with dependency version updates against our projects.</p>\\n<p>Having this automated comes with a few advantages:</p>\\n<ul>\\n<li>Important dependency updates are available very shortly after they have been published (e.g. for security issues)</li>\\n<li>Changelogs are referenced in the merge requests, making it easy to review if the update is relevant</li>\\n<li>An automatically triggered pipeline is running our test suites, giving us a high confidence that the version update is non-breaking if the pipeline was successful</li>\\n<li>Regular small updates are easier to maintain than bulk updates of many libraries at once, reducing the risk of introducing compatibility breaking changes</li>\\n</ul>\\n<p>Automated merge requests allow us to focus on reviewing, testing and prioritization of dependency version updates with considerably less effort.</p>\\n"}],"position":[461,371]},{"id":"design-system","release":"2023-11-01","title":"Design System","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>Through the implementation of design systems, we have demonstrated that this approach aligns with many of the mentioned benefits and recommend its use in future projects.</p>\\n","featured":true,"flag":"changed","tags":["ux/ui","frontend","coding","architecture","documentation"],"revisions":[{"release":"2023-02-23","ring":"trial","body":"<p>A Design System is a collection of reusable design components, guidelines and standards that serve as the foundation for\\ncreating a consistent user experience across a product or a whole brand.</p>\\n<p>It helps to create a unified visual language, improve collaboration among design and development teams, and streamline\\nthe design and development process.</p>\\n<p>Design Systems also increase the maintainability of the design of products, making it easier for teams to make updates\\nand add new features over time.</p>\\n<p>We are in the process to implement a design system in close cooperation with one of our customers.</p>\\n<p>Tools we use for this are <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://zeroheight.com/\\">zeroheight</a> as a documentation hub,\\n<a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://amzn.github.io/style-dictionary\\">Style Dictionary</a> for the token generation,\\n<a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://storybook.js.org/\\">Storybook</a> to document the components and <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.figma.com/\\">Figma</a> for the Designs.</p>\\n"}],"position":[524,325]},{"id":"devops-practices","release":"2023-11-01","title":"DevOps Practices","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>DevOps is a term that has been around for some years now.\\nWe understand DevOps as a philosophy and culture with related practices and tools - all with the aim of bringing (IT) Operations closer to Development.  </p>\\n<p>Jez Humble described the devops movement like this: &quot;a cross-functional community of practice dedicated to the study of building, evolving and operating rapidly changing, secure, resilient systems at scale&quot;.</p>\\n<p>With the size of software projects and the effects of agile development, the need to also deliver operation and infrastructure in an agile way increases more and more.</p>\\n<p>We have been using the following practices with success:</p>\\n<p><strong>Cross-functional Teams &quot;you build it, you run it&quot;</strong></p>\\n<p>In the past year, we have moved from a more centralistic or standalone IT and operations service team to cross-functional teams with Infrastructure experts working in and with the development team (admins joining the project team).</p>\\n<p>And, we changed to cross-functional teams and a &quot;you build it, you run it&quot; approach for the bigger projects.\\nWe have seen that this leads to the following positive effects:</p>\\n<ul>\\n<li>Software application architecture demands a certain infrastructure and the other way around. Having all the know-how in one team leads to more major decisions and implementations. Also, solving of root causes for problems works better.</li>\\n<li>Rotating operation and incident management inside the whole team brings everyone into closer contact with the day-to-day operation of their software. This results in a shared and improved responsibility and commitment to the complete platform in the team. In addition, this brings developers into contact with the customer - which is an important feedback loop as well.</li>\\n<li>Increased flexibility in the infrastructure: Implementations and adjustments in the infrastructure are faster and can be done together with the ongoing agile development of the platform.</li>\\n<li>Developers also explicitly think of operation issues when building the application - since they are responsible for operation. For example, logging concept, monitoring aspects and resilience patterns are now explicitly optimized continuously and improve faster.\\nImportant enabler of such an approach is the size and available budget for the project (not every project allows for having a continuous cross-functional teams that carries out ongoing development and operations). Also, this requires a certain amount of independence for the team.</li>\\n</ul>\\n<p>As always, we are establishing &quot;community of interests&quot; to improve and promote the knowledge transfer between different teams.</p>\\n<p><strong>Increase of relevant tools</strong></p>\\n<p>Another important aspect and also enabler of DevOps practices is the increase of certain tool and methods - some of them are also represented in the Tech Radar. For example: Puppet Environments; Docker; Cloud Services, Terraform, Consul etc.</p>\\n<p><strong>DevSetup = Prod Setup, <a href=\\"methods-and-patterns/infrastructure-as-code.html\\">Infrastructure as a Code</a></strong></p>\\n<p>Keeping the development infrastructure setup close to production is also a commonly implemented practice and a direct result of the &quot;Infrastructure as Code&quot; method.\\nHandling infrastructure and the required changes and innovations in ways similar to those used for applications is important; you can ready more about this here: Infrastructure as Code</p>\\n<p>We encourage all teams to adopt devops practices in the teams and to take care that there is a true collaboration between the different experts in a team and no invisible wall.</p>\\n","featured":false,"flag":"changed","tags":["devops"],"position":[459,312]},{"id":"dgs","release":"2023-02-23","title":"DGS Framework","ring":"assess","quadrant":"tools","body":"<p>DGS has proven to simplify the development of GraphQL server applications.\\nThus, we recommend a broader usage across AOE and decided to move the blip\\nto &quot;trial&quot;.</p>\\n","featured":false,"flag":"default","tags":["frontend","architecture"],"revisions":[{"release":"2022-03-28","ring":"trial","body":"<p>DGS has proven to simplify the development of GraphQL server applications.\\nThus, we recommend a broader usage across AOE and decided to move the blip\\nto &quot;trial&quot;.</p>\\n"},{"release":"2021-07-01","ring":"assess","body":"<p>The <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://netflix.github.io/dgs/\\">DGS Framework</a> is a <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://graphql.org/\\">GraphQL</a> server framework based on <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://spring.io/projects/spring-boot/\\">Spring Boot</a>.\\nIt extends <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.graphql-java.com/\\">GraphQL Java</a> with additional features such as:</p>\\n<ul>\\n<li>an annotation-based programming model for Spring</li>\\n<li>a test framework for writing query tests as unit tests</li>\\n<li>a <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://gradle.org/\\">Gradle</a> code generation plugin to create types from a GraphQL schema</li>\\n</ul>\\n<p>It works well with both Java and Kotlin and allowed us a quick start with getting our first GraphQL servers up and running.</p>\\n"}],"position":[626,614]},{"id":"diagrams-as-code","release":"2023-11-01","title":"Diagrams as Code","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>Documenting concepts and software architecture as diagrams using code offers significant benefits over heavier solutions. Treating documentation and diagrams as code and checking them into version control increases transparency, collaboration, and productivity. The textual representation of diagrams is easy to write and read, and generating graphical representations as SVG or PNG images is also straightforward with the associated tools.</p>\\n<p>We extensively use <a href=\\"/digital_xp_techradar/tools/plant-uml/\\">PlantUML</a> in combination with <a href=\\"/digital_xp_techradar/tools/asciidoc/\\">Asciidoc</a> and tools like <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://asciidoctor.org/docs/asciidoctor-diagram/\\">AsciiDoctor Diagram</a> to include and inline PlantUML diagrams in our documentation. The latter allows for a variety of other diagram formats, which can be easily mixed and matched.</p>\\n<p>Other tools worth mentioning include:</p>\\n<ul>\\n<li><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://mermaid.js.org/\\">Mermaid</a>, a JavaScript-based diagramming tool natively supported by many common tools (e.g., GitHub, GitLab, Gitea, Notion, etc.).</li>\\n<li><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://d2lang.com/\\">D2</a>, a diagram scripting language that focuses on readability and provides a CLI and a Go library for programmatically creating diagrams.</li>\\n<li><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://structurizr.com/\\">Structurizr</a>, which brings its own DSL for creating software architecture models based on the <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://c4model.com/\\">C4 model</a> and a CLI for exporting to formats like PlantUML, Mermaid, D2, and others.</li>\\n</ul>\\n","featured":true,"flag":"changed","tags":["architecture","quality assurance","documentation"],"revisions":[{"release":"2021-07-01","ring":"adopt","body":"<p>Documenting concepts and software architecture as diagrams using code offers great benefit over heavier solutions.\\nHaving documentation and diagrams treated as code and checked-in into version control increases transparency, collaboration as well as productivity.\\nThe textual representation of diagrams is easy to write and read. Generation of graphical representations as SVG or PNG images is also easy with the associated tools.</p>\\n<p>We make heavy use of <a href=\\"/digital_xp_techradar/tools/plant-uml/\\">PlantUML</a> combined with <a href=\\"/digital_xp_techradar/tools/asciidoc/\\">Asciidoc</a> and tools like <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://asciidoctor.org/docs/asciidoctor-diagram/\\">AsciiDoctor Diagram</a> to include and inline PlantUML diagrams into documentations.\\nThe latter allows a variety of other diagram formats which can be easily mixed and matched.</p>\\n"}],"position":[528,363]},{"id":"dora-metrics","release":"2023-11-01","title":"DORA Metrics for DevOps","ring":"trial","quadrant":"methods-and-patterns","body":"<p>A primary goal of software development organizations is to enhance the performance of software delivery and operations.</p>\\n<p>There are numerous best practices and differing opinions on how to approach &quot;DevOps the right way.&quot; We&#39;ve learned that IT organizations and software delivery are complex issues, which means that most of the time there are no &quot;easy&quot; answers. Instead, continuous improvement within a contextual framework is a critical element.</p>\\n<p>To introduce more objectivity and a measure of verifiability, we like to use the four key metrics suggested by &quot;The State of DevOps&quot; and &quot;DORA.&quot; These four key metrics are:</p>\\n<p><strong>To evaluate velocity:</strong></p>\\n<ul>\\n<li>Deployment Frequency (How often a team successfully deploys to production, e.g., daily, weekly, monthly, yearly)</li>\\n<li>Lead time for changes (the average time it takes to deploy a commit to production)</li>\\n</ul>\\n<p><strong>To evaluate stability:</strong></p>\\n<ul>\\n<li>Time to Restore Services (For a failure, the median time between the deployment that caused the failure and the remediation)</li>\\n<li>Change Failure Rate (The number of failures per number of deployments)</li>\\n</ul>\\n<h3>About DORA</h3>\\n<p>The DevOps Research and Assessment (DORA) is the largest and longest-running research program of its kind, aiming to understand the capabilities driving software delivery and operations performance. Their report, &quot;The State of DevOps,&quot; regularly provides insights, observations, and insights into high-performing IT organizations.</p>\\n<h3>Additional Information</h3>\\n<ul>\\n<li><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://dora.dev/\\">DORA Website</a></li>\\n<li><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://medium.com/@jezhumble/doras-journey-an-exploration-4c6bfc41e667\\">DORA&#39;s Journey: An Exploration</a></li>\\n<li><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/dora-team/fourkeys\\">DORA GitHub Repository</a></li>\\n</ul>\\n","featured":true,"flag":"new","tags":["devops","documentation","agile"],"position":[508,200]},{"id":"drupal","release":"2022-03-28","title":"Drupal","ring":"trial","quadrant":"tools","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.drupal.org/\\">Drupal</a> is an open source content management system and framework based on a PHP stack.\\nIt has a huge community, so it&#39;s no wonder it&#39;s among the top 10 CMS worldwide in terms of market share.</p>\\n<p>At AOE we consume Drupal mainly headless via JSON API. We appreciate its large feature set and mature plugin system as well as the general ecosystem.</p>\\n<p>In addition, the extensive documentation and setup with <a href=\\"/digital_xp_techradar/tools/ddev/\\">DDEV</a> make it easy to get started.</p>\\n","featured":false,"flag":"default","position":[496,606]},{"id":"event-storming","release":"2019-11-01","title":"Event Storming","ring":"assess","quadrant":"methods-and-patterns","body":"<p>Event Storming is a method of modeling business processes using domain events.</p>\\n<p>With complex business processes, people usually know their part of the process very well.\\nHaving people from different departments in one room, allows (and requires!) a conversation.\\nKnowledge silos get opened up. All learnings can be directly visualized.</p>\\n<p>We tried this method a couple of times with different sized scopes. We believe it can be of value and has potential.</p>\\n<h2>Method Overview</h2>\\n<p>It&#39;s like brainstorming - with the goal to visualize a business line or process.</p>\\n<p>Event Storming is done in a workshop format.</p>\\n<p>To get a business process modeled quickly and complete, it&#39;s important to get domain experts, developers, UX and everybody else who is involved to some extent in the related business line into one room.\\nWith virtually unlimited space for modeling using big paper rolls put onto the walls, equipped with colored stickies and markers, the modeling workshop can start.</p>\\n<p>During the workshop, the goal is to model the big picture, without limiting or focusing just on parts of a process.</p>\\n","featured":true,"flag":"default","tags":["architecture"],"position":[703,313]},{"id":"evil-user-stories","release":"2022-03-28","title":"Evil User Stories","ring":"assess","quadrant":"methods-and-patterns","body":"<p>With Evil User Stories, we aim to raise the project teams&#39; (PO, Dev-Team, QA) and clients&#39; awareness for security topics and introduce a security-by-design principle.</p>\\n<p>The first step is to identify business use cases of potential vulnerabilities in our software product. The next step is to write an Evil User Story for this use case, from the perspective of an evil persona, e.g. &quot;John Badboy who wants to hack our software&quot;. The idea behind this is to take a look at specific parts (business logic) of the software from a perspective that would otherwise not be considered when working on standard user stories.</p>\\n<p>So how would this work? To illustrate this, let&#39;s consider the following user story: &quot;As Emma Shopping I am be able to pay for a product in my checkout using a credit card&quot;. To get that story done, we might have to persist some payment data somewhere. But within the context of an Evil user story we now also need to consider the security for the credit card and payment handling in our application. So, for that reason, we write an Evil User Story, which in this case could, for example, be &quot;As John Badboy, I want to steal payment data&quot; or more specifically &quot;As John Badboy, I want to do to sql inject to get the payment token&quot;.</p>\\n<p>Before implementation of this particular user story starts, developers should think about how they can secure potentially vulnerable parts of the software to prevent attacks such as sql injections. In this case, one approach should be the use of prepared statements for sql queries. When the development is finished, we should then be able to test the story using an automated testing approach with a penetration testing tool such as <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://sqlmap.org/\\">sqlmap</a> to confirm that our database queries are not vulnerable to sql injections.</p>\\n<p>Additionally, both solutions should be checked during the development process using code reviews to identify and correct potentially buggy code.</p>\\n","featured":false,"flag":"default","position":[666,240]},{"id":"explicit-test-strategy","release":"2019-11-01","title":"Explicit test strategy","ring":"assess","quadrant":"methods-and-patterns","body":"<p>According to the <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://glossary.istqb.org/\\">ISTQB Glossar</a>- a <strong>Test Strategy</strong> is an abstract specification that comprises the designated test levels (unit, integration, system and acceptance tests) and the implementation of each level for a whole organization or for an application. This test strategy can be applicable to one or more projects.</p>\\n<p>At AOE, we established an explicit test strategy for many of our projects. The coordination of the test levels improves the effectivity of test runs and helps to avoid testing gaps, double inspection and overhead. Every test level has a different focus. Tests that are executed on one level don&#39;t have to be implemented on others.</p>\\n<p>These are the test levels that we implement as a standard in the software deployment pipeline of our projects and that handle multiple integrated components and services:</p>\\n<ul>\\n<li><strong>Unit Test:</strong> The unit level tests verify the functionality of a specific section of code, usually at the function level. We use static as well as dynamic test methods such as code reviews, style or complexity checks and white-box testing. </li>\\n<li><strong>Module Tests:</strong> Module Tests focus on testing the functionality that a service or component provides in isolation to other components or services that this service depends on. This test stage finds errors in a component. It should never fail due to a consumed service that is not reachable or has been altered. Therefore, all dependencies of these components are mocked or stubbed on some level. Tests are most commonly conducted through interfaces using black-box testing.</li>\\n<li><strong>Integration Tests:</strong> On the integration level, individual software modules are combined and tested as a group. The integration testing verifies functional, performance and reliability requirements. These tests are also most commonly conducted through interfaces using black-box testing. In case there is a great number of (external) subsystems, we mock these systems outside of the defined context and use contract-based testing to verify the interfaces. All contract-based tests that focus on testing the interface contracts between services are also executed on this test level.</li>\\n<li><strong>System Level Tests:</strong> On the system level, tests are performed on a complete, integrated system, where they evaluate the system&#39;s compliance with its specified requirements. System tests not only verify the design, but they also check the system&#39;s behavior in general and even the assumed expectations of the customer. They are intended to test up to and beyond the bounds defined by the explicit system requirements.</li>\\n<li><strong>Client Acceptance Tests:</strong> The client acceptance level includes all testing done by the customer and is the last one in the succession of the five test levels. The objective is to evaluate the system&#39;s compliance with the business requirements and to assess whether it is acceptable for delivery.</li>\\n</ul>\\n<p>As a rule, we automate the execution of tests where it is feasible and sensible. Related to the test strategy are the test concept, test data management and the usage of a test case management tool that allows one to assess and categorize functional test cases.</p>\\n<p>Due to the practical usefulness of having a sound test strategy for a project, we classify the explicit test strategy for projects with assess.</p>\\n","featured":false,"flag":"default","position":[617,179]},{"id":"falco","release":"2019-11-01","title":"Falco","ring":"assess","quadrant":"tools","body":"<p>Falco is an open source project for intrusion and abnormality detection for Cloud Native platforms such as Kubernetes. \\nIt detects abnormal application behavior and sends alerts via Slack, Fluentd, NATS, and more.</p>\\n<p>We are assessing Falco to add another angle to host based intrusion detection and alerting.</p>\\n","featured":true,"flag":"default","tags":["security"],"position":[712,481]},{"id":"figma","release":"2021-07-01","title":"Figma","ring":"adopt","quadrant":"tools","body":"<p>Figma became our go-to tool for the next generation collaborative design. It allowed UX/UI designers, engineers, stakeholders,  product managers, and other roles to view, inspect and comment on designs and wireframes, create high- and low-fidelity prototypes, and much more. </p>\\n<p>Figma puts together all of the features we used in different tools (Axure, Miro, Abstract, Sketch, Anima, Invision) in one. It allowed us to make a single source of truth for our products, create design systems, and eliminate the vast majority of the pain points we faced in the past. It became beneficial, especially in remote and distributed design work, and speed up all our design-related processes. In addition to its real-time design and collaboration capabilities, Figma also offers an extensive, community-backed plugin collection and a robust API that helps to improve the DesignOps processes.</p>\\n","featured":true,"flag":"default","tags":["frontend","ux/ui","agile"],"position":[509,485]},{"id":"flamingo","release":"2019-11-01","title":"Flamingo","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p>Flamingo is a high productivity go based framework for rapidly building fast and pluggable web projects.\\nIt is used to build scalable and maintainable (web)applications.</p>\\n<p>Flamingo is:</p>\\n<ul>\\n<li>open source</li>\\n<li>written in go</li>\\n<li>easy to learn</li>\\n<li>fast and flexible</li>\\n</ul>\\n<p>Go as simple, powerful and typesafe language is great to implement and scale serverside logic.\\nFlamingo has a clean architecture with clear dependencies in mind and offers a typical features and support for nowadays web applications:</p>\\n<ul>\\n<li>Powerful Templating Engines, e.g. support for Pug templates with reusable mixins and lightweight scripting.</li>\\n<li>Configuration concepts using yml and support for multiple areas and contexts</li>\\n<li>Powerful Dependency Injection</li>\\n<li>A Module concept for building modular and pluggable applications</li>\\n<li>Authentication concepts and security middleware</li>\\n<li>Flexible routing with support for prefix routes and reverse routing</li>\\n<li>Web Controller Support with: Request / Response / Form Handling etc</li>\\n<li>Operational Readiness: Logging, (distributed) Tracing, Metrics and Healthchecks with separate endpoint</li>\\n<li>Localisation</li>\\n<li>Commands</li>\\n<li>Session Handling and Management</li>\\n<li>GraphQL support and therefore support to build nice SPA and PWAs on top of it</li>\\n<li>Resilience and Caching for external APIs calls.</li>\\n</ul>\\n<p>Flamingo itself does not contain ORM Mapper or libraries - instead it emphasizes <a href=\\"/digital_xp_techradar/methods-and-patterns/ports-and-adapters/\\">&quot;ports and adapters&quot;</a> architecture - so that you have a technology free (domain) model and any possible (and replaceable) persistence behind it.\\nThat makes Flamingo useful to build microservices and applications - especially to build &quot;frontends&quot; or portals that require interaction with other (micro) services in a distributed architecture. \\nWhen sticking to the architectural recommendation, you can build modular applications with replaceable adapters that gives you independent testability.</p>\\n<p>With <strong>&quot;Flamingo Commerce&quot;</strong> there is an additional active projects that offer rich and flexible features to build modern e-commerce applications.</p>\\n","featured":true,"flag":"default","tags":["coding"],"position":[358,289]},{"id":"flow","release":"2018-03-01","title":"Flow","ring":"hold","quadrant":"languages-and-frameworks","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://flow.neos.io/\\">Flow</a> is a PHP web application framework developed for the <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.neos.io/\\">Neos</a> project.</p>\\n<p>We used Flow in a couple of projects and decided to put it on hold for the following reasons:</p>\\n<ul>\\n<li>slow during development and hard to debug because of its need to &quot;compile&quot; the application to integrate e.g. AOP</li>\\n<li>limited documentation and community</li>\\n<li>development of the framework is closely coupled to the progress of the Neos project</li>\\n</ul>\\n<p>Although it could be that some of the above-mentioned aspects have improved in the past, we decided to use other PHP frameworks such as <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://symfony.com/\\">Symfony</a> or other Languages (See <a href=\\"/digital_xp_techradar/languages-and-frameworks/go-lang/\\">Go</a>; <a href=\\"/digital_xp_techradar/languages-and-frameworks/play-framework/\\">Play Framework</a>; <a href=\\"/digital_xp_techradar/languages-and-frameworks/spring-boot/\\">Spring Boot</a>)</p>\\n","featured":false,"flag":"default","position":[65,258]},{"id":"flowtype","release":"2021-07-01","title":"Flow","ring":"hold","quadrant":"tools","body":"<p>With a much larger community, better support from frameworks (React, Angular, Vue) and IDEs and a similar feature set, Typescript is the better choice instead of Flow.</p>\\n","featured":false,"flag":"default","revisions":[{"release":"2019-11-01","ring":"assess","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://flow.org/\\">Flow</a> is a static type checker for JavaScript code. Its goal is to make code faster, smarter, \\nmore confidently, and to a bigger scale.</p>\\n"}],"position":[633,683]},{"id":"fluentd","release":"2023-11-01","title":"Fluentd","ring":"hold","quadrant":"tools","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.fluentd.org\\">Fluentd</a> remains a great tool for collecting logs, transforming them into any required format, and distributing them to various logging backends. However, in recent years, we have often transitioned to <a href=\\"/digital_xp_techradar/platforms-and-operations/loki/\\">Grafana Loki and Promtail</a> for several reasons.</p>\\n<p>We&#39;ve also learned that extensive upfront log parsing carries a risk of losing logs and requires significant effort. This doesn&#39;t fit well with most projects.</p>\\n","featured":true,"flag":"changed","tags":["devops"],"revisions":[{"release":"2021-07-01","ring":"assess","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.fluentd.org\\">Fluentd</a> is a great tool to gather logs, transform them into any required format and distribute them to any logging backend.</p>\\n<p>At AOE we use fluentd in different contexts, but mostly to gather logs from kubernetes clusters into data backends like Elasticsearch.</p>\\n"}],"position":[696,626]},{"id":"flutter","release":"2023-02-23","title":"Flutter","ring":"trial","quadrant":"languages-and-frameworks","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://flutter.dev/\\">Flutter</a> is an open-source SDK developed by Google that allows you to write native applications\\nfor different platforms with a single code base in <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://dart.dev/\\">Dart</a>.</p>\\n<p>Flutter provides stable platform implementations for both major mobile platforms iOS and Android. Besides the mobile\\nplatforms, it also supports stable builds for Web with multiple rendering engines (DOM and canvas-render). Flutter also\\nsupport builds for all Desktop environments, including Mac, Windows and Linux.</p>\\n<p>The compilation into native platform code prevents from bottleneck-issues due context switching and runtime bridging,\\nwhich can be found in other cross-platform frameworks like React Native.</p>\\n<p>Flutter is using a reactive programming model, where widgets rebuild when their state changes. Based on a declarative\\napproach like SwiftUI it is really easy to build UI components (widgets). Meanwhile, Flutter has a big community with a\\nlot of support and pre-build widgets.</p>\\n<p>Flutter has made significant improvements and is becoming more and more popular in recent years. Big companies,\\nincluding Alibaba, Tencent and BMW adopted Flutter to develop their apps. This is also shown in\\na <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://stackoverflow.blog/2022/02/21/why-flutter-is-the-most-popular-cross-platform-mobile-sdk/\\">blog post by Stackoverflow</a>\\nwhere  it shows the increase in popularity in comparison to React Native</p>\\n<p>Based on these facts, we decided to get a deeper look on Flutter. We were able to prove that Flutter is more performant\\nthan, React Native by building an identical Prototype application with both Frameworks.</p>\\n<p>In addition to the Framework itself, Flutter does a lot to improve the developer experience (DX) due to its hot reload\\nand various debugging tools which are very handy and missing in other Frameworks like React Native. There are also a lot\\nof plugins for WebStorm and Visual Studio Code which also improves the DX a lot.</p>\\n","featured":true,"flag":"default","tags":["coding","frontend","ux/ui"],"revisions":[{"release":"2021-07-01","ring":"assess","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://flutter.io\\">Flutter</a> allows writing native applications for different platforms with a single code base in <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://dart.dev\\">Dart</a>.</p>\\n<p>It provides stable platform implementations for both major mobile platforms iOS and Android.\\nWith <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://flutter.dev/web\\">Flutter on the Web</a> it is possible to build single-page applications (SPA) out of the same code with full support for service workers.\\nThe <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://flutter.dev/desktop\\">Desktop</a> (Windows, Mac, Linux) platform is currently still in beta (as of mid 2021).</p>\\n<p>The compilation into native platform code prevents from bottleneck-issues due context switching and runtime bridging, which can be found in other cross-platform frameworks like <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://reactnative.dev\\">React Native</a>.</p>\\n<p>Comparing to a Javascript-based PWA, Flutter&#39;s approach promises a better performance and energy-efficiency.</p>\\n<p>We gathered first positive experience with small applications, which used the Alpha and Beta state of Flutter for Linux (x64) and Web by the time of development.</p>\\n"}],"position":[326,166]},{"id":"flux","release":"2023-11-01","title":"Flux","ring":"hold","quadrant":"methods-and-patterns","body":"<p>In the early days of <a href=\\"/digital_xp_techradar/languages-and-frameworks/react/\\">React</a>, <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/facebookarchive/flux\\">Flux</a> was introduced by Facebook as an architectural pattern for managing global state. Later, it evolved into a library, with contributions from the community.</p>\\n<p>Today, there are numerous libraries that offer the Flux pattern or similar approaches to state management. These include framework-agnostic solutions like <a href=\\"/digital_xp_techradar/languages-and-frameworks/redux/\\">Redux</a> or <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://mobx.js.org/README.html\\">MobX</a>, as well as framework-specific options like <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://pinia.vuejs.org/\\">Pinia</a> for Vue and <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://docs.pmnd.rs/zustand\\">Zustand</a> for React, among many others.</p>\\n<p>One of the most popular solutions to date is Redux, which is why we use it in several projects.</p>\\n","featured":false,"flag":"changed","tags":["frontend"],"revisions":[{"release":"2019-11-01","ring":"assess","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://facebook.github.io/flux/\\">Flux</a> is an application architecture for building client-side web applications,\\nwhich is based on React&#39;s composable view components.</p>\\n"}],"position":[746,265]},{"id":"galen","release":"2019-11-01","title":"Galen","ring":"assess","quadrant":"tools","body":"<p>With <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://galenframework.com/\\">Galen Framework</a>, layout testing can be automated to save you a lot of manual work. With its own specification language (Galen Spec), you can write tests to verify the correct look of the web page as well as the location and alignment of specific elements on a page.</p>\\n<p>So, you can write simple tests such as &quot;The button should be green&quot; as well as more complex behavior specifications such as &quot;On mobile devices the button should be inside the viewport&quot;. Especially when testing a responsive website on multiple devices, browsers and resolutions, the manual testing effort gets expensive. To help with that, Galen runs its specifications fully automated with Selenium against the required browsers and devices.</p>\\n<p>Whenever a test fails Galen writes a test report with screenshots to show the mismatching areas on the page to help testers and developers become aware of the problem.</p>\\n<p>At AOE, the Galen Framework helps us to continuously test the UI for potential regression bugs introduced by new features.</p>\\n","featured":false,"flag":"default","position":[500,707]},{"id":"gatling","release":"2021-07-01","title":"Gatling","ring":"adopt","quadrant":"tools","body":"<p>Gatling is still a valid tool which is widely used in our teams.\\nOther alternatives like <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://locust.io/\\">Locust</a> exist and fill the same niche but Gatling is a better fit for our toolstack.</p>\\n","featured":false,"flag":"default","revisions":[{"release":"2018-03-01","ring":"adopt","body":"<p>Gatling is now the de-facto tool of choice for load testing in all of our projects, having superseded JMeter completely.\\nWe therefore moved it to the <strong>Adopt</strong> level.</p>\\n"},{"release":"2017-03-01","ring":"trial","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://gatling.io/\\">Gatling</a> is a highly capable load testing tool. It is designed for ease of use, maintainability and high performance.</p>\\n<p>Out of the box, Gatling comes with excellent support of the HTTP protocol that makes it a tool of choice for load testing any HTTP server. As the core engine is actually protocol agnostic, it is perfectly possible to implement support for other protocols. For example, Gatling currently also ships <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://gatling.io/docs/current/\\">JMS support</a>.</p>\\n<p>Gatling is built with <a href=\\"/digital_xp_techradar/languages-and-frameworks/scala-lang/\\">Scala Lang</a> and <a href=\\"/digital_xp_techradar/languages-and-frameworks/akka/\\">Akka</a>. By making good use of Scala&#39;s native language features (such as as the extensive type system), it makes writing tests feel natural and expressive, instead of writing load tests based on a DSL encoded in some special syntax.</p>\\n<p>This allows us to use all native Scala features to work with, with the focus on the ability to structure your tests as pure code, and actually unit test your load tests.</p>\\n<p>Besides the very good performance, we definitely like the pure code-based approach. Gatling creates HTML-based reports with nice graphs and metrics about how and what was tested.</p>\\n<p>We use Gatling as an alternative to Jmeter with success in some of our projects. We encourage teams to try Gatling for future load testing. There is an integrated test recorder similiar to what other test frameworks have to get you started with a basic test case.</p>\\n"}],"position":[509,528]},{"id":"gitflow","release":"2019-11-01","title":"GitFlow","ring":"hold","quadrant":"methods-and-patterns","body":"<p>Ever since there are recurring discussions about the version control strategy that a team should use.</p>\\n<p>We have also made the experience when new teams start off with using blocking or long-lived feature branches (merge late once all review comments are done) it has a negative impact on team performance.</p>\\n<p>We recommend to use trunk based development with short-lived (&lt;1day) feature branches, because this has shown to support continuous integration and team collaboration the best. However, we do accept teams choices to use GitFlow, we just do not try to encourage them in the first place.</p>\\n<p>See also:</p>\\n<ul>\\n<li>trunk based development <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://trunkbaseddevelopment.com/\\">https://trunkbaseddevelopment.com/</a></li>\\n<li><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://medium.com/@fagnerbrack/one-commit-one-change-3d10b10cebbf\\">https://medium.com/@fagnerbrack/one-commit-one-change-3d10b10cebbf</a></li>\\n<li><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://martinfowler.com/bliki/FeatureBranch.html\\">https://martinfowler.com/bliki/FeatureBranch.html</a></li>\\n<li><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.continuousdeliveryconsulting.com/blog/organisation-antipattern-build-feature-branching/\\">https://www.continuousdeliveryconsulting.com/blog/organisation-antipattern-build-feature-branching/</a></li>\\n</ul>\\n","featured":true,"flag":"default","tags":["devops","agile"],"position":[499,33]},{"id":"gitlab","release":"2023-11-01","title":"GitLab","ring":"adopt","quadrant":"tools","body":"<p>We merged GitLab and GitLab CI, because we use the whole tool as one, with all the integrations between the different sections. CI is just one of them.</p>\\n","featured":false,"flag":"changed","tags":["ci/cd","coding"],"revisions":[{"release":"2019-11-01","ring":"adopt","body":"<p>Moved to &quot;adopt&quot;: GitLab has proven to be a very useful tool for code and the collaboration around it.\\nWith <a href=\\"/digital_xp_techradar/tools/gitlab-ci/\\">GitLab CI</a> there is also a powerful tool to automate continuous integration and delivery.</p>\\n"},{"release":"2018-03-01","ring":"trial","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://about.gitlab.com/\\">GitLab</a> provides nearly the same feature set as <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/\\">GitHub</a>, but at a lower price. It also provides the possibility of hosting internally, which is essential for us.</p>\\n<p>We are migrating more and more repositories from <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://gitolite.com/gitolite/index.html\\">gitolite</a>, even from SVN to GitLab, as it provides a more stable and user-friendly interface.</p>\\n<p>GitLab also makes user/permission handling easier than our old gitolite. We don&#39;t need the IT team every time a new repository needs to be set up.</p>\\n"}],"position":[444,569]},{"id":"gitlab-ci","release":"2022-03-28","title":"GitLab CI","ring":"adopt","quadrant":"tools","body":"<p>We merged &quot;GitLab CI&quot; and <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.aoe.com/techradar/tools/gitlab.html\\">GitLab</a></p>\\n","featured":false,"flag":"default","revisions":[{"release":"2019-11-01","ring":"adopt","body":"<p>Moved to &quot;adopt&quot;.</p>\\n"},{"release":"2018-03-01","ring":"assess","body":"<p>Until now, we have been using <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://jenkins.io/\\">Jenkins</a> for almost every single task that we have automated. With <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://about.gitlab.com/features/gitlab-ci-cd/\\">GitLab CI</a> on the market, we have a number of new possibilities.</p>\\n<p>Some highlights are:</p>\\n<ul>\\n<li>Multi-platform – you can execute builds on Unix, Windows, OSX, and any other platform that supports Go.</li>\\n<li>Multi-language – build scripts are command-line driven and work with Java, PHP, Ruby, C and any other language.</li>\\n<li>Pipeline – you can define multiple jobs per stage and you can trigger other builds.</li>\\n<li>Autoscaling – you can automatically spin up and down VM&#39;s to make sure your builds get processed immediately and minimize costs.</li>\\n<li>Build artifacts – you can upload binaries and other build artifacts to GitLab and browse and download them.</li>\\n<li>Docker support – you can use custom Docker images, spin up services as part of testing, build new Docker images, even run on Kubernetes.</li>\\n</ul>\\n"}],"position":[494,550]},{"id":"go-lang","release":"2019-11-01","title":"Go / Golang","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p>We have moved Go to &quot;adopt&quot;.</p>\\n","featured":true,"flag":"default","tags":["coding"],"revisions":[{"release":"2018-03-01","ring":"trial","body":"<p>We have moved Go to Trial because multiple teams have used Go with success for different services and tools.\\nThe learning curve and productivity have proven to be immense and we are convinced that this language will find more adoption in other teams.</p>\\n"},{"release":"2017-03-01","ring":"assess","body":"<p>2016 was the year of Go, with a lot of Open Source projects gaining a lot of attention and many companies started to use it.</p>\\n<p>Go went from #54 to #13 on the <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://www.tiobe.com/tiobe-index/\\">TIOBE index</a> in January 2017, and it became the TIOBE programming language of the year 2016.</p>\\n<p>Here at AOE, we use several services written in Go on a daily basis, such as Mattermost, Docker, Consul and Kubernetes. Also, more and more applications, such as GitLab, incorporate Go-based services to &quot;off load&quot; heavy work.</p>\\n<p>Go, as a programming language, has some very interesting features such as native support for concurrency (go routines), static compiled binaries with a very small memory footprint, cross compiling and much more. A big advantage of Go is the very flat learning curve, which allows developers from more dynamic languages such as PHP to be proficient in a very short time.</p>\\n<p>If you want to get a feeling for Go, you should start with the <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://tour.golang.org/welcome/1\\">online tour</a>, within a day you&#39;ll have a good understanding of the core concepts, syntax, etc. - that is also because the language often tries to provide only one simple way of doing things; an example for this is that code formatting and styling is defined (yet not enforced as in Python). Part of this is also that Go itself is very opinionated: So, for example, for object oriented programming in Go, composition is the preferred way of defining data structures, and some might miss advanced concepts such as inheritance.</p>\\n<p>We currently use Go for projects and microservices where we need flexibility and performance.</p>\\n"}],"position":[268,282]},{"id":"graalnaative","release":"2021-07-01","title":"Graal Native Image","ring":"trial","quadrant":"tools","body":"<p>Native Image is a technology to ahead-of-time compile Java code to a standalone executable, called a native image.\\nIn the process of building a native image all library dependencies, including those from the JDK will be packed in the native image.\\nThe application created as a native image can be run without a JDK.\\nThe natively compiled applications require generally less memory and have shorter start up times.</p>\\n<p>We at AOE have already running microservices written in Scala with Graal Native Image.</p>\\n","featured":true,"flag":"default","tags":["coding"],"position":[535,620]},{"id":"gradle","release":"2023-11-01","title":"Gradle","ring":"adopt","quadrant":"tools","body":"<p>Gradle is a build automation tool originating in the Java space, providing declarative dependency management (like Maven) and support for custom functionality (like Ant). It has superb multi-project support and is extremely extensible via third-party plugins and also via self-written extensions and plugins that make it outstanding in its area.</p>\\n<p>It uses a Groovy-based DSL to declaratively model your problem domain (Build automation) and provides a rich object model with extension points to customize the build logic. Because it is extremely easy to extend this DSL, you can easily provide a declarative interface to your customizations and add-ons.</p>\\n<p>While providing plugins for building libs, apps and webapps in Java, Groovy and Scala out of the box it is not tied to the JVM as target platform, which is impressively shown by the native build support for C / C++.</p>\\n<p>At AOE, it is used in various places already: to build <a href=\\"/digital_xp_techradar/tools/anypoint-platform/\\">Anypoint</a>- and <a href=\\"/digital_xp_techradar/languages-and-frameworks/spring-boot/\\">Spring Boot-</a> based applications; to build Android Apps; to automate the creation of Jenkins Jobs; to create Docker images and Debian packages and also do some deployment scripting with it.</p>\\n","featured":false,"flag":"changed","tags":["ci/cd","coding"],"position":[479,475]},{"id":"graphql","release":"2023-02-23","title":"GraphQL","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>For <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://spring.io/projects/spring-boot/\\">Spring Boot</a> based backends <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://netflix.github.io/dgs/\\">DGS</a> provides\\na nice framework featuring:</p>\\n<ul>\\n<li>an annotation-based programming model for Spring</li>\\n<li>a test framework for writing query tests as unit tests</li>\\n<li>a <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://gradle.org/\\">Gradle</a> code generation plugin to create types from a GraphQL schema in Java or Kotlin</li>\\n</ul>\\n","featured":true,"flag":"default","tags":["architecture"],"revisions":[{"release":"2019-11-01","ring":"adopt","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://graphql.org/\\">GraphQL</a> is a query language for your API, and a server-side runtime for executing queries by\\nusing a type system you define for your data. It isn&#39;t tied to any specific database or storage engine and is instead\\nbacked by your existing code and data.</p>\\n<p>GraphQL was developed by Facebook around 2010 and released 2015.\\nThe main challenge it solves is to improve communication between browser and server on high dynamic web apps.</p>\\n<p>Key advantages are:</p>\\n<ul>\\n<li>schema and schema validation together with a useful type system</li>\\n<li>the client (browser) controls what data should be sent (data reduction)</li>\\n<li>with one request you can fetch &quot;all&quot; required data</li>\\n</ul>\\n<p>Client side integration can be achieved using the <a href=\\"/digital_xp_techradar/tools/apollo-client/\\">Apollo Client Framework</a> which easily\\nintegrates into <a href=\\"/digital_xp_techradar/languages-and-frameworks/react/\\">React.js</a> based frontends.</p>\\n<p>The Flamingo framework <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://docs.flamingo.me/3.%20Flamingo%20Modules/graphql.html\\">offers support for GraphQL</a>\\nwhile Flamingo Commerce provides a full-featured GraphQL API for e-commerce:\\n<a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://demoshop.flamingo.me/en/graphql-console\\">Example GraphQL Console for Commerce</a>.</p>\\n"}],"position":[476,239]},{"id":"green-it","release":"2023-11-01","title":"Green IT","ring":"assess","quadrant":"methods-and-patterns","body":"<p>In an age of ever-increasing digitalization, the energy consumption of data centers and the Internet continues to rise, raising concerns about the environmental impact of our digital activities. In response, the concept of &quot;Green IT&quot; has emerged, emphasizing the need for eco-friendly software development and operational practices. By highlighting key architectural patterns, development practices, and operational strategies for reducing the carbon footprint of IT applications, it challenges software vendors and developers to explore how they can contribute to greater sustainability.</p>\\n<h3>Sustainable Software Development Practices</h3>\\n<p>Well-architected software plays a pivotal role in reducing the environmental impact of digital systems. Sustainability in software development involves the consideration of various factors throughout the entire lifecycle:</p>\\n<ul>\\n<li><strong>Agile and Modular Development</strong>: Develop software iteratively, focusing on essential functionality and creating modular, reusable components.</li>\\n<li><strong>Programming Language Choice</strong>: Opt for compiled languages such as <a href=\\"/digital_xp_techradar/languages-and-frameworks/rust/\\">Rust</a> or <a href=\\"/digital_xp_techradar/languages-and-frameworks/go-lang/\\">Go</a> that have lower energy consumption during execution.</li>\\n<li><strong>Automation and Infrastructure-as-Code</strong>: Automate resource management and shut down unused infrastructure during idle periods to decrease energy consumption.</li>\\n<li><strong>Demand Shaping</strong>: Schedule energy-intensive workloads to align with the availability of renewable energy sources.</li>\\n<li><strong>Green Power</strong>: Source electricity from sustainable and renewable sources.</li>\\n<li><strong>Optimized Hardware and Software Lifespan</strong>: Extend the life of hardware and software through thoughtful design and maintenance.</li>\\n</ul>\\n<h3>Metrics and Measurement</h3>\\n<p>Software applications, especially those hosted in data centers, have a substantial environmental footprint as they require significant amounts of energy to operate. In addition, their development and use often necessitate the production of hardware devices such as servers, laptops, and smartphones.</p>\\n<p>Assessing the carbon emissions throughout an application&#39;s lifecycle enables developers and enterprises to make informed decisions that reduce emissions, lower costs, and ensure compliance with environmental regulations. Measuring energy consumption highlights areas where software can be optimized for improved efficiency. Environmental metrics support sustainability reporting, showcasing an organization&#39;s commitment to eco-friendly practices.</p>\\n<h3>Beware the Rebound Effect</h3>\\n<p>Efficiency improvements often lead to time and cost savings, which can paradoxically lead to more workload and less energy savings - a rebound effect. Finding a balance between efficiency gains and sustainable growth is critical to sustainable software development.</p>\\n<h3>Digitalization&#39;s Environmental Impact</h3>\\n<p>The environmental impact of digitalization is a nuanced interplay between its potential for energy consumption and its ability to promote sustainability.</p>\\n<p>Blockchain technology utilizing energy-intensive mining processes of proof-of-work consensus mechanisms demands immense computational power, resulting in substantial carbon emissions. Machine learning, a cornerstone of AI, requires vast amounts of data and computational resources.</p>\\n<p>However, digitalization also emerges as a champion of environmental stewardship in several areas: Demand-driven production optimizes inventory, reduces waste, and curtails unnecessary production, ultimately minimizing energy consumption and emissions. The digital product passport introduces traceability and transparency throughout a product&#39;s lifecycle, promoting sustainability and empowering consumers to make eco-conscious choices.</p>\\n<h3>A Greener Future for IT</h3>\\n<p>Sustainable software development is not only an ethical imperative but also a competitive advantage. However, achieving comprehensive sustainability is a complex task. More than just minimizing energy consumption, Green IT compels us to make conscientious choices at every stage of the software development lifecycle. By adopting architectural patterns that prioritize sustainability, optimizing code, and embracing best practices in operations, we can contribute to a more eco-friendly digital future.</p>\\n","featured":true,"flag":"new","tags":["architecture","coding"],"position":[685,263]},{"id":"groovy","release":"2022-03-28","title":"Groovy","ring":"hold","quadrant":"languages-and-frameworks","body":"<p>Since the rise of Kotlin, we seen no need why to still use Groovy as an alternative to Java running on the JVM.</p>\\n","featured":false,"flag":"default","revisions":[{"release":"2017-03-01","ring":"trial","body":"<p>Groovy is a dynamically typed compiled language running on the JVM. It is easy to learn as it provides a familiar syntax for Java programmers, but also offers advanced features such as closures and makes some mandatory Java syntax requirements optional to enhance the conciseness of the code. These features make Groovy especially well-suited for scripting and domain-specific languages. This is used by popular tools such as Gradle or Spock.</p>\\n<p>At AOE, Groovy is used in many projects and areas. We use Gradle as a build system, we carry out unit and integration testing with Spock and Geb, we generate Jenkins jobs with JobDSL and we implement complete services with Groovy and <a href=\\"/digital_xp_techradar/languages-and-frameworks/spring-boot/\\">Spring Boot</a>.</p>\\n"}],"position":[244,58]},{"id":"grpc","release":"2019-11-01","title":"GRPC","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p>We adopted GRPC, because it is used on multiple places within our microservice oriented architectures for internal communication.</p>\\n","featured":true,"flag":"default","tags":["architecture","coding"],"revisions":[{"release":"2018-03-01","ring":"assess","body":"<p>gRPC, &quot;A high-performance, Open Source, universal RPC framework,&quot; is a framework to easily connect clients and servers in an RPC setup.\\ngRPC was initially built at Google, and uses protobuf service definitions for method and payload specification.\\nEssentially, this makes it possible to define methods that a server exposes, with either a single payload or an incoming stream - either as a single response or a stream of responses.\\nThe definition itself is carried out with the help of protobuf to define message types and method signatures, and then client and server interfaces are compiled for the language(s) you want. Currently, there is support for languages such as C++, Java, Python, Go and many more.\\nThe shared language-neutral protobuf definition allows you to create all code for all languages automatically and helps with the interoperability of different systems.</p>\\n<p>From a technical point of view, gRPC uses HTTP/2 as a transport, directly benefitting from the default TLS encryption.\\nBesides gRPC, other frameworks also use protobuf RPC definitions. These frameworks include twirp from twitch, which makes it easy to change the transport/control layer with only very small changes to the application code.</p>\\n<p>We at AOE plan to assess gRPC for microservice architectures which are more RPC style and less REST style.</p>\\n"}],"position":[350,265]},{"id":"grunt","release":"2019-11-01","title":"Grunt","ring":"hold","quadrant":"tools","body":"<p>Grunt is a JavaScript task runner that automates repetitive tasks. While Grunt served us well for a good amount of projects,\\nother alternatives such as <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://gulpjs.com/\\">Gulp</a> emerged in the meantime and proved to be a better pick for the\\nmajority of our teams.</p>\\n<p>We have two main reasons for discarding Grunt in favor of other tools:</p>\\n<h3>Speed</h3>\\n<p>If a decent amount of tasks is reached, Grunt is known to run slower than other tools, because it heavily relies on I/O operations and\\nalways stores the result of one task as files on the disk.</p>\\n<h3>Configuration</h3>\\n<p>On large projects where a lot of automation is required, it can get very tedious to maintain complex and parallel running tasks.\\nThe grunt configuration files sometimes simply don\xb4t gave us the flexibility that we needed.</p>\\n<p>Currently, our preferred way to go is either simply use <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://docs.npmjs.com/misc/scripts\\">npm scripts</a> or rely on <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://webpack.js.org/concepts/loaders/\\">Webpack loaders</a> for file preprocessing. For non-webpack projects we also utilize Gulp.</p>\\n","featured":false,"flag":"default","position":[602,720]},{"id":"gulp","release":"2018-03-01","title":"Gulp","ring":"adopt","quadrant":"tools","body":"<p>Gulp is a JavaScript task runner much like Grunt. The tasks are written in JavaScript code.</p>\\n<p>It is a tool that helps you automate numerous tasks surrounding web development.\\nA typical use is to configure preprocessors for Sass, to compile CSS or to optimize CSS, JavaScript and Images.</p>\\n<p>With Gulp and its many plugins you can also do stuff such as start a web server and reload the browser if changes happen.</p>\\n<p>To get started you need to install Gulp on your machine via npm.</p>\\n<pre><code class=\\"hljs language-javascript\\">npm install gulp -g\\n</code></pre><p>You also need it locally in your project, so you have to install it as a dependency in your project .</p>\\n<pre><code class=\\"hljs language-javascript\\">npm install gulp --save-dev\\n</code></pre><p>You can split your tasks into various smaller sub-tasks and even split it up into smaller files.</p>\\n<p>A basic Gulp task can look like this:</p>\\n<pre><code class=\\"hljs language-javascript\\"><span class=\\"hljs-keyword\\">const</span> gulp = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&#x27;gulp&#x27;</span>);\\n<span class=\\"hljs-comment\\">// Requires the gulp-sass plugin</span>\\n<span class=\\"hljs-keyword\\">const</span> sass = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&#x27;gulp-sass&#x27;</span>);\\n<span class=\\"hljs-keyword\\">const</span> autoprefixer = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&#x27;gulp-autoprefixer&#x27;</span>);\\n<span class=\\"hljs-keyword\\">const</span> cssnano = <span class=\\"hljs-built_in\\">require</span>(<span class=\\"hljs-string\\">&#x27;gulp-cssnano&#x27;</span>);\\n\\ngulp.<span class=\\"hljs-title function_\\">task</span>(<span class=\\"hljs-string\\">&#x27;sass&#x27;</span>, <span class=\\"hljs-keyword\\">function</span>(<span class=\\"hljs-params\\"></span>){\\n  <span class=\\"hljs-keyword\\">return</span> gulp.<span class=\\"hljs-title function_\\">src</span>(<span class=\\"hljs-string\\">&#x27;app/scss/**/*.scss&#x27;</span>) <span class=\\"hljs-comment\\">// tell gulp where your source files are</span>\\n    .<span class=\\"hljs-title function_\\">pipe</span>(<span class=\\"hljs-title function_\\">sass</span>()) <span class=\\"hljs-comment\\">// Converts sass into css with the help of a gulp plugin called gulp-sass</span>\\n    .<span class=\\"hljs-title function_\\">pipe</span>(<span class=\\"hljs-title function_\\">autoprefixer</span>({<span class=\\"hljs-attr\\">browsers</span>: [<span class=\\"hljs-string\\">&#x27;last 2 versions&#x27;</span>]})) <span class=\\"hljs-comment\\">// auto prefixes the css for the last 2 versions of browser, like ie9 specific css</span>\\n    .<span class=\\"hljs-title function_\\">pipe</span>(<span class=\\"hljs-title function_\\">cssnano</span>()) <span class=\\"hljs-comment\\">// minify the css</span>\\n    .<span class=\\"hljs-title function_\\">pipe</span>(gulp.<span class=\\"hljs-title function_\\">dest</span>(<span class=\\"hljs-string\\">&#x27;app/css&#x27;</span>)) <span class=\\"hljs-comment\\">// tell gulp where to put the converted file. this is the first time where a file is written</span>\\n});\\n</code></pre><p>You can now run this task simply by executing the following command in your terminal:</p>\\n<pre><code class=\\"hljs language-javascript\\">gulp sass\\n</code></pre>","featured":false,"flag":"default","position":[462,536]},{"id":"hal-hateoas","release":"2019-11-01","title":"HAL / HATEOAS","ring":"trial","quadrant":"methods-and-patterns","body":"<p>We use HAL in cases where we need to link resources in payloads.\\nHATEOAS has not proven to be very useful in our projects.</p>\\n","featured":false,"flag":"default","revisions":[{"release":"2018-03-01","ring":"trial","body":"<p>We still recommend the usage of HAL and HATEOAS.</p>\\n<p>But, depending on the resource structure, there are some pitfalls to be aware of:</p>\\n<ul>\\n<li>Increased amount of HTTP calls</li>\\n<li>Parallelization of client-side calls is more difficult or even impossible when following links on heavily nested resource structures</li>\\n<li>Consumer side code might get larger</li>\\n</ul>\\n"},{"release":"2017-03-01","ring":"assess","body":"<p>Hypermedia As The Engine Of Application State or in short HATEOAS is a pattern that helps to organize dependencies and resources in a RESTful API. The basic idea of HATEOAS is that an API consumer do not have to know how dependencies of resources are connected and how to get them. A consumer must only be familiar with the basics of hypermedia.</p>\\n<p>Let&#39;s assume we have a bank account and an action to deposit money on that account. Everything you need to know is that the account resource has an action for a deposit. The URL of that action can then fetched from the link attribute with the corresponding relation.</p>\\n<pre><code>&lt;account&gt;\\n    &lt;account_number&gt;12345&lt;/account_number&gt;\\n    &lt;balance currency=&quot;usd&quot;&gt;-25.00&lt;/balance&gt;\\n    &lt;link rel=&quot;deposit&quot; href=&quot;https://bank.example.com/account/12345/deposit&quot; /&gt;\\n&lt;/account&gt;\\n</code></pre><p>Besides from HATEOAS there is an alternative implementation called Hypertext Application Language, in short HAL, which has much more features than the basic HATEOAS.</p>\\n<p>With HAL you are allowed to also define parametrized links, embedded resources and documentation relations (which are called curies). You can find the specification here.\\n<a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://stateless.co/hal_specification.html\\">http://stateless.co/hal_specification.html</a></p>\\n<p>If you want to link different api endpoints or resource locations in your API responses you should use this standard.</p>\\n"}],"position":[637,347]},{"id":"hotchocolate","release":"2023-02-23","title":"Hot Chocolate","ring":"assess","quadrant":"languages-and-frameworks","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://chillicream.com/docs/hotchocolate/v12\\">Hot Chocolate</a> is an open-source GraphQL server for .NET. \\nIt is compatible to many GraphQL clients and tools and is really easy to set up and use. We assess it in one of our\\nprojects as an alternative to <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://graphql-dotnet.github.io/docs/getting-started/introduction/\\">GraphQL .NET</a>.</p>\\n","featured":true,"flag":"default","tags":["coding"],"position":[144,201]},{"id":"hystrix","release":"2019-11-01","title":"Hystrix","ring":"assess","quadrant":"tools","body":"<p>Hystrix is not longer actively maintained and some of its goals can now be handled with service meshs.</p>\\n","featured":false,"flag":"default","revisions":[{"release":"2017-03-01","ring":"assess","body":"<p>Hystrix is a very powerful library for handling failures, fallbacks and latency management within complex distributed environments. Netflix developed it and after years of experience, they are using it in almost each of their microservices. It evolved to a great library for handling resilience in complex architectures and covers solutions for the most common resilience patterns like:</p>\\n<ul>\\n<li>Fail fasts</li>\\n<li>Fail silent</li>\\n<li>Circuit Breaker</li>\\n<li>Fallbacks (Static, Stubbed)</li>\\n</ul>\\n<p>Beside from that purposes Hystrix also offers some helpful features like parallel and asynchronous execution, In-Request-Caching and other useful features for working with distributed systems.</p>\\n<p>Another useful component that you are able to use with Hystrix is his dashboard that give you the ability of real time monitoring of external dependencies and how they behave. Alerting is also able via the dashboard.</p>\\n"}],"position":[691,524]},{"id":"inner-source","release":"2022-03-28","title":"Inner Source","ring":"assess","quadrant":"methods-and-patterns","body":"<p>Inner Source is a strategy to frictionless cross-team collaboration in software development inside an organization. \\nBased on Open Source methodologies, it provides an adaptable set of tools and practices for contributing to code \\ndeveloped by other teams. By fostering transparency and openness, it lowers the hurdle to get involved into \\ndecision-making throughout the corporation.</p>\\n<p>Core principles of Inner Source include:</p>\\n<ul>\\n<li>openness: all artifacts developed by an organization should be available to all employees</li>\\n<li>active contribution: developers are encouraged to rather implement a feature instead of asking for it</li>\\n<li>written communication: all decisions should be comprehensible and transparent</li>\\n<li>rewards and motivation: every contribution is important and deserves recognition</li>\\n</ul>\\n<p>As AOE strives for a high involvement of every employee into decision processes and organizational development, Inner\\nSource seems an ideal fit to our <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.aoe.com/en/career/how-we-work.html\\">company culture</a>.</p>\\n","featured":true,"flag":"default","tags":["agile"],"position":[572,132]},{"id":"invision","release":"2018-03-01","title":"Invision","ring":"trial","quadrant":"tools","body":"<p>Invision is an online tool used to work and collaborate on design and prototypes and to share them between clients and the team.</p>\\n<p>We use it in many projects now to present prototypes and designs and it helps in understanding the planned user experience.\\nAlso, we use this directly as a reference from the user stories to help the development teams in understanding and implementing the right frontend and backend functionalities.</p>\\n","featured":true,"flag":"default","tags":["ux/ui"],"position":[463,647]},{"id":"java","release":"2023-02-23","title":"Java","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.java.com\\">Java</a> is a versatile and widely-used programming language.</p>\\n<p>It is scalable and platform-independent, making it the ideal choice for businesses looking to streamline their\\noperations and reach a wider audience. With its broad library of tools, frameworks and modules, Java provides developers\\nwith the resources they need to create dynamic, feature-rich applications that can be easily integrated into existing\\nsystems. Additionally, Java has a large community of developers, ensuring that support and resources are available when\\nneeded.</p>\\n<p>With an extensive expertise at AOE we successfully run lots of Java projects in production. As it is very stable, has\\ngreat support from the open source community and lots of other big advantages, we often we use\\n<a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://spring.io/projects/spring-boot\\">Spring Boot</a> combined with the strengths of java to develop web services that\\nfits the needs of our customers.</p>\\n","featured":true,"flag":"default","tags":["coding","backend"],"position":[269,335]},{"id":"jest","release":"2023-11-01","title":"Jest","ring":"adopt","quadrant":"tools","body":"<p>Updated to &quot;adopt&quot;.</p>\\n","featured":false,"flag":"changed","tags":["frontend","quality assurance"],"revisions":[{"release":"2017-03-01","ring":"assess","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://facebook.github.io/jest/\\">Jest</a> is a JavaScript testing framework by facebook to test JavaScript code <strong>and</strong> React applications / components.</p>\\n<p>We started using Jest (and <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/facebook/watchman\\">watchmen</a>) instead of Karma because it:</p>\\n<ul>\\n<li>gives us integrated mocking library</li>\\n<li>gives us integrated support for testing &quot;promises&quot;</li>\\n<li>gives us integrated code coverage report</li>\\n<li>automatically runs tests related to changed files (instead of all tests)</li>\\n<li>gives us parallel test execution</li>\\n<li>gives us snapshot testing for React components</li>\\n</ul>\\n<p>It is easy to set up.\\nAnd even if you have a running setup with Karma/Chai you can easily replace Karma with Jest.\\nWith a small <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://medium.com/@RubenOostinga/combining-chai-and-jest-matchers-d12d1ffd0303#.3callo273\\">workaround</a>, Chai and Jest test matchers work fine together.</p>\\n"}],"position":[548,511]},{"id":"job-dsl","release":"2019-11-01","title":"Job DSL (Jenkins)","ring":"trial","quadrant":"tools","body":"<p>The <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://wiki.jenkins-ci.org/display/JENKINS/Job+DSL+Plugin\\">Job DSL</a>is a plugin for the Jenkins automation server. Jenkins jobs that automate parts of a software project are usually configured using the web interface of Jenkins. If Jenkins is the choice for your project and the number of build jobs tend to grow, the Job DSL plugin is your friend.</p>\\n<p>The plugin allows Jenkins jobs to be described by code (Groovy DSL). This code is then used for generating Jenkins jobs. As a consequence, job configuration can be part of the project&#39;s source code. During the generation step, existing jobs are synchronized, overwritten or left alone, depending on the configuration. The same configuration manages deleting or ignoring jobs that are not described in code anymore. Jobs can easily be restored in case of data loss and changed without clicking buttons for hours. The automation also makes it easy to seed large numbers of homogeneous components and builds on different branches.</p>\\n<p>The ability to treat Jenkins jobs as code is a big advantage. We highly suggest that every team automate the setup of their jobs and their pipelines. Another way of expressing build pipelines as code is the new <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://jenkins.io/doc/book/pipeline/\\">Jenkins Pipeline</a> feature - but still we see the need of Job DSL seeder jobs to seed the Jenkins pipeline jobs themselves and any additional jobs.</p>\\n","featured":false,"flag":"default","position":[591,562]},{"id":"k6","release":"2022-03-28","title":"K6","ring":"trial","quadrant":"tools","body":"<p>At AOE, we need to have to run load tests against services.</p>\\n<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://k6.io/\\">Grafana K6</a> is an open-source load testing tool with a quick and lightweight setup and provides </p>\\n<ul>\\n<li>CLI with developer friendly API</li>\\n<li>Scripting support</li>\\n</ul>\\n<p>allowing us to pinpoint performance issues.</p>\\n","featured":false,"flag":"default","revisions":[{"release":"2021-07-01","ring":"assess","body":"<p>Load Testing is a testing process in which the performance of a software application or system is tested under a specific expected load.\\nIt determines how the system behaves while being accessed by multiple users simultaneously.\\nThe goals of Load Testing is to improve performance bottlenecks and to ensure stability under high traffic.\\nWhen done regularly, it provides confidence in the system, its reliability and performance, helps identify the bottlenecks in the system under heavy user stress scenarios before they happen in a production environment, and gives protection against poor user experience when using the system.</p>\\n<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://k6.io/\\">K6</a> is a developer-centric, free and open-source load testing tool.\\nThe command line runner executes scripts written in JavaScript and allows to configure the execution time and the number of virtual users.\\nThe tool can be used for load testing and performance testing.\\nHowever, it can not be used to run tests that rely only on the browser, making it more suitable for testing of APIs.</p>\\n"}],"position":[534,583]},{"id":"kafka","release":"2021-07-01","title":"Kafka","ring":"trial","quadrant":"tools","body":"<p>&quot;Apache Kafka is an open-source distributed event streaming platform used by thousands of companies for high-performance data pipelines, streaming analytics, data integration, and mission-critical applications.&quot; (See <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://kafka.apache.org/\\">http://kafka.apache.org/</a>)</p>\\n<p>In comparison with other messaging solutions (such as <a href=\\"/digital_xp_techradar/tools/rabbitmq/\\">RabbitMQ</a> - Apacha Kafka persist the messages (instead of routing them to subscribers). It is written in Scala and Java, and follows the idea of a “distributed log” where messages are appended to the end (like in a log) - and that log is persisted to disk. Clients can choose where they begin reading from that log - often Kafka Streams is used for this.</p>\\n<p>We are using Kafka in data heavy projects - for example in data analytics use cases.</p>\\n","featured":false,"flag":"default","position":[559,606]},{"id":"keycloak","release":"2018-03-01","title":"Keycloak","ring":"adopt","quadrant":"tools","body":"<p>Most distributed systems still face a growing demand for user management, authentication, authorization and Single sign-on. In light of a growing security demand and specialization, the Open Source project JBoss Keycloak is a perfect match. </p>\\n<p>Keycloak has been a growing project from the outset and has a strong community. Keycloak is based on standards such as OAuth2, OIDC and SAML2. Securing a distributed system is supported by adapters, which are provided by Keycloak developers for different technology stacks. If there is no adapter for your technology stack, an integration on the protocol level with a library is simple. Many configurable features require no coding in the integrated projects. The required configuration is managed via code and promoted as usual. </p>\\n<p>We use Keycloak in our OM3 suite for several authentication-related use cases – such as user management for system users and Single sign-on for customers. The OAuth access tokens can be used to secure APIs that access sensitive information. In addition, Keycloak is part of the AOE infrastructure and helps in securing the various services to support employees and customers.</p>\\n","featured":true,"flag":"default","tags":["security"],"revisions":[{"release":"2017-03-01","ring":"trial","body":"<p>User management, authentication, authorization and Single Sign-On are part of most distributed systems nowadays. Building these sensitive and serious parts on your own might be a problem due to knowledge- and budget restrictions. Because of growing requirements in that field (social logins, single sign-on, federation, two-factor authentication, etc.), as well as growing security concerns, building these things on your own has become more challenging during the past decade.</p>\\n<p>As a consequence, the recommendation is: use an existing solution and connect it with your project&#39;s codebase using provided standards. Our recommended solution is the Open Source project JBoss Keycloak. We use Keycloak in our OM3 suite for several authentication-related use cases - such as user management for system users and single sign-on for customers. The OAuth access tokens can be used to secure APIs that access sensitive information.</p>\\n<p>Keycloak is based on standards such as OAuth2, OIDC and SAML2. Securing a distributed system is supported by adapters, which are provided by the Keycloak developers for different technology stacks. If there is no adapter for your technology stack, an integration on protocol level with a library is simple. A lot of configurable features require no coding in the integrated projects.</p>\\n<p>By design, the Keycloak project offers customizability and extensibility via so-called SPIs, e.g. a custom authenticator can be implemented to address project specific problems.</p>\\n<p>Keycloak normally runs standalone and can use various database products. A docker image is available to start in a containerized environment.</p>\\n<p>Keycloak might be overkill, depending on your project needs. For a simple integration with, for instance, a social login provider (Facebock, Twitter, etc.) Keycloak might be too much. For a JVM project, the pac4j library might be an alternative. If a cloud-based solution is preferred and data privacy concerns are not an issue, Auth0 might be the choice.</p>\\n"}],"position":[467,569]},{"id":"kotlin","release":"2019-11-01","title":"Kotlin","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p>Kotlin is used successfully in production by multiple teams.</p>\\n<p>Kotlin is 100% interoperable with Java. It means the code can live side-by-side in one code base and interact.\\nFrom the beginning it was designed with practical thought in mind. So the IDE Support in IntelliJ is really great.</p>\\n<p>The Spring Framework Developer put a lot of effort that Springs play well together with Kotlin. </p>\\n<p>With its concise syntax, null safety, \\nDue to its explicit type system, this language is also great replacement for Groovy usage with Gradle.</p>\\n","featured":true,"flag":"default","tags":["coding"],"position":[233,329]},{"id":"kubernetes-operators","release":"2023-11-01","title":"Kubernetes Operators","ring":"trial","quadrant":"methods-and-patterns","body":"<p>We&#39;ve faded out Kubernetes Operators as a standalone recommendation because they are such a central part of <a href=\\"../platforms-and-operations/kubernetes.html\\">Kubernetes</a> that their use appears self-evident.</p>\\n","featured":false,"flag":"changed","tags":["devops"],"revisions":[{"release":"2021-07-01","ring":"trial","body":"<p>The <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://kubernetes.io/docs/concepts/extend-kubernetes/operator/\\">Kubernetes Operators</a> allow to manage application configuration within Kubernetes through <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/\\">custom resources</a>.\\nThe operators are implemented as Kubernetes controllers and all interaction happens through the Kubernetes API.\\nThis allows to manage application deployment and configuration with the same toolset, it also allows to create another abstraction layer to describe the desired application state and let the operator decide how this state should be reached.</p>\\n<p>Kubernetes Operators are widely available for many community projects.\\nThese can be shared and found on <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://operatorhub.io/\\">operatorhub.io</a>.\\nImplementing custom operators is greatly simplified through the <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://sdk.operatorframework.io/\\">Operators SDK</a> which is used as base for many <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/operator-framework/awesome-operators\\">existing implementations</a>.</p>\\n<p>We use operators in most projects and prefer them to custom management code.\\nWe encourage teams to try the existing community operators for e.g. observability and operations tasks.</p>\\n"}],"position":[456,161]},{"id":"lighthouse-ci","release":"2022-03-28","title":"Lighthouse CI","ring":"assess","quadrant":"tools","body":"<p>At AOE, we want to keep a permanent eye on the metrics of the <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://web.dev/learn-web-vitals/\\">Web Vitals</a> for our projects.</p>\\n<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://web.dev/lighthouse-ci/\\">Lighthouse CI</a> is a collection of free tools that facilitate the use of Lighthouse for performance monitoring. With Lighthouse CI we get a history of evaluation results and can compare them over time. It is also possible to set performance budgets to ensure that a website&#39;s performance does not deteriorate through regression.</p>\\n<p>Although performance monitoring is the most common use case for Lighthouse CI, other aspects of Lighthouse can also be monitored, such as SEO or accessibility. Thus, the use of Lighthouse CI can help ensure an overall good user experience.</p>\\n","featured":true,"flag":"default","tags":["ci/cd","frontend"],"position":[625,590]},{"id":"micro-frontends","release":"2023-11-01","title":"Micro Frontends","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>While Micro Frontends have gained significant attention as a software architectural approach that mirrors the principles of microservices at the frontend level, it&#39;s crucial to recognize that they are not a universal remedy for all frontend development challenges. The decision to implement Micro Frontends should be made thoughtfully, taking into account the project&#39;s specific requirements.</p>\\n<h3>Pros:</h3>\\n<ul>\\n<li><strong>Modularity:</strong> Breaking down the frontend into smaller, manageable pieces allows for easier development, testing, and maintenance. Teams can work on individual modules autonomously, leading to faster development cycles.</li>\\n<li><strong>Technology Agnosticism:</strong> Enabling the use of different frameworks and technologies for different parts of the application. Teams can choose the best technology stack for each component, promoting flexibility and fostering innovation.</li>\\n<li><strong>Resilience:</strong> In monolithic applications, a single bug can potentially affect the entire system. Isolation of components mitigates this risk and simplifies maintenance and debugging.</li>\\n</ul>\\n<h3>Cons:</h3>\\n<ul>\\n<li><strong>Complexity:</strong> Managing multiple codebases, handling cross-cutting concerns such as authentication, routing, and state management, and ensuring a consistent user experience throughout the application can introduce a level of complexity that may not be justified for all projects.</li>\\n<li><strong>Performance Overhead:</strong> Increased JavaScript bundle sizes and additional HTTP requests, as each module may be loaded separately, can impact page load times, especially in low-bandwidth environments. Careful optimization and caching strategies are required to mitigate this issue.</li>\\n<li><strong>Versioning and Compatibility:</strong> Maintaining compatibility between evolving technologies and frameworks is a substantial challenge. Compatibility issues may arise, requiring additional development and testing efforts.</li>\\n</ul>\\n<p>Ultimately, the decision of whether to choose Micro Frontends or other architectural approaches should align with the project&#39;s goals, team expertise, and scalability requirements. Individual teams working on well-defined, independently deployable features of a large application may benefit from using Micro Frontends. However, for smaller applications or teams with limited resources, a traditional monolithic approach might be more efficient.</p>\\n","featured":true,"flag":"changed","tags":["architecture","frontend"],"revisions":[{"release":"2021-07-01","ring":"adopt","body":"<p>The Micro Frontends approach continues to prove to be a valuable pattern for large-scale systems developed by several teams.\\nTherefore, we moved this pattern to &quot;adopt&quot;.</p>\\n<p>We use <a href=\\"methods-and-patterns/page-composing.html\\">page composing</a> as one implementation of this pattern.</p>\\n"},{"release":"2019-11-01","ring":"trial","body":"<p>When deciding on a system architecture we are always striving for technology neutralism.\\nThis is to allow us to stay flexible with future decisions.\\nMicro Frontends can be a tool to support us with this goal.\\nWe favor protocols and methods, such as plain HTML and HTTP, over specific technologies when designing Micro Frontends.</p>\\n<p>Since Micro Frontends have proven to allow use move fast and agile, we moved this pattern to &quot;trial&quot;.</p>\\n"},{"release":"2018-03-01","ring":"assess","body":"<p>We see many benefits in Microservices – especially in large teams – but often this architecture \\ndoes not involve the user interface. Instead, you might end up maintaining a frontend monolith. With Micro Frontends \\nyou enable your frontend developers to gain the same benefits that we have grown accustomed to in a Microservice architecture: \\nDecoupled components, which are developed and deployed by independent teams. But what sounds reasonable comes with \\nchallenges. Integrating different Frontends on the client- or server-side can be tricky, as well as keeping the overall \\nUser Experience consistent.</p>\\n<p>Despite the challenges, Micro Frontends help us to develop large applications across multiple teams. Developers can\\nwork more independently without having too much trouble maintaining a large codebase. Being able to update or \\nreplace Frontend libraries in some parts of the application is yet another benefit in the fast-moving world of \\nfrontend development.</p>\\n"}],"position":[435,226]},{"id":"microservices","release":"2023-11-01","title":"Microservices","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>We continue to belief in the microservices concept and its related patterns and best practices. However, it&#39;s worth mentioning that we had to learn some lessons when it came to resilient thinking and deployment-related dependencies between microservices.</p>\\n<p>We feel that our microservice-based applications are more robust than monolithic ones have been. Thanks to the \\nsplit of the overall complexity into multiple services, new employees or team members are becoming productive within days or a few weeks.</p>\\n<p>In order to get microservices right and to benefit from the advantages, there is a lot more required.\\nThe following &quot;pyramid of need&quot; for microservices shows this:\\n<img src=\\"/digital_xp_techradar/images/microservices-pyramid.png\\" alt=\\"microservices pyramid of need\\"></p>\\n","featured":false,"flag":"changed","tags":["architecture"],"revisions":[{"release":"2017-03-01","ring":"trial","body":"<p>Microservices as an architecture style is getting very popular recently. At AOE, more and more teams are adding microservices to their existing application architecture or designing applications with microservices.</p>\\n<p>We also like the term &quot;self-contained systems&quot; instead of microservices.</p>\\n<p>The benefits we see are:</p>\\n<ul>\\n<li>better handling of complexity compared to adding features in a monolithic approach</li>\\n<li>being able to use the languages and framework that best fit the purpose of the service</li>\\n<li>enabling better parallel work in big teams or multi-team projects</li>\\n<li>flexibility in deploying changes to production - by just deploying the changed service</li>\\n</ul>\\n<p>Related patterns are <a href=\\"/digital_xp_techradar/methods-and-patterns/strategic-domain-driven-design/\\">Strategic Domain Driven Design</a> as an approach to wisely cut your architecture according to useful bounded contexts and decide on the relevant communication and &quot;translation&quot; between the services.\\nIn case you are looking for a small visualisation tool for your microservice architecture you might find <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/AOEpeople/vistecture/\\">vistecture</a> useful.</p>\\n<p>Also <a href=\\"/digital_xp_techradar/methods-and-patterns/resilience-thinking/\\">Resilience thinking</a> is especially important when designing an application as a suite of microservices.</p>\\n"}],"position":[450,256]},{"id":"mlops","release":"2023-11-01","title":"MLOps","ring":"assess","quadrant":"methods-and-patterns","body":"<p>After spending some time diving into the world of data science and machine learning we&#39;re realizing our existing DevOps best practices aren&#39;t a perfect fit for the specific workflows we&#39;re seeing here.\\nData science is not only about code but also all about managing large datasets and models.\\nData is being analyzed, models are being trained in many iterations and then software needs to be deployed that does the actual prediction/inference.\\nAnd this circle (see: CRISP-DM) will repeat over and over again during the development phase and after the first production release.\\n&quot;<strong>MLOps</strong>&quot; extends the DevOps best practices in order to cover these new scenarios specific to machine learning workflows.</p>\\n<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://dvc.org/\\">DVC</a> helps dealing with large data sets and models by connecting external storage to your Git repositories and <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://cml.dev/\\">CML</a> helps integrating the CI/CD into your GitHub or GitLab workflows. \\nSince we&#39;re already using Kubernetes extensively we&#39;re exploring <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.kubeflow.org/\\">Kubeflow</a> for running the full machine learning workflow on Kubernetes clusters.</p>\\n","featured":false,"flag":"changed","tags":["devops"],"position":[511,96]},{"id":"mob-programming","release":"2022-03-28","title":"Mob Programming","ring":"assess","quadrant":"methods-and-patterns","body":"<p>While practising pair programming for several years now at AOE, we have started using\\n<a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.remotemobprogramming.org/\\">remote mob programming</a> extensively when \\nswitching to remote work during the COVID-19 pandemic.</p>\\n<p>Mob programming brings the driver/navigator pattern to another level by adding a group\\nof navigators into the game. With the whole development team focussing on a single\\ntopic, a lot of common understanding and shared knowledge are being generated during\\neach session as everyone is involved in the development process. The result will be\\nless controversial code reviews (which might even be completely omitted) and the\\nevolution of a team coding style in favor of individual ways of problem-solving.</p>\\n<p>In practice, we found the Git-based <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/remotemobprogramming/mob\\">mob</a>\\nas an easy-to-use tool for remote mob programming. It provides a fast and simple way\\nfor initiating a mob session, handing over changes to the next person and committing\\nthe outcome.</p>\\n","featured":true,"flag":"default","tags":["agile","coding"],"position":[633,197]},{"id":"monorepo","release":"2023-11-01","title":"Monorepo","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>Adopting a monorepo approach for our React and Next.js-based projects offers several benefits, <em>although it may not be\\nthe best fit for every project.</em></p>\\n<ol>\\n<li>More efficient code sharing and reusability.</li>\\n<li>Consistent development environment.</li>\\n<li>Easier cross-project refactoring.</li>\\n<li>Improved collaboration.</li>\\n<li><strong>Simplified Dependency Management</strong>: In our monorepo, we can manage dependencies at the repository level, simplifying\\nthe process of keeping everything up to date and avoiding version conflicts.</li>\\n<li><strong>Streamlined CI/CD Pipeline</strong>: A single CI/CD pipeline that can build and test all our projects simultaneously.\\nThis, of course, comes with the drawback of a more complicated CI/CD setup and potentially longer running pipelines.</li>\\n<li><strong>Better Code Ownership</strong>: It&#39;s easier to determine who is responsible for each part of the codebase, which can\\nimprove code ownership and accountability.</li>\\n<li><strong>Simplified Testing</strong>: We can set up end-to-end tests and integration tests that cover the entire application more\\neasily in a monorepo, ensuring that changes in one part of the codebase don&#39;t break other parts.</li>\\n<li><strong>Codebase Navigation</strong>: Developers can easily navigate through different parts of the codebase without having to\\nswitch between multiple repositories or projects.</li>\\n</ol>\\n<p><strong>However, it is important to note that monorepos are not a one-size-fits-all solution.</strong> They can introduce complexity,\\nespecially in very large projects, and may not be suitable for all team sizes or development workflows. The decision to\\nadopt a monorepo should be based on a careful consideration of your project&#39;s specific requirements, team size, and\\ndevelopment practices.</p>\\n","featured":true,"flag":"changed","tags":["coding"],"revisions":[{"release":"2022-03-28","ring":"trial","body":"<p>A monorepo is a single repository containing multiple projects and shared libraries with their relationships.</p>\\n<p>At AOE, we are using a monorepo that is home to both our React and Next.js based frontends and \\nour <a href=\\"/digital_xp_techradar/languages-and-frameworks/go-lang/\\">Go</a> / <a href=\\"/digital_xp_techradar/languages-and-frameworks/flamingo/\\">Flamingo</a> based backends, \\nas well as shared libraries we use in all of our projects.</p>\\n<p>The main benefits in that approach are:</p>\\n<ul>\\n<li>Breaking changes are directly detected and must be fixed within the same pull request on all projects</li>\\n<li>No conflicting versions of dependencies</li>\\n<li>Same CI Setup for everything and no overhead on new projects</li>\\n<li>Tool consistency over all projects</li>\\n</ul>\\n<p>If you take the monorepo approach, of course you want to have a tool to manage it. There are a lot of them on the market \\nand at AOE we have decided to go with <a href=\\"/digital_xp_techradar/tools/nx/\\">Nx</a>.</p>\\n"}],"position":[478,383]},{"id":"nats","release":"2023-11-01","title":"NATS","ring":"assess","quadrant":"tools","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://nats.io/\\">NATS</a> is a cloud native messaging and stream-data system for modern distributed software systems.\\nTwo <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/nats-io/nats-general/blob/master/architecture/DESIGN.md\\">design-goals</a> were simplicity and performance.\\nThese are adopted by selecting <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://golang.org/\\">golang</a> for the server implementation and reducing the memory footprint for both: server- and client-side.\\nThe server-side provides simple and efficient horizontal scaling (e.g. deploying it inside Kubernetes) and the small client-footprint allows us to use it in embedded-systems, edge-computing and IoT devices e.g. for command and controll use-cases.\\nAlso, the long list of existing <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://docs.nats.io/compare-nats#integrations\\">integrations</a> and the plugin-systems bring a great flexibility.</p>\\n","featured":false,"flag":"changed","tags":["architecture","devops"],"position":[714,461]},{"id":"next-js","release":"2023-11-01","title":"Next.js","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p>We are convinced that Next.js is one of the go-to frameworks for React, and we&#39;re excited about the features that version 13 has brought with it. During the Next.js Conf 2022, the team announced some exciting adaptations in this release, but the most interesting one is the new &quot;app&quot; router. In collaboration with the React team, this new routing architecture brings some of the newest and most promising features of React 18 to life.</p>\\n<p>When using the app router, every component, by default, becomes a <a href=\\"/digital_xp_techradar/methods-and-patterns/react-server-components/\\">React Server Component</a>, making it one of the first real integrations of this pattern in a framework. The goal is to build complex interfaces while minimizing the amount of JavaScript shipped to the client. Another exciting feature is Streaming, which allows incremental transfer of parts of the UI to the client as they become ready. For example, immediately showing some fallback UI until an asynchronous action is completed, and then streaming the final UI to the client. With the app router, it&#39;s also possible to easily create shared layouts that preserve state during navigation and remain interactive.</p>\\n<p>The good thing is that this new architecture can coexist alongside the old page router, giving us the flexibility to incrementally adapt to the new features in existing projects.</p>\\n","featured":true,"flag":"changed","tags":["coding","frontend"],"revisions":[{"release":"2021-07-01","ring":"adopt","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://nextjs.org/\\">Next.js</a> claims itself as <strong>the</strong> React framework for production.\\nIt comes with first-class developer experience and many features for example: hybrid static &amp; server-side rendering, TypeScript support, image optimization, code splitting &amp; much more.</p>\\n<p>We at AOE are already using Next.js for some big projects.\\nThe main reason for that is the modern stack (React with TypeScript) and the possibility to render on the server (static pre-rendering or dynamic SSR) to be able to get crawled by search engines and stay SEO relevant.</p>\\n"},{"release":"2019-11-01","ring":"trial","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://nextjs.org/\\">Next.js</a> is a JavaScript and React based framework which makes use of server side rendering.</p>\\n"}],"position":[291,358]},{"id":"nocode-lowcode","release":"2022-03-28","title":"No-Code / Low-Code","ring":"assess","quadrant":"methods-and-patterns","body":"<p>No-code or low-code refers to tools that allow application software to be created via graphical user interfaces and\\nconfiguration - instead of (classic) text-based programming.\\nLow-code platforms additionally supports certain scripting possibilities.</p>\\n<p>No-code and low-code platforms have raised a lot of funding and the ecosystem is growing fast. There are more than 400\\nplatforms listed on software selection websites like g2.\\nThe promise of this ecosystem sounds logical: there is a growing demand for digital products and solutions in all\\nsectors - and skilled teams of developers are scarce.\\nThat&#39;s why platforms\\nlike <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://bubble.io/\\">bubble.io</a>, <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.airtable.com/\\">airtable</a>,\\n<a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://about.appsheet.com/home/\\">appsheet</a>, <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://bryter.com/\\">bryter</a>, <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://ninox.com/de\\">ninox</a>\\nand co promise to build digital products faster and better.</p>\\n<p>And the platforms have developed and the ecosystem is emerging. AI technics are being used to improve the creation\\nprocess and modern low-code platforms also come with built-in release and operations support. We have used some low-code\\nplatforms for internal tools, for example to help organise events or onboarding activities.</p>\\n<p>Here are our thoughts on this:</p>\\n<ul>\\n<li><p>We see opportunities to improve communication and collaboration between developers on such platforms and non-technical\\nprofessionals (domain experts), as they can collaborate on the platform directly during the process of creating the\\ndigital product.</p>\\n</li>\\n<li><p>If the use case fits into the sweet spot of the platform, the results are very fast and surprising.</p>\\n</li>\\n<li><p>There is a logical trade-off between simplicity and flexibility: platforms with a high level of abstraction and a low\\nlearning curve can deliver good results very quickly. However, if you have requirements that do not fit into the\\n&quot;standard&quot; of the platform, it becomes difficult to customise. On the other hand, platforms that allow a lot of\\nconfiguration and scripting come with a higher learning curve. And in some respects it may end being similar to using\\na programming framework.</p>\\n</li>\\n<li><p>Operating costs can become a relevant factor - especially if you pay for high performance and higher utilisation.</p>\\n</li>\\n<li><p>You have to realise that with complex applications there is much more to do than &quot;just&quot; writing code. Test\\narchitecture, api design, integrations, careful design of the solution, proper testing, CI/CD strategy etc. So\\nthere is still a need for skilled (development) teams to do this work.</p>\\n</li>\\n</ul>\\n<p>Thinking about the different aspects, we will not consider low-code platforms as the core technology in complex software\\ndevelopment projects - but we think that even in larger IT projects or organisations there are valid use cases or\\ncertain &quot;bounded contexts&quot; where using a low-code platform is a proper choice and helps to deliver results faster.</p>\\n","featured":true,"flag":"default","tags":["coding"],"position":[458,107]},{"id":"node-js","release":"2021-07-01","title":"node.js","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p>Node.js is a no- browser JavaScript execution runtime. Its basis is Google&#39;s V8 engine. <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://nodejs.org/en/\\">Node</a> is event-driven and follows a non-blocking I/O model.</p>\\n<p>It’s a good choice for restful APIs, realtime purposes or situations where many concurrent connections are expected, where each connection has a lightweight memory footprint.</p>\\n<p>Node allows separation of concerns by using its package manager <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.npmjs.com/\\">npm</a>, which is also the largest ecosystem of Open Source libraries (modules).</p>\\n<p>Modules are added as dependencies and offer a wide range of functionalities in a range from simple helper functions to mature web frameworks such as <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://expressjs.com/de/\\">express.js</a>.</p>\\n<p>Many PaaS providers (AWS, Google Cloud Platform, Azure) support node, including deployment and monitoring services out of the box for scalable stateless applications.</p>\\n<p>At AOE, we successfully use node.js-based applications for smaller services or internal tools such dashboards.</p>\\n","featured":false,"flag":"default","revisions":[{"release":"2017-03-01","ring":"trial","body":"<p>Node.js is a no- browser JavaScript execution runtime. Its basis is Google&#39;s V8 engine. <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://nodejs.org/en/\\">Node</a> is event-driven and follows a non-blocking I/O model.</p>\\n<p>It’s a good choice for restful APIs, realtime purposes or situations where many concurrent connections are expected, where each connection has a lightweight memory footprint.</p>\\n<p>Node allows separation of concerns by using its package manager <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.npmjs.com/\\">npm</a>, which is also the largest ecosystem of Open Source libraries (modules).</p>\\n<p>Modules are added as dependencies and offer a wide range of functionalities in a range from simple helper functions to mature web frameworks such as <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://expressjs.com/de/\\">express.js</a>.</p>\\n<p>Many PaaS providers (AWS, Google Cloud Platform, Azure) support node, including deployment and monitoring services out of the box for scalable stateless applications.</p>\\n<p>At AOE, we successfully use node.js-based applications for smaller services or internal tools such dashboards.</p>\\n"}],"position":[346,364]},{"id":"nosql","release":"2019-11-01","title":"NoSQL","ring":"trial","quadrant":"methods-and-patterns","body":"<p>NoSQL technologies are established solutions that allows for scaling and handling big datasets.\\nWe use Technologies like Redis, Elasticsearch and Neo4J but there are many others that are powering the NoSQL space.</p>\\n","featured":false,"flag":"default","position":[541,209]},{"id":"npm","release":"2019-11-01","title":"NPM","ring":"adopt","quadrant":"tools","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.npmjs.com/\\">npm</a> is one of, if not the most, popular package manager for JavaScript. Because of the big community, you can find nearly every dependency in npm.</p>\\n<p>Instead of other package managers such as <a href=\\"/digital_xp_techradar/tools/bower/\\">bower</a>, you have to write your packages as <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://en.wikipedia.org/wiki/CommonJS\\">modules</a>. This unifies the way you have to use, test and, of course, understand dependencies.</p>\\n<p>npm creates a tree for your dependencies and their nesting dependencies. Because of this, you don&#39;t need to handle version conflicts, since every dependency uses there own version of e.g. <a href=\\"/digital_xp_techradar/tools/webpack/\\">webpack</a>.</p>\\n<p>With <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://docs.npmjs.com/cli/shrinkwrap\\">shrinkwrap</a> you have a robust tool to lock down and manage the versions of your dependencies - following the <a href=\\"/digital_xp_techradar/methods-and-patterns/pin-external-dependencies/\\">Pin (external) dependencies</a> approach.</p>\\n<p>For each package you have to classify your dependencies:</p>\\n<ul>\\n<li>dependencies are needed for use without the need of pre compiling, e.g. <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://lodash.com/\\">lodash</a></li>\\n<li>devDependencies are needed for development only, e.g. testing frameworks or pre compiler e.g. <a href=\\"/digital_xp_techradar/languages-and-frameworks/babel/\\">babel</a></li>\\n<li>peerDependencies you have to provide for using the package</li>\\n</ul>\\n<p>With <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://docs.npmjs.com/misc/scripts\\">scripts</a> you get support for the most common build lifecycle steps, e.g. build, start, test ...</p>\\n<p>Other useful features:</p>\\n<ul>\\n<li>mirror support for your own repository (e.g. <a href=\\"/digital_xp_techradar/platforms-and-operations/artifactory/\\">artifactory</a>)</li>\\n<li>can be used for server and client JavaScript development (see <a href=\\"/digital_xp_techradar/languages-and-frameworks/node-js/\\">node.js</a> )</li>\\n</ul>\\n","featured":false,"flag":"default","position":[543,465]},{"id":"nx","release":"2023-11-01","title":"NX","ring":"adopt","quadrant":"tools","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://nx.dev/\\">Nx</a> is now a daily used tool in our Monorepo setup. It takes care of everything from app creation to \\nrunning development environments and tests to code generation.</p>\\n","featured":false,"flag":"changed","tags":["coding","ci/cd"],"revisions":[{"release":"2021-07-01","ring":"assess","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://nx.dev/\\">Nx</a> is a suite of powerful, extensible dev tools to help you architect, test, and build at any scale.\\nIt is mainly applicable in the environment of React, Angular and Node.js and tries to simplify and streamline the work in a mono repo.</p>\\n<p>At AOE, we are currently taking our first steps with NX in a mono repo that is home to both our React and Next.js based frontend and our <a href=\\"/digital_xp_techradar/languages-and-frameworks/go-lang/\\">Go</a> / <a href=\\"/digital_xp_techradar/languages-and-frameworks/flamingo/\\">Flamingo</a> based backend.</p>\\n<p>The integration with the Node.js components (React, Next.js, Cypress) works smoothly and brings the expected benefits such as faster build times through intelligent caching.\\nSupport for Go is currently only rudimentary, which is why NX still has to prove itself in this area.</p>\\n<p>Especially in the environment of Node.js in combination with the use of a mono repo, NX is worth a look.</p>\\n"}],"position":[454,482]},{"id":"open-api","release":"2019-11-01","title":"Open API","ring":"adopt","quadrant":"tools","body":"<p>The OpenAPI Specification is becoming a broadly adopted industry standard for describing modern REST APIs.\\nOther initiatives like RAML have <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://blogs.mulesoft.com/dev/api-dev/open-api-raml-better-together/\\">joined</a> the OpenAPI Initiative.</p>\\n<p>OpenAPI v2 version is basically the former Swagger - and Swagger provides useful tools for OpenAPI like the online editor and viewer <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://editor.swagger.io/\\">http://editor.swagger.io/</a>\\nWe have also found that this version currently have a good tool support across languages, so you will find API client and server generation tools for a lot of languages, which makes it quite easy to connect to an API that is described in OpenAPI standard.</p>\\n<p><strong>OpenAPI v3</strong></p>\\n<p>OpenAPI v3 adds more features to the specification - for example the ability to describe APIs supporting request/callback pattern.</p>\\n<p>There is a very good api designer <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.apicur.io/\\">https://www.apicur.io/</a> and a good mock generator <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://microcks.github.io/index.html\\">http://microcks.github.io/index.html</a></p>\\n<p>The general tool support is excellent. See <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://openapi.tools/\\">https://openapi.tools/</a></p>\\n","featured":true,"flag":"default","tags":["architecture"],"position":[489,417]},{"id":"open-digital-architecture","release":"2023-02-23","title":"Open Digital Architecture","ring":"assess","quadrant":"methods-and-patterns","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.tmforum.org/oda/\\">TM Forum Open Digital Architecture (ODA)</a> provides architectural blueprints for\\ncommunication service providers (CSPs), based on modern patterns and technologies such as microservices or\\ncloud-native solutions. It offers a number of benefits, including:</p>\\n<ul>\\n<li>open, standards-based reference architecture for software development in the telco domain</li>\\n<li>faster time-to-market through a modular and flexible architecture</li>\\n<li>simplified management and updates to reduce cost and the risk of downtimes</li>\\n<li>enhanced customer experience by delivering personalized, high-quality services</li>\\n</ul>\\n<p>As a <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.tmforum.org/membership/current-members/\\">TM Forum member</a>, AOE has signed <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.tmforum.org/oda-interactive-map/open-digital-architecture-open-api-manifesto/\\">both the Open API and\\nthe ODA Manifesto</a> and is\\nstrongly committed to the values and visions behind these open standards.</p>\\n","featured":true,"flag":"default","tags":["architecture"],"position":[668,274]},{"id":"open-policy-agent","release":"2023-11-01","title":"Open Policy Agent","ring":"assess","quadrant":"tools","body":"<p>We have been transitioning away from using Open Policy Agent at AOE. For alternative solutions, please refer to <a href=\\"../methods-and-patterns/policy-as-code.html\\">Policy as Code</a>.</p>\\n","featured":false,"flag":"changed","tags":["security","architecture"],"revisions":[{"release":"2021-07-01","ring":"assess","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.openpolicyagent.org/\\">Open Policy Agent</a> (OPA) is a framework which allows modelling and evaluating policy access services.\\nThe underlying expression language <em>Rego</em> is purpose-built for the policy evaluations and implements the <strong>Policy As Code</strong> pattern. </p>\\n<p>This allows to decouple policy from the service&#39;s code, so you can release, and review policies separately.</p>\\n<p>The benefits of using OPA and Rego comes from the various available integrations into other cloud-native services and tools.\\nIt can be used with the &quot;Kubernetes Admission Controller&quot;, to authorize decisions within a Service Mesh or as part of infrastructure evaluation pipelines. </p>\\n<p>We use OPA in some of our infrastructure pipelines to ensure that changes don&#39;t have undesired impact or within Kubernetes to evaluate the overall conformity of our deployments with the given policies.</p>\\n<p>We have also evaluated OPA as part of permission management in distributed architectures.\\nThe concept promises to provide value especially for distributed enterprise architectures.</p>\\n"}],"position":[686,488]},{"id":"oro-platform","release":"2018-03-01","title":"Oro Platform","ring":"assess","quadrant":"tools","body":"<p>OroPlatform is a framework built on Symfony 2 with the purpose of providing the features you need in every business application that is not your core business logic. Hence, it serves you with a basic application, providing login and complex security, menus and menu management, history, audit trails, settings management, etc. It comes complete with a design and many widgets to be utilized in own entities. Other Features of OroPlatform are, for example, a WebSocket server-driven user interface, queue-based task runners, REST Interface, as well as messaging- and workflow systems.</p>\\n<p>One of the central features is that entities, which are to be managed within the system, can be set up completely by configuring them using the UI. This in itself implies that it puts another abstraction layer upon doctrine and symfony defaults.</p>\\n<p>As with every framework or application, the general-purpose goals and abstraction comes with drawbacks: In fact, OroPlatform modifies and extends the common way of doing things in Symfony in several places, which makes the developer&#39;s life hard at times. Also, the UI and package managing are set in such a way that they are hard to extend or replace. The many additional abstraction layers can result in decreased performance.</p>\\n<p>On the other hand, OroPlatform gives you a good head start for prototyping and frees you from rebuilding common requirements - which makes it a relevant choice for business applications with the need to manage several entities in a backend. Also, projects such <a href=\\"/digital_xp_techradar/tools/akeneo/\\">Akeneo</a> or OroCRM use OroPlatform with success.</p>\\n<p>Since the project is still young, the future development and improvements need to be watched. We classified the Framework as <em><strong>Assess</strong></em>.</p>\\n","featured":false,"flag":"default","position":[555,671]},{"id":"pact","release":"2021-07-01","title":"PACT","ring":"trial","quadrant":"tools","body":"<p>At AOE we continue to use PACT but would like to use it even more.\\nIt therefore remains in the trial ring but was faded out from the overview page.</p>\\n","featured":false,"flag":"default","revisions":[{"release":"2018-03-01","ring":"trial","body":"<p>PACT (<a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://pact.io/\\">http://pact.io/</a>) is a family of frameworks that provides support for <em>Consumer Driven Contract testing</em> across different languages and frameworks.</p>\\n<p>Consumer Driven Contract testing is a pattern for testing interfaces/boundaries between services.</p>\\n<p>It allows &quot;consumers&quot; to run tests against a defined Mock and record the defined interactions (=PACT).\\nIt puts &quot;providers&quot; in the position to run the PACT tests inside their Continuous Integration Pipelines, so that the provider knows if he might break any consumers.</p>\\n<p>This approach makes sense in organisations where teams collaborate more closely (See <a href=\\"/digital_xp_techradar/methods-and-patterns/strategic-domain-driven-design/\\">Strategic Domain Driven Design</a> ), e.g. to build <a href=\\"/digital_xp_techradar/methods-and-patterns/microservices/\\">Microservice oriented architectures</a></p>\\n<p>Consumer Driven Contract Testing and how it can be conducted with PACT is documented very nicely on the official PACT website: <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://docs.pact.io/\\">https://docs.pact.io/</a>.</p>\\n"}],"position":[625,513]},{"id":"page-composing","release":"2021-07-01","title":"Page Composing","ring":"trial","quadrant":"methods-and-patterns","body":"<p>Page composing is a way to aggregate multiple independent page fragments into one combined web page.\\nAs an implementation of <a href=\\"methods-and-patterns/micro-frontends.html\\">Micro Frontends</a>, this approach supports to deploy and run services agnostic to the technologies used per team.</p>\\n<p>The concept builds upon the fact that all involved services deliver valid HTML as their output.\\nOur solution is a small application which takes care of gathering the page fragments from all services and composing each into a defined HTML template.\\nA configuration layer further allows controlling which fragment gets pulled from the serving instance.</p>\\n<p>With such a page composing application in place, teams can autonomously develop, deploy and operate their service with the freedom of choosing technologies and release strategies.</p>\\n<p>Martin Fowler et al. described this as <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://martinfowler.com/articles/micro-frontends.html#Server-sideTemplateComposition\\">Server-side template composition</a>.</p>\\n","featured":true,"flag":"default","tags":["architecture"],"position":[477,156]},{"id":"pair-working","release":"2018-03-01","title":"Pair Working","ring":"trial","quadrant":"methods-and-patterns","body":"<p>We summarized the practices of pair programming and administrating as pair working.</p>\\n<p>Derived as a practice from eXtreme Programming (XP), pair programming is a method/pattern that aims for fine-scaled feedback within a team.</p>\\n<p>At AOE, some developers and operators work in pairs, not constantly, but from time to time. Most teams have positive experiences using this method, but not all teams tried the by-the-book-approach (driver and navigator principle). Especially for non-trivial tasks, pair working results in rapid knowledge exchange and better results with fewer bugs. We encourage the teams to try this approach more often.</p>\\n","featured":false,"flag":"default","position":[632,289]},{"id":"phan","release":"2018-03-01","title":"phan","ring":"assess","quadrant":"tools","body":"<p>Phan is a static code analyzer for PHP7, which is very fast, since it uses the PHP 7 AST (abstract syntax tree). Phan basically offers some of the safety that otherwise only compiled type-safe languages have - such as checking function references and return types.</p>\\n<p>We expect at least the following benefits:</p>\\n<ul>\\n<li>Decreased bug density; possible bugs and issues are found early</li>\\n<li>Safer code and higher code quality</li>\\n</ul>\\n<p>We think Phan can be used in the deployment pipeline or as commit hooks for PHP 7-based applications. For a full Feature list check <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/etsy/phan#features\\">here</a>.</p>\\n","featured":false,"flag":"default","position":[595,626]},{"id":"php7-over-php5","release":"2018-03-01","title":"PHP7 over PHP5","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p>PHP 5 has been around for a very long time, and can be considered as the PHP version that defined where PHP wants to go in the future.\\nWith proper OOP, support for clojures and a steadily improving type system, it has become a very mature language.\\nHowever, in the past 3 years, Facebook introduced HHVM, which became a major influence on PHP 7 and eventually brought a lot of improvements not only for the execution speed, but also with proper type hints and other features.</p>\\n<p>Here at AOE, we have numerous PHP projects, and we often kept it backwards-compatible to make sure that it will run on older systems. This is comparable to the procedure most frameworks (Magento, OroPlatform and derived projects) use.</p>\\n<p>Now, PHP 5 has reached its end--of-life, and it is time to discontinue the backwards-compatibility in favor of better and more stable applications.\\nEven though we can use the PHP 7 runtime while being PHP 5-compatible, it is not considered good practice anymore, as we can now rely on the PHP 7 features and use all of its advantages.</p>\\n<p>One of the major points PHP 7 supports is proper type hinting and return types (apart from PhpDocs), which makes <a href=\\"/digital_xp_techradar/tools/phan/\\">static analysis</a> much easier and can improve the overall code quality significantly.</p>\\n","featured":false,"flag":"default","position":[360,345]},{"id":"pin-external-dependencies","release":"2021-07-01","title":"Pin external dependencies","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>A lot of applications have dependencies on other modules or components. We have\\nused different approaches regarding how and when these dependencies are resolved\\nand have agreed on using a method we call &quot;Pin (External) dependencies&quot;.</p>\\n<p>This is especially relevant for script languages, where the dependency\\nmanagement references the code and not immutable prebuild binaries - and\\ntherefore resolves the complete transient dependencies on the fly.</p>\\n<p>Most of these package- or dependency management solutions support two artefacts:</p>\\n<ul>\\n<li>a semantic dependency definition. This defines the compatible versions of the\\nrequired dependencies. (Composer: composer.json / npm: package.json)</li>\\n<li>a lock file defining the exact revisions of the dependencies and the transient\\ndependencies (dependencies of dependencies). This is created after running the\\ntool. (Composer: composer.lock / npm: npm-shrinkwrap.json / yarn: yarn.lock).</li>\\n</ul>\\n<p>We suggest the following:</p>\\n<ul>\\n<li>Keep the dependency definition AND the lock file in version control. This\\nensures that chained dependencies are also locked and you have changes of that\\nfile visible in your version control commit history. This helps finding issues\\nor bugs that might relate to unintended updates in external modules or\\ntransient dependencies.</li>\\n<li>Build Step: The application build step should use the the pinned versions\\n(with the help of the lock file) to ensure that the same revisions of the\\ndependent packages are used.</li>\\n<li>It&#39;s also suggested to use local or central caches for the retrieval of\\npackages. (E.g.\\n<a href=\\"/digital_xp_techradar/platforms-and-operations/artifactory/\\">artifactory as composer and npm cache</a>)</li>\\n</ul>\\n<p>For updating of dependencies define a process in the team. This can either be\\ndone on the dev-system or in a separate automated CI job - both resulting in\\nupdated dependency definitions in the applications VCS.</p>\\n","featured":false,"flag":"default","position":[563,364]},{"id":"pipeline-as-code","release":"2023-11-01","title":"Pipeline as Code","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>In the past years many tools have evolved and especially <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://docs.gitlab.com/ee/ci/\\">Gitlab CI</a>,\\n<a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/features/actions\\">GitHub Actions</a> and <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://aws.amazon.com/de/codedeploy/\\">AWS CodeDeploy</a>\\nmatured or became available and widely used across many teams.</p>\\n<p>Continuous Integration and Delivery is an important part in every project. Pipelines which are maintained as code, can\\nnow be handled like most other parts of your software. The pipeline configuration can run through lint checks, or a test\\nsuite before the configuration is shared across teams in your organisation.</p>\\n<p>Using <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.aoe.com/techradar/methods-and-patterns/container-based-builds.html\\">container based builds</a> is now\\nalso the de facto standard. Combining these two techniques enables running isolated builds in an easily reproducible\\nenvironment so teams can get quick feedback on every change.</p>\\n","featured":false,"flag":"changed","tags":["devops"],"revisions":[{"release":"2018-03-01","ring":"adopt","body":"<p>We moved this pattern to <strong>adopt</strong>, because it is used by nearly every team and project now and is an important part of our automation.</p>\\n<p>For Jenkins, we often use a mix of Job DSL and Jenkins Pipelines and recently also used GitLab Pipelines.</p>\\n"},{"release":"2017-03-01","ring":"assess","body":"<p>Continuous Integration and Delivery is a critical part of our development and deployment process at AOE. Using Jenkins for many years the &quot;instructions&quot; how to build, test and deploy applications were scattered between many custom scripts and the pipeline was often maintained by manual maintenance of Jenkins jobs. Soon, we realized that we need a more native way to express the full CI/CD pipeline process in code and manage it in version control.</p>\\n<p>Being an important part of each project, the pipeline configuration should be managed as code and rolled out automatically - this also allows us to manage the pipeline itself applying the same standards that apply to application code.</p>\\n<p>While some teams started using Jenkins&#39; <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://wiki.jenkins-ci.org/display/JENKINS/Job+DSL+Plugin\\">JobDSL plugin,</a> others explored the new <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://jenkins.io/doc/book/pipeline/\\">Jenkins Pipeline</a> - in both ways, the build artifacts should be published to an artifact repository such as <a href=\\"/digital_xp_techradar/platforms-and-operations/artifactory/\\">Artifactory.</a></p>\\n"}],"position":[502,262]},{"id":"plant-uml","release":"2021-07-01","title":"Plant UML","ring":"adopt","quadrant":"tools","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://plantuml.com/\\">PlantUML</a> is an open source project that allows to create UML diagrams in a text-based and declarative way.</p>\\n<p>Since it is integrated in tools like Confluence, IntelliJ and GitLab we use it a lot to quickly document results of software design sessions.</p>\\n<p>Another similar tools that use just plain JavaScript to render the diagrams is <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://mermaid-js.github.io/mermaid/#/\\">mermaid</a></p>\\n","featured":false,"flag":"default","revisions":[{"release":"2019-11-01","ring":"trial","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://plantuml.com/\\">PlantUML</a> is an open source project that allows to create UML diagrams in a text-based and declarative way.</p>\\n<p>Since it is integrated in tools like Confluence, IntelliJ and GitLab we use it a lot to quickly document results of software design sessions.</p>\\n<p>Another similar tools that use just plain JavaScript to render the diagrams is <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://mermaid-js.github.io/mermaid/#/\\">mermaid</a></p>\\n"}],"position":[425,468]},{"id":"play-framework","release":"2019-11-01","title":"Play Framework","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p>The Play Framework is a lightweight (web)application framework for Java and <a href=\\"/digital_xp_techradar/languages-and-frameworks/scala-lang/\\">Scala</a> programmers.</p>\\n<p>A developer can choose from different modules to include necessary functionality such s accessing http resources, databases, and so on. As a consequence, the developer can choose, and is not distracted by or clobbered with irrelevant things. This approach is considered as minimalistic, but it is easy to include necessary functionality.</p>\\n<p>Regarding the architecture, Play is stateless and built on Akka. As a consequence, Play applications have much lower resource consumption regarding CPU und memory and can scale easily. Play manages concurrency without binding a request to a thread until the response is ready.</p>\\n<p>With the use of &quot;<a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://docs.scala-lang.org/overviews/core/futures.html\\">Futures</a>&quot; in your code you can turn synchronous tasks (such as IO or API call to another service) into asynchronous and you can build non-blocking applications. It is recommended to understand the principles Play uses to achieve performance and scalability.</p>\\n<p>Play can act as backend service delivering JSON, for example. For building web applications. The <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.playframework.com/documentation/2.5.x/ScalaTemplates\\">Twirl</a> template engine enables server-side rendering of HTML pages. These HTML pages can include CSS and JavaScript parts of your own choice.</p>\\n","featured":false,"flag":"default","position":[331,312]},{"id":"playwright","release":"2023-11-01","title":"Playwright","ring":"adopt","quadrant":"tools","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://playwright.dev\\">Playwright</a> is a versatile tool for creating reliable end-to-end tests across different browsers, platforms, and languages. It&#39;s easy to get started with and comes with a wide range of built-in features. Playwright works on Windows, macOS, and Linux and seamlessly integrates with popular testing frameworks like Jest, Mocha, and Jasmine.</p>\\n<p>Playwright&#39;s configuration offers valuable options, including native mobile emulation for Chrome on Android and Safari on iOS. It can also be extended using BDD tools like Cucumber or SpecFlow, allowing non-technical contributors to collaborate.</p>\\n<p>Playwright tests are robust, as they wait for elements before taking actions to eliminate timeouts, a common cause of unreliable tests.</p>\\n<p>In contrast to Cypress, Playwright excels at interacting with different origins and multiple tabs in tests. You can create scenarios with distinct contexts to handle various users within a test, saving authentication states for reuse in other tests, thus eliminating repetitive log-in operations.</p>\\n<p>Developed and maintained by Microsoft, Playwright benefits from extensions for Visual Studio Code, streamlining test development, execution, and debugging.</p>\\n<p>In summary, Playwright is a versatile testing tool offering compatibility, integration with testing frameworks, and advanced features like multi-origin interactions. Its robustness, ability to handle diverse scenarios, and close ties with Visual Studio Code make it an exceptional choice for end-to-end testing.</p>\\n","featured":true,"flag":"changed","tags":["coding","frontend","quality assurance"],"revisions":[{"release":"2023-02-23","ring":"trial","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://playwright.dev\\">Playwright</a> is a cross browser/platform/language tool to write reliable end-to-end tests. It&#39;s\\neasy to get started with and offers a broad variety of functionalities out of the box. Playwright supports Windows,\\nmacOS and Linux and works with the most popular testing frameworks such as Jest, Mocha and Jasmine.\\nThe playwright configuration offers plenty of helpful options, for instance native mobile emulation of Chrome for\\nAndroid and Safari for iOS. If needed playwright can be extended by BDD tools like Cucumber or SpecFlow to enable\\nnon-technical contributors to collaborate.</p>\\n<p>Playwright test are resilient. It waits for elements before performing any actions which eliminates the need for\\ntimeouts - the primary cause of flaky tests.</p>\\n<p>Other than Cypress Playwright can interact with different origins and multiple tabs. Also, you can create scenarios with\\ndifferent contexts to handle multiple users within one test. Contexts allow saving an authentication state to reuse it\\nin other tests. By isolating tests within a separate browser context for each test, the tests are fully independent,\\nalthough reusing an authentication state. This prevents you from performing repetitive log-in operations in each test.</p>\\n<p>As Playwright is developed and maintained by Microsoft there are some great extensions for Visual Studio Code to\\ndevelop, run and debug tests.</p>\\n"},{"release":"2022-03-28","ring":"assess","body":"<p>Playwright is a cross browser/platform/language tool to write reliable end-to-end tests. It waits for elements before performing any actions which eliminates the need for timeouts - the primary cause of flaky tests.</p>\\n"}],"position":[521,455]},{"id":"pnpm","release":"2023-11-01","title":"pnpm","ring":"adopt","quadrant":"tools","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://pnpm.io/motivation\\">pnpm</a> is an alternative tool to manage your frontend dependencies. Unlike yarn 1 it manages\\nall packages in a central place and creates symbolic links only inside the npm_modules of a project. This results in\\nconsiderably less usage of disk space and reduces build-times, when a package is already available.</p>\\n<p>Additionally, a cache server can be setup and used during pipeline builds to decrease network traffic and build times.</p>\\n","featured":false,"flag":"changed","tags":["coding","frontend"],"revisions":[{"release":"2023-02-23","ring":"assess","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://pnpm.io/motivation\\">pnpm</a> is an alternative tool to manage your frontend dependencies. Unlike yarn 1 it manages\\nall packages in a central place and creates symbolic links only inside the npm_modules of a project. This results in\\nconsiderably less usage of disk space and reduces build-times, when a package is already available.</p>\\n<p>Additionally, a cache server can be setup and used during pipeline builds to decrease network traffic and build times.</p>\\n"}],"position":[571,468]},{"id":"policy-as-code","release":"2023-02-23","title":"Policy as Code","ring":"trial","quadrant":"methods-and-patterns","body":"<p>With the rise of cloud infrastructure and DevOps practices, traditional methods of policy enforcement such as manual\\nreviews and audits are no longer sufficient. By using code to express policies for the entire infrastructure and\\napplication stack, automated compliance checks become a natural part of the software development lifecycle,\\ne.g. via integration into a projects&#39; CI/CD pipeline and could even prevent a configuration change or deployment\\nif a critical issue was found.</p>\\n<p>One of the key benefits of Policy as Code is the ability to catch potential issues before they become risks. For\\nexample, a policy could be defined to ensure that all S3 buckets are encrypted, or that all EC2 instances have a\\nspecific set of tags.</p>\\n<p>There are a number of tools and frameworks available for implementing Policy as Code. At AOE, we are mainly relying on\\n<a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.checkov.io/\\">Checkov</a>, <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://kyverno.io/\\">Kyverno</a> and <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://aws.amazon.com/config/\\">AWS Config</a>\\nat the time of writing. Each tool provides a way to define policies in code and then automate policy enforcement.\\nThey also provide visibility into the compliance status of infrastructure and application configurations.</p>\\n<p>By defining policies as code, development teams can ensure that policies are version-controlled, easily auditable,\\nand consistent across all environments.</p>\\n","featured":true,"flag":"default","tags":["devops","ci/cd"],"position":[616,344]},{"id":"ports-and-adapters","release":"2019-11-01","title":"Ports and Adapters","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>Updated to &quot;adopt&quot;</p>\\n","featured":true,"flag":"default","tags":["architecture"],"revisions":[{"release":"2018-03-01","ring":"trial","body":"<p>Ports and Adapters is an architecture or layering approach for software design. As with other layering approaches, it separates different concerns in different layers, where dependencies are only allowed from the outside to the inside.</p>\\n<p>We use &quot;ports and adapters&quot; with success for (larger) applications, which contain certain business logic and/or provide several ways to access the services.\\nWe often use the approach hand-in-hand with Domain Driven Design. In comparison with other layering patterns (e.g. layered architecture) it allows you to have a true technology-free core (domain) model. Why? Because, with the concept of &quot;secondary ports&quot; (=interfaces), it inverts the control and allows outer layers to provide adapters (=implementations of the defined interface).\\nIt also defines clear boundaries regarding where to put what logic of your application.</p>\\n<p>You can find out more about the details and its origins in well-known blog posts such as <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html\\">The Clean Architecture</a> or <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://alistair.cockburn.us/Hexagonal+architecture\\">Hexagonal architecture</a></p>\\n<p>In short, here is how we often layer such applications:</p>\\n<ul>\\n<li>Domain:<ul>\\n<li>Is the inner layer and contains the technology-free domain model</li>\\n<li>Often uses building blocks from Domain Driven Design</li>\\n<li>It defines primary and secondary ports. (E.g. a secondary port is in &quot;interface&quot; that needs to be implemented in the infrastructure layer.)</li>\\n</ul>\\n</li>\\n<li>Application:<ul>\\n<li>Contains the Application&#39;s API and Services, that are developed around the use cases in the application requirements.</li>\\n<li>These use cases orchestrate the flow of data to and from the domain</li>\\n</ul>\\n</li>\\n<li>Interfaces:<ul>\\n<li>Contain everything required to convert data from the format most-convenient for the use cases (e.g. in the application layer) to the format required for external agency/access</li>\\n<li>e.g. (Web) Controllers / DTOs for handling forms, etc.</li>\\n</ul>\\n</li>\\n<li>Infrastructure:<ul>\\n<li>This layer is where all the (technical) details live. (The database and persistence is a detail, the communication format and mappings with external services is a detail, etc.)</li>\\n<li>In this layer you typically have adapters for the secondary ports that have been defined in the layers below. (e.g. an Implementation of a Repository interface from the Domain layer)</li>\\n</ul>\\n</li>\\n</ul>\\n<p>These layers belong to every bounded context (modules) inside the application.</p>\\n<p>Are you searching for a potential timeless architecture for your critical application? Try implementing a potent technology-free domain model in the core layer and use ports and adapters to layer your application.</p>\\n"}],"position":[545,335]},{"id":"postcss","release":"2022-03-28","title":"PostCSS","ring":"adopt","quadrant":"tools","body":"<p>PostCSS is a tool for transforming stylesheets with JavaScript plugins. It comes with a parser that reads your CSS file into an AST, pipes it through the loaded plugins and finally stringifies it back into a (transformed) CSS output file.</p>\\n<p>We at AOE love PostCSS because it gives us the power to use <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/css-modules/css-modules\\">CSS Modules</a>, which finally ends the curse of global CSS.</p>\\n<p>It also has a huge list of more than 350 other <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://postcss.parts/\\">available plugins</a>.\\nSure, not all of them are useful, but the sheer number of plugins shows how easy it is to write your own plugin for it.\\nIn fact, it\xb4s just a matter of writing a single JS function.</p>\\n<p>Finally, PostCSS is very fast and easy to setup because it runs 100% in JavaScript.\\nCompared to <a href=\\"/digital_xp_techradar/languages-and-frameworks/sass/\\">Sass</a> as a preprocessor, it feels much more powerful but at the same time less bloated with superfluous functionality because everything comes in its own little plugin</p>\\n","featured":false,"flag":"default","position":[427,492]},{"id":"postgres","release":"2019-11-01","title":"PostgreSQL","ring":"adopt","quadrant":"tools","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.postgresql.org/\\">PostgreSQL</a> is a powerful, open source object-relational database system with over 30 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance.</p>\\n","featured":false,"flag":"default","position":[465,453]},{"id":"postman","release":"2021-07-01","title":"Postman","ring":"adopt","quadrant":"tools","body":"<p>Postman is now the tool of choice for API testing and widely used in our projects.\\nWe therefore moved it to the <strong>Adopt</strong> level.</p>\\n","featured":false,"flag":"default","revisions":[{"release":"2019-11-01","ring":"trial","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.getpostman.com/\\">Postman</a> is an API testing and documentation tool.\\nRequests can be bundled into folders and easily be configured to be executed against multiple environments.\\nResponses can be evaluated using the &quot;test&quot; feature.</p>\\n<p>Even automated testing is possible using <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.npmjs.com/package/newman\\">Newman</a> as an addition to Postman.</p>\\n"}],"position":[436,547]},{"id":"protobuf","release":"2021-07-01","title":"Protobuf","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p>In an increasingly microservice-oriented environment, it is crucial that all parties agree on a common language and wire format for data exchange.</p>\\n<p>JSON and XML are two well-known formats for serialization of data; however, they come with a few drawbacks. JSON is completely dynamic without any validation (though there is json-schema) and XML uses an extremely heavyweight syntax, which carries a huge overhead, so parsing and transport becomes quite slow.</p>\\n<p>Protobuf, amongst others, is an approach to solving this problem by using well-defined schemas to create language-specific code, which serializes/marshals and deserializes/unmarshals data. One of the key features is the built-in support for evolving schemas; it is easily possible to incrementally extend the definition while staying backwards-compatible and compose messages consisting of several sub-messages.</p>\\n<p>If you are looking for a way to have different systems agree on a common protocol on top of a transport layer (such as AMQP or HTTP), Protobuf is definitely worth examining more closely and should be assessed.</p>\\n","featured":false,"flag":"default","revisions":[{"release":"2019-11-01","ring":"assess","body":""},{"release":"2017-03-01","ring":"assess","body":"<p>In an increasingly microservice-oriented environment, it is crucial that all parties agree on a common language and wire format for data exchange.</p>\\n<p>JSON and XML are two well-known formats for serialization of data; however, they come with a few drawbacks. JSON is completely dynamic without any validation (though there is json-schema) and XML uses an extremely heavyweight syntax, which carries a huge overhead, so parsing and transport becomes quite slow.</p>\\n<p>Protobuf, amongst others, is an approach to solving this problem by using well-defined schemas to create language-specific code, which serializes/marshals and deserializes/unmarshals data. One of the key features is the built-in support for evolving schemas; it is easily possible to incrementally extend the definition while staying backwards-compatible and compose messages consisting of several sub-messages.</p>\\n<p>If you are looking for a way to have different systems agree on a common protocol on top of a transport layer (such as AMQP or HTTP), Protobuf is definitely worth examining more closely and should be assessed.</p>\\n"}],"position":[379,298]},{"id":"rabbitmq","release":"2022-03-28","title":"RabbitMQ","ring":"adopt","quadrant":"tools","body":"<p>RabbitMQ has proven to work very well for messaging in our projects, that is why we updated it to &quot;adopt&quot;.</p>\\n","featured":false,"flag":"default","revisions":[{"release":"2017-03-01","ring":"trial","body":"<p>RabbitMQ is an Open Source message broker - implementing the Advanced Message Queuing Protocol (AMQP) protocol. It provides a reliable and scalable way to transport data between loosely coupled applications, using different EAI patterns such as the Publish &amp; Subscriber pattern. AMQP supports direct and fan-out exchanges (broadcasts) as well as topics. Queuing mechanisms allow for robust architectures, mitigating the risks of application downtimes. Typically, a RabbitMQ server can easily buffer millions of messages. RabbitMQ supports JMS in addition to AMQP. It is not intended to use JMS for new systems, but it makes RabbitMQ useful for integrating legacy systems.</p>\\n<p>There are several alternative solutions to RabbitMQ, e. g. the free Apache ActiveMQ, which is integrated in <a href=\\"/digital_xp_techradar/tools/anypoint-platform/\\">Anypoint platform</a>. ActiveMQ implements a somewhat simpler routing concept than RabbitMQ, but offers more protocols. Commercial products in this area are offered by IBM (Websphere MQ), Fiorano and almost every vendor of ESB products.</p>\\n<p>We use RabbitMQ internally for transferring messages safely in our logging ecosystem between <a href=\\"/digital_xp_techradar/platforms-and-operations/elk-stack/\\">Logstash</a> proxies and servers using direct and fan-out exchanges for delivering messages to appropriate destinations. RabbitMQ is also used to asynchronously trigger Jenkins jobs from our SCMs to mitigate heavy load on the SCMs, usually caused by Jenkins polls for SCM changes. Additionally, some critical events for monitoring are using RabbitMQ for guaranteed notification. </p>\\n<p>RabbitMQ is rated &quot;Trial&quot;. It fits into our approach to build robust, <a href=\\"/digital_xp_techradar/methods-and-patterns/resilience-thinking/\\">resilient systems</a> and use <a href=\\"/digital_xp_techradar/methods-and-patterns/decoupling-infrastructure-via-messaging/\\">asynchronous messages</a> for loosely coupled communications between components. In practice, RabbitMQ proved to be stable and dealt well with service interruptions from failures and maintenance slots. A common pain point is RabbitMQ as a single point of failure disrupting the data flow in a system. This issue is currently approached by setting up a HA cluster for RabbitMQ. The outcome of this approach will clarify the extent of future usage of RabbitMQ in our systems.</p>\\n"}],"position":[503,442]},{"id":"raml","release":"2022-03-28","title":"RAML","ring":"hold","quadrant":"languages-and-frameworks","body":"<p>Since the RAML project has decided to <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://blogs.mulesoft.com/dev/api-dev/open-api-raml-better-together/\\">join</a> the OpenAPI initiative and the RAML ecosystem lacks further development and additional tools, we decided to use and recommend using <a href=\\"/digital_xp_techradar/tools/open-api/\\">&quot;OpenAPI specification (OAS)&quot;</a> as description standard instead.</p>\\n<p>RAML still provides advantages in modeling an API through it&#39;s more expressive modeling language and can produce OAS</p>\\n","featured":false,"flag":"default","revisions":[{"release":"2017-03-01","ring":"adopt","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://raml.org/\\">RAML</a> (the RESTful API Modelling Language) is a YAML-based API specification language. It&#39;s now available in <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/raml-org/raml-spec/blob/master/versions/raml-10/raml-10.md#defining-types\\">version 1.0</a>. The philosophy behind it is to <a href=\\"/digital_xp_techradar/methods-and-patterns/api-first-design-approach/\\">specify the API before implementation</a>.</p>\\n<p>If you follow this philosophy, you can design your API and discuss it with your clients and team before implementing a single line of code. API consumers are able to implement against the API before it&#39;s really up and running. The <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/mulesoft/api-console\\">api-console</a> provides a beautiful online documentation with &quot;try it&quot; features for your raml definition.</p>\\n<p>The RAML ecosystem provides a rich toolset for code generation (e.g. <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://rawgit.com/mulesoft/api-designer/master/dist/index.html#/?xDisableProxy=true\\">online editor</a>;<a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://apiworkbench.com/\\"> api-workbench</a>), automatically generated documentation, code generation (e.g. <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/Jumpscale/go-raml\\">go-raml</a>), mocking, testing and much more. We prefer RAML over Swagger because of this.</p>\\n"}],"position":[133,154]},{"id":"react-native","release":"2023-11-01","title":"React Native","ring":"assess","quadrant":"languages-and-frameworks","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://reactnative.dev/\\">React Native</a> is an open-source UI software framework used to build applications for Android, Android TV, iOS, macOS, tvOS, Web, Windows, and UWP. It enables developers to utilize the React framework alongside native platform features.</p>\\n<p>Developing applications with a single codebase can help ensure consistent user experiences across platforms, while also delivering the performance advantages of native code.</p>\\n","featured":true,"flag":"new","tags":["coding","frontend"],"position":[211,138]},{"id":"react-server-components","release":"2023-11-01","title":"React Server Components","ring":"assess","quadrant":"methods-and-patterns","body":"<p>Shortly after releasing React 17 in October 2020, the team introduced React Server Components (RSC) as a working draft in December 2020. RSCs represent a new application architecture paradigm within React designed to reduce the amount of JavaScript sent to the client. The ultimate goal is to enhance performance, user experience, and maintainability.</p>\\n<p>This new feature enables the creation of components that exclusively run on the server. As a result, there is no impact on the bundle size downloaded by the client. For instance, libraries used in server components are not shipped to the client. RSCs also have the capability to access server-side resources, such as databases and the file system, directly.</p>\\n<p>In addition to server components, there are client components, which are essentially the classic components everyone is familiar with. The only distinction is that client components need to be explicitly declared using a directive. Determining which components should be client or server can be one of the more challenging aspects, especially when the goal is to migrate existing applications.</p>\\n<p>RSCs appear to be most effective when used with Server Side Rendering, although it is possible to use them without it. RSCs and Server Side Rendering complement each other well, as server components are only rendered once on the server and do not need to be sent to the client. Client components are still rendered on the server and then hydrated on the client side. However, with a well-structured application that minimizes client-side code and in combination with React 18&#39;s <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/reactwg/react-18/discussions/37\\">Suspense and Selective Hydration</a> features, a performance boost is expected. To test this hypothesis, the React team has collaborated with Vercel, the maintainer of <a href=\\"/digital_xp_techradar/languages-and-frameworks/next-js/\\">NextJS</a>, to integrate RSCs into a suitable environment early.</p>\\n<p>Overall, we recognize the potential of this new approach, even though there are several steps to take, particularly for meta-frameworks to achieve production readiness. It appears to be only a matter of time before adoption of React Server Components becomes widespread. This is why we have placed it in the assess ring, keeping a watchful eye on this evolving technology.</p>\\n","featured":true,"flag":"new","tags":["frontend","coding"],"position":[702,341]},{"id":"react","release":"2023-11-01","title":"React.js","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p>React today is the most widely used frontend library within our company, employed in various forms. Whether it&#39;s integrated into frameworks like <a href=\\"/digital_xp_techradar/languages-and-frameworks/next-js/\\">NextJS</a> and <a href=\\"/digital_xp_techradar/languages-and-frameworks/remix/\\">Remix</a> or utilized for client-side-only applications, React plays a significant role in many of our ongoing projects. Over time, a community of experts has emerged within the company.</p>\\n<p>We firmly believe that React 18, with its range of new features, will further enhance its popularity within our company and the broader community.</p>\\n<h3>Suspense</h3>\\n<p>While not an entirely new feature, Suspense was initially introduced in a basic version back in 2018. However, it had certain limitations. Its first official use case was code splitting with <code>React.lazy</code>, but this feature was only available on the client side, not during server rendering. The primary goal has always been to enhance the loading experience both on the client and server. With React 18, Suspense now enables Streaming server rendering, a new feature that allows React to send the HTML of the loading fallback first and then, after loading completes, send the actual HTML content to the client. The React team continues to work on improving Suspense, particularly to enable data fetching libraries to use it. They are collaborating with authors of some of the most prominent libraries like TanStack Query, SWR, and Apollo.</p>\\n<h3>Server Components</h3>\\n<p>Server Components represent a new paradigm in React application architecture with the goal of minimizing the amount of JavaScript sent to the client. This approach introduces a new type of component that operates exclusively on the server. It shows great promise, which is why we have given <a href=\\"/digital_xp_techradar/methods-and-patterns/react-server-components/\\">React Server Components</a> a dedicated entry on our Tech Radar.</p>\\n<h3>Concurrency</h3>\\n<p>This is a fundamental update to React&#39;s rendering model, primarily occurring under the hood. It introduces the ability to create multiple versions of a user interface concurrently. With concurrent React, rendering can be interrupted, abandoned, and resumed, allowing the application to respond to user interactions immediately, even if it&#39;s currently in the middle of rendering.</p>\\n<p>The React team is collaborating closely with some of the major players in the React ecosystem to stabilize and enhance the library. They are also experimenting with new features, ensuring that React remains as exciting as ever.</p>\\n","featured":true,"flag":"changed","tags":["coding","frontend"],"revisions":[{"release":"2018-03-01","ring":"adopt","body":"<p>The past months have shown that React is still a great fit for us for frontend-heavy applications. \\nWith its rewritten core in version 16, Facebook shows how important this framework is for them. \\nTherefore, Facebook is investing a lot of effort into React and a healthy community. \\nIn addition, we <strong>REALLY</strong> enjoy writing React components – so much so, that we have to move this library into <strong>adopt</strong>!</p>\\n"},{"release":"2017-03-01","ring":"trial","body":"<p>React claims to be &quot;the V in MVC&quot;. But for us it is much more than that. React\\nimproved the way we approach frontend applications as we build them. Its\\nfunctional way of writing components and its declarative JSX syntax help us to\\nbuild interactive UIs very efficiently. React&#39;s one-way data flow keeps\\neverything modular and fast and makes even large applications more readable.</p>\\n<p>Components are the central point of React - once we fully started\\n<a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://facebook.github.io/react/docs/thinking-in-react.html\\">thinking in react</a>,\\nour components became smaller, more reusable and better testable.</p>\\n<p>After some 1.5 years of experience with React and the steady growth of the\\ncommunity and ecosystem around it, we can confidently say that we still see\\ngreat potential to build upcoming projects with React.</p>\\n"}],"position":[308,282]},{"id":"reactive-programming","release":"2022-03-28","title":"Reactive Programming","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>The reactive style of programming promotes event-based thinking and modeling - and by that assists in creating more decoupled solutions.</p>\\n<p>Synergies arise, when people understand the concepts of this pattern: by using marble diagrams, which are a de-facto standard in visualizing algorithms in a reactive style, a common ground for communication is available regardless of the programming language used.</p>\\n<p>When appropriate, we choose more explicitly the Reactive Programming pattern and therefore moved this to &quot;adopt&quot;.</p>\\n","featured":false,"flag":"default","revisions":[{"release":"2018-03-01","ring":"trial","body":"<p>Classic (web-)applications typically consist of transactions that submit large forms to the server side, which then processes these and, in response, returns HTML for the browser to render. \\nToday&#39;s applications have more and more fine-grained &#39;real-time&#39;-like aspects: A simple modification of a form field could trigger a complete round trip to the server including other services and persistence. \\nNaturally, all of these transactions should respect the expectations of a user who wants a highly interactive application.</p>\\n<p>&quot;Reactive Programming&quot; tries to provide an answer to the challenges mentioned above by raising the level of abstraction. \\nThis allows you to focus on the stream of events that make up your business logic in a responsive, asynchronous fashion.</p>\\n<p>There are various descriptions of what Reactive Programming actually is - at the most general level it is programming with asynchronous data streams and contains tools to create, manipulate, combine and filter these streams. \\nUnder the term &quot;Reactive Programming&quot;, we summarize the principles and implementations that underlie <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://reactivex.io/\\">ReactiveX</a> and the <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.reactivemanifesto.org/\\">Reactive Manifesto</a>. </p>\\n<p>&quot;Reactive Programming&quot; is employed in many of our services – frontend and backend – but not always as an explicitly chosen pattern. \\nAs different platforms have different means to tackle this style of programming, we choose to include &quot;Reactive Programming&quot; as a general Method and Patterns Item in addition to concrete libraries and APIs such as <a href=\\"languages-and-frameworks/rxjs.html\\">Rx.JS</a> or <a href=\\"/digital_xp_techradar/languages-and-frameworks/akka-streams/\\">Akka Streams</a> to highlight the importance of the approach in general.</p>\\n"}],"position":[470,264]},{"id":"redux","release":"2021-07-01","title":"Redux","ring":"trial","quadrant":"languages-and-frameworks","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://redux.js.org/\\">Redux</a> helps us to maintain state in our frontend applications in a more predictable and clearer way. It is extendable though middleware, it has a great documentation and some awesome <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/gaearon/redux-devtools\\">devtools</a> that are especially helpful when you are new to Redux.</p>\\n<p>The functional concepts for updating the state, combined with immutable data, lead to extremely easy and enjoyable <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://redux.js.org/docs/recipes/WritingTests.html\\">unit tests</a> - this is maybe the biggest plus for us developers.</p>\\n<p>The official <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/reactjs/react-redux\\">react-redux bindings</a> also made it straightforward to weave Redux into our React applications. For asynchronous actions we use <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://redux-saga.github.io/redux-saga/\\">redux-sagas</a> which has proven itself as a better alternative for <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/gaearon/redux-thunk\\">redux-thunk</a>.</p>\\n<p>Currently, we use Redux only in our React projects, but we are evaluating it together with other frameworks such as Angular or Vue.js, as well.</p>\\n","featured":false,"flag":"default","position":[232,254]},{"id":"remix","release":"2023-02-23","title":"Remix","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p>Updated to &quot;adopt&quot;</p>\\n","featured":true,"flag":"default","tags":["coding","frontend"],"revisions":[{"release":"2022-03-28","ring":"trial","body":"<p>Remix is a full stack web framework that lets us focus on the user interface and work with web standards.</p>\\n<p>One of Remix biggest features is the availability of nested routes. Through nested routes, Remix can eliminate nearly\\nevery loading state.</p>\\n<p>Most web apps fetch inside of components, creating request waterfalls which leads to slower page loads. Remix loads data\\nin parallel on the server and sends a fully formed HTML document</p>\\n<p>At AOE we use Remix for our enterprise web applications to provide a first class UX and fast page loads.</p>\\n"}],"position":[367,238]},{"id":"renovate","release":"2022-03-28","title":"Renovate","ring":"adopt","quadrant":"tools","body":"<p>At AOE, we rely on <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.npmjs.com/package/renovate/\\">Renovate CLI tool</a> in the CI pipelines for most of our projects.</p>\\n","featured":true,"flag":"default","tags":["ci/cd"],"revisions":[{"release":"2021-07-01","ring":"trial","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/renovatebot/renovate/\\">Renovate</a> is an automated dependency update tool.\\nIt vastly reduces the time and effort spent on keeping a project&#39;s dependencies up-to-date by automatically creating merge requests whenever a dependency needs to be updated.\\nThe tool is easy to set up and configure, offers built-in support for monorepo architectures and works with various programming languages and package managers, e.g.</p>\\n<ul>\\n<li>JavaScript &amp; Yarn</li>\\n<li>Java &amp; Gradle</li>\\n<li>PHP &amp; Composer</li>\\n</ul>\\n<p>At AOE, we use the <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.npmjs.com/package/renovate/\\">Renovate CLI tool</a> in the CI pipelines of a constantly growing number of projects.</p>\\n"}],"position":[448,412]},{"id":"resilience-thinking","release":"2022-03-28","title":"Resilience Thinking","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>Resilience is the capability of an application or service to resist different error scenarios. Especially for\\ndistributed systems - where a lot of communication between different services happen - it&#39;s very important to explicitly\\nthink of implementing resilience.</p>\\n<p>There are a lot of different resilience patterns, and it is also a matter of the overall software design. Typical\\npatterns and methods used are:</p>\\n<ul>\\n<li>Do not hide API calls or any other external communication in your application (for example with unnecessary\\nabstraction) - instead make it explicit that an external communication happens - e.g. by using the Facade Pattern. On\\nthe one hand, this makes it obvious that a potential slow and error-prone communication is going to happen, and it\\nmakes it easier to implement error handling.</li>\\n<li>Detect errors explicitly: Check the response message format and configure proper timeouts for external communication</li>\\n<li>Handle errors in a smart way: Show a nice error message to your customer or, even better, graceful degrade features -\\ne.g. by showing some fallback text</li>\\n<li>Use message-based communication where useful (<a href=\\"/digital_xp_techradar/methods-and-patterns/decoupling-infrastructure-via-messaging/\\">Decoupling Infrastructure via Messaging</a>)</li>\\n<li>Use circuit breakers to isolate errors and allow systems to recover</li>\\n<li>Use short activation paths in your strategic architecture - so that there is only a minimal set of communications\\nbetween your services required for certain features or business requests</li>\\n</ul>\\n<p>&quot;Embrace Errors&quot; should be the mindset - because it is not a question if errors appear - it&#39;s just a question of when.</p>\\n","featured":true,"flag":"default","tags":["architecture"],"revisions":[{"release":"2017-03-01","ring":"trial","body":"<p>Resilience is the capability of an application or service to resist different error scenarios. Especially for distributed systems - where a lot of communication between different services happen - it&#39;s very important to explicitly think of implementing resilience.</p>\\n<p>There are a lot of different resilience patterns and it is also a matter of the overall software design. Typical patterns and methods used are:</p>\\n<ul>\\n<li>Do not hide API calls or any other external communication in your application (for example with unnecessary abstraction) - instead make it explicit that an external communication happens - e.g. by using the Facade Pattern. On the one hand, this makes it obvious that a potential slow and error prone communication is going to happen, and it makes it easier to implement error handling.</li>\\n<li>Detect errors explicitly: Check the response message format and configure proper timeouts for external communication</li>\\n<li>Handle errors in a smart way: Show a nice error message to your customer or, even better, graceful degrade features - e.g. by showing some fallback text</li>\\n<li>Use Message-based communication where useful (<a href=\\"/digital_xp_techradar/methods-and-patterns/decoupling-infrastructure-via-messaging/\\">Decoupling Infrastructure via Messaging</a>)</li>\\n<li>Use Circuit Breaker to Isolate errors and allow system to recover</li>\\n<li>Use short activation paths in your strategic architecture - so that there is only a minimal set of communications between your services required for certain features or business requests</li>\\n</ul>\\n<p>&quot;Embrace Errors&quot; should be the mindset - because it is not a question if errors appear - it&#39;s just a question of when.</p>\\n"}],"position":[527,280]},{"id":"rest-assured","release":"2022-03-28","title":"REST Assured","ring":"assess","quadrant":"tools","body":"<p><strong><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/rest-assured/rest-assured\\">REST Assured</a></strong> is a Java DSL for simplifying testing of REST-based services built on top of HTTP Builder.\\nIt supports the most important HTTP request methods and can be used to validate and verify the response of these requests.</p>\\n<p>At AOE, we use REST Assured with Spock to automate our API testing.\\nWe appreciate the easy-to-use DSL, which uses the Given-When-Then template (also known as Gherkin language).\\nThis template helps other project members to understand the code/test easily.</p>\\n<p>Because of the seamless integration with Spock and our positive experience in one of our major projects, we classify REST Assured as <em>assess.</em></p>\\n","featured":false,"flag":"default","position":[583,667]},{"id":"rust","release":"2022-03-28","title":"Rust","ring":"assess","quadrant":"languages-and-frameworks","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.rust-lang.org/\\">Rust</a> is a young and modern programming language initially developed by <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://research.mozilla.org/\\">Mozilla Research</a>.</p>\\n<p>It provides a strict type system, compile-time memory-safety, excellent <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://doc.rust-lang.org/cargo/\\">package manager</a>, object-oriented &amp; functional programming, task-based concurrency, good readability and maintainability and many more.\\nIt has a C/C++ <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://greenlab.di.uminho.pt/wp-content/uploads/2017/10/sleFinal.pdf\\">comparable efficiency</a> and helps the programmer to avoid unnecessary security-relevant memory-related bugs during compile-time.\\nSince every memory-allocation is directly released after it can&#39;t be used anymore (<a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://medium.com/@rabin_gaire/memory-management-rust-cf65c8465570\\">owner deletion</a>), no garbage collection is needed.</p>\\n<p>C/C++ code/libraries can be integrated by its <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/rust-lang/rust-bindgen\\">binding generator tool</a>.</p>\\n<p>At stackoverflow it is votes 5 years in a row (<a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://insights.stackoverflow.com/survey/2016#technology-most-loved-dreaded-and-wanted\\">2016</a>, <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://insights.stackoverflow.com/survey/2017#technology-_-most-loved-dreaded-and-wanted-languages\\">2017</a>, <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://insights.stackoverflow.com/survey/2018#technology-_-most-loved-dreaded-and-wanted-languages\\">2018</a>, <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://insights.stackoverflow.com/survey/2019#technology-_-most-loved-dreaded-and-wanted-languages\\">2019</a>, <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-languages-loved\\">2020</a>) for the <code>most loved programming-language</code> by programmers.\\nThe <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-languages-loved\\">popularity</a> is growing continuous.</p>\\n<p>With it&#39;s memory-safety/efficiency and energy-efficiency it helps to save money for bug-fixing, energy and cloud-computing.</p>\\n","featured":false,"flag":"default","position":[189,163]},{"id":"rxjava","release":"2017-03-01","title":"RxJava","ring":"trial","quadrant":"tools","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/ReactiveX/RxJava\\">RxJava</a> is the Open Source Java implementation of ReactiveX. The main concept heavily relies on the Observer- (and Subscriber)-Pattern. An Observer emits a stream of data, which can be consumed by Subscribers. The Subscriber reacts (That&#39;s where the &#39;Rx&#39; comes from) asynchronously to those data events. Reactive Extensions were originally developed by Mircosoft&#39;s Erik Meijer and his team and have been ported to all major programming languages after being released to the public as Open Source software. We use RxJava (but actually RxAndroid to be precise) in the Congstar Android App to let the UI layer react to changes in the underlying data layer.</p>\\n","featured":true,"flag":"default","tags":["coding","architecture"],"position":[644,483]},{"id":"rxjs","release":"2022-03-28","title":"RxJs","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p>RX/JS aka reactive streams</p>\\n<p>RxJS is an implementation for the reactive programming paradigm which implements mostly the observer and iterator pattern and follows the functional programming ideas.\\nThe pattern actually got a renaissance because it&#39;s not completely new but has new implementations in many frameworks and languages like Angular, Akka, Spring and many more.\\nReason for that attention actually is (in the JavaScript world), that observables can be cancelled (by rules too) and observables can pass (stream) data on multiple events.\\nBoth aspects are not well realizable using promises e.g. and both were also detected as a huge limitation in the JavaScript community — and so it&#39;s worth to get an understanding for reactive programming in general.</p>\\n<p>We at AOE actually use RxJS in combination with Angular and can fully recommend the approach of observables.</p>\\n","featured":false,"flag":"default","revisions":[{"release":"2017-03-01","ring":"trial","body":"<p>RX/JS aka reactive streams</p>\\n<p>RxJS is an implementation for the reactive programming paradigm which implements mostly the observer and iterator pattern and follows the functional programming ideas.\\nThe pattern actually got a renaissance because it&#39;s not completely new but has new implementations in many frameworks and languages like Angular, Akka, Spring and many more.</p>\\n<p>Reason for that attention actually is (in the JavaScript world), that observables can be cancelled (by rules too) and  observables can pass (stream) data on multiple events.\\nBoth aspects are not well realizable using promises e.g. and both were also detected as a huge limitation in the JavaScript community — and so it&#39;s worth to get an understanding for reactive programming in general.</p>\\n<p>We at AOE actually use RxJS in combination with Angular and think that it&#39;s worth to dive deeper into this paradigm.</p>\\n"}],"position":[366,392]},{"id":"sass","release":"2022-03-28","title":"Sass","ring":"hold","quadrant":"languages-and-frameworks","body":"<p>Since the heydays of Sass, the requirements for styling solutions have changed.</p>\\n<p>With modern solutions like <a href=\\"/digital_xp_techradar/methods-and-patterns/css-in-js/\\">CSS-in-JS</a>,\\n<a href=\\"/digital_xp_techradar/languages-and-frameworks/tailwindcss/\\">Tailwind</a> or <a href=\\"/digital_xp_techradar/tools/postcss/\\">PostCSS</a>, you get scoped CSS out of the\\nbox and can get rid of the manual and therefore error-prone BEM methodology. Furthermore, mapping class names to\\nelements is no longer necessary.</p>\\n<p>In general the modern solutions bring a better and more robust developer experience. Therefore, we put Sass on hold.</p>\\n","featured":false,"flag":"default","revisions":[{"release":"2017-03-01","ring":"adopt","body":"<p>Sass (Syntactically Awesome Style-Sheets) is an extension to native CSS, which, as a preprocessor, simplifies the generation of CSS by offering features that enable developers to more efficiently write robust, better readable and maintainable CSS.</p>\\n<p>Core features of Sass are:</p>\\n<ul>\\n<li>Nesting of rules: CSS rules can be indented, reducing redundancy of selectors and increasing readability due to shorter selectors.</li>\\n<li>Use of variables: Commonly-used values such as colors can be stored in variables</li>\\n<li>Mixins: Often-used CSS blocks can be referenced by using mixins, which work like functions</li>\\n<li>Extends: CSS properties can be inherited</li>\\n<li>Sass files can be split into modules, which leads to smaller files and better file structures</li>\\n<li>Operators: Simple math calculations can be applied to CSS properties</li>\\n<li>Easily to integrate in nodejs-environments and build tools such as <a href=\\"/digital_xp_techradar/tools/npm/\\">npm</a>, <a href=\\"/digital_xp_techradar/tools/gulp/\\">Gulp</a> and <a href=\\"/digital_xp_techradar/tools/grunt/\\">Grunt</a>.</li>\\n</ul>\\n<p>Sass has been widely adopted for many years and has evolved to an industry-standard backed by an active community since 2006.</p>\\n<p>The learning curve is very smooth as Sass is fully compatible to CSS, meaning that all features are optional:\\nStarting with Sass is as easy as renaming .css-files to .scss in a first step and then refactoring it step-by-step with the use of Sass features.</p>\\n<p>At AOE, Sass has been recommended by the frontend COI and is used in nearly every current project.</p>\\n<p>More information:</p>\\n<ul>\\n<li><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://sass-lang.com/\\">Sass Language</a></li>\\n<li><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://sassdoc.com/\\">SassDoc</a></li>\\n<li><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.theguardian.com/info/developer-blog/2014/may/13/improving-sass-code-quality-on-theguardiancom\\">Improving Sass code quality on</a> <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://theguardian.com\\">theguardian.com</a></li>\\n</ul>\\n"}],"position":[179,96]},{"id":"scala3","release":"2022-03-28","title":"Scala 3","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p>Following up on the previous &#39;trial&#39; we will move our existing Scala codebase to\\nScala 3 where possible. Some Frameworks like Play will need some time to allow\\nus moving but for our smaller services a migration is possible.</p>\\n","featured":true,"flag":"default","tags":["coding"],"revisions":[{"release":"2021-07-01","ring":"trial","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://docs.scala-lang.org/scala3/\\">Scala 3</a> is the successor of the Scala 2.x series programming language.</p>\\n<p>It&#39;s not just a small iteration on Scala 2 but a complete overhaul of the language trying to improve in several areas like:</p>\\n<ul>\\n<li>Syntax<ul>\\n<li>&quot;quiet&quot; syntax for control structures like <code>if</code>, <code>while</code> and <code>for</code></li>\\n<li>optional <code>new</code> operator</li>\\n<li>Optional braces with significant-indentation syntax like in python</li>\\n<li>Completely revised <code>implicit</code>s - see below</li>\\n</ul>\\n</li>\\n<li>Contextual Abstractions focusing on intent instead of mechanics<ul>\\n<li>Abstracting over contextual information with <code>using</code></li>\\n<li>Providing type-class instances via <code>given</code></li>\\n<li>direct extension method syntax <code>extension (s: String) def pirate: String = s&quot;$s arr!&quot;</code></li>\\n</ul>\\n</li>\\n<li>Type System improvements<ul>\\n<li><code>enum</code>s </li>\\n<li>opaque types</li>\\n<li>intersection and union types</li>\\n<li>dependent function types</li>\\n<li>polymorphic function types</li>\\n<li>type lambdas</li>\\n<li>match types</li>\\n</ul>\\n</li>\\n<li>Improvements for object oriented design</li>\\n<li>Completely new metaprogramming facilities while Scala 2 macros were removed</li>\\n</ul>\\n<p>Even with these big changes Scala 3 provides a great compatibility story supporting Scala &gt;2.13.5 libraries in Scala 3 projects and vice versa.</p>\\n<p>Although slowly we will update our existing Scala 2 codebase to Scala 3 over the next months and years to take advantage of the improvements made.</p>\\n"}],"position":[288,255]},{"id":"scala-lang","release":"2022-03-28","title":"Scala Lang","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p>Scala is used in many projects at AOE. We have therefore moved it to the <strong>adopt</strong> level.</p>\\n","featured":false,"flag":"default","revisions":[{"release":"2017-03-01","ring":"trial","body":"<p>Besides Java, Scala is the most mature language on the Java Virtual Machine. Its unique blend of object-oriented and functional language features and rich type system with advanced type inference enables one to write concise code.</p>\\n<p>It is fully interoperable with Java but has a big ecosystem of tools and frameworks on its own.</p>\\n<p>Scala provides one of the best high-level concurrency- and async features on the language level as well as on the framework level, making it the default choice of twitter and the like.</p>\\n<p>At AOE, we already use Scala in various projects to create scalable backend systems (Play, Akka) or for batch processing (Spark).</p>\\n"}],"position":[234,370]},{"id":"semver2","release":"2021-07-01","title":"Semantic Versioning 2.0","ring":"adopt","quadrant":"methods-and-patterns","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://semver.org/spec/v2.0.0.html\\">Semantic Versioning 2.0</a> is a scheme for specifying a software&#39;s version.\\nAs the de facto standard, this is widely used and established in all areas of software development.\\nIt offers a clear way of communicating changes over the lifetime of the software being developed.</p>\\n<p>Especially in large-scale projects with many components being dependent on each other, it is important to use unambiguous communication across teams.</p>\\n","featured":false,"flag":"default","position":[418,328]},{"id":"semanticore","release":"2023-02-23","title":"Semanticore","ring":"adopt","quadrant":"tools","body":"<p>Updated to adopt.</p>\\n","featured":true,"flag":"default","tags":["ci/cd","documentation","quality assurance"],"revisions":[{"release":"2022-03-28","ring":"trial","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/AOEpeople/semanticore\\">Semanticore</a> is an open source tool fulfilling our needs for managing\\nchangelogs and semantic releases.</p>\\n<p>Build upon git histories and conventional commits, Semanticore creates and maintains changelogs using Gitlab or GitHub\\nmerge requests, and, once merged, creates appropriate tags and releases. Automating this workflow improves our daily\\nwork a lot, and always gives us a clear view on outstanding changes as well as a proper-maintained changelog.</p>\\n<p>Check out our Semanticore repository at <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/AOEpeople/semanticore\\">https://github.com/AOEpeople/semanticore</a> or run it locally for testing purposes:</p>\\n<pre><code>$ cd ~/path/to/my/repository\\n$ go run github.com/aoepeople/semanticore@v0\\n</code></pre>"}],"position":[417,421]},{"id":"serverless","release":"2023-11-01","title":"Serverless","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>The serverless pattern, also referred to as Function as a Service (FaaS), represents a paradigm shift in cloud computing. It enables developers to focus solely on writing code, which is executed in response to events without having to manage the underlying servers or infrastructure. Serverless applications are composed of multiple individual functions or microservices that automatically scale in response to demand.</p>\\n<p>At AOE, we encourage our development teams to adopt the serverless pattern for its increased scalability, reduced operational overhead, and cost-effectiveness.</p>\\n<h3>Common Tools for Developing and Deploying Serverless Applications</h3>\\n<ul>\\n<li><strong><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://aws.amazon.com/serverless/sam/\\">AWS SAM (Serverless Application Model)</a>:</strong> An AWS-native tool that simplifies the deployment of serverless applications on Amazon Web Services (AWS) and supports multiple programming languages.</li>\\n<li><strong><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/Azure/azure-functions-core-tools/\\">Azure Functions Core Tools</a>:</strong> Provide seamless development, debugging, and deployment of serverless functions on Microsoft Azure. These tools integrate with Visual Studio Code.</li>\\n<li><strong><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://cloud.google.com/functions/docs/functions-framework/\\">Google Cloud Functions Framework</a>:</strong> Offer a local development environment, debugging capabilities, and a framework that integrates with other Google Cloud services. It supports multiple programming languages, including Node.js, Python, Go, and others.</li>\\n<li><strong><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.openfaas.com/\\">OpenFaaS</a>:</strong> Allow building and deploying serverless functions using Docker containers on Kubernetes. They provide flexibility in containerization and language choice.</li>\\n</ul>\\n<h3>Popular FaaS Providers</h3>\\n<ul>\\n<li><strong><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://aws.amazon.com/lambda/\\">AWS Lambda</a>:</strong> Amazon Web Services&#39; serverless compute service with extensive language support and deep integration with AWS services.</li>\\n<li><strong><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://azure.microsoft.com/services/functions/\\">Azure Functions</a>:</strong> Microsoft Azure&#39;s serverless platform supporting multiple programming languages and seamless Azure service integration.</li>\\n<li><strong><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://cloud.google.com/functions\\">Google Cloud Functions</a>:</strong> Google Cloud&#39;s serverless platform optimized for event-driven applications and simplified serverless development.</li>\\n<li><strong><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.ibm.com/cloud/functions\\">IBM Cloud Functions</a>:</strong> IBM&#39;s serverless computing platform based on the open-source Apache OpenWhisk project, offering flexibility and hybrid cloud capabilities.</li>\\n<li><strong><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://firebase.google.com/docs/functions\\">Firebase Functions</a>:</strong> Google&#39;s serverless solution for mobile and web app development, tightly integrated with Firebase services like the real-time database and hosting.</li>\\n</ul>\\n<h3>When to Apply the Serverless Pattern</h3>\\n<p>Embracing the Serverless pattern can significantly enhance development speed, scalability, and cost-effectiveness in modern software architectures. For example:</p>\\n<ul>\\n<li><strong>Event-Driven Workloads:</strong> Serverless is ideal for applications with sporadic or unpredictable workloads driven by events like user actions, sensor data, or file uploads.</li>\\n<li><strong>Scaling Microservices:</strong> Adopt serverless for specific microservices within a larger architecture to simplify deployment and scale.</li>\\n<li><strong>Cost Optimization:</strong> Use serverless to optimize costs by paying only for the resources consumed during execution.</li>\\n<li><strong>Prototyping and MVPs:</strong> Quickly build and test minimum viable products (MVPs) and prototypes without extensive infrastructure setup.</li>\\n<li><strong>Short-Lived Compute:</strong> For tasks that require short bursts of compute power, such as data processing or image resizing.</li>\\n</ul>\\n","featured":true,"flag":"new","tags":["devops"],"position":[536,300]},{"id":"settings-injection","release":"2021-07-01","title":"Settings Injection","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>While deploying applications to an environment, the application typically needs to be configured for that specific environment. Typical settings include domain names, database credentials and the location of other dependent services such as cache backends, queues or session storages.</p>\\n<p>These settings should not be shipped with the build package. Instead, it&#39;s the environment - this build is being deployed to - that should expose these values to application. A common way to &quot;inject&quot; these values is by making them available as environment variables or dynamically creating configuration files for the application. You can achieve this pattern without special tools - but this concept of settings injection also works with tools such as <a href=\\"/digital_xp_techradar/tools/consul/\\">Consul</a>, <a href=\\"/digital_xp_techradar/platforms-and-operations/kubernetes/\\">kubernetes</a> (with configMaps and secrets) or <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/AOEpeople/YAD\\">YAD</a>.</p>\\n<p>In this manner, the build package can be independent of the environment it&#39;s being deployed to - making it easier to follow the &quot;Build once, deploy often&quot; CI/CD principle.</p>\\n","featured":false,"flag":"default","position":[497,303]},{"id":"shared-responsibility","release":"2021-07-01","title":"Shared Responsibility Model","ring":"trial","quadrant":"methods-and-patterns","body":"<p>Since introducing &quot;Platform Engineering Team&quot; who build, maintain and operate our Kubernetes clusters and other related platform services, the question occurs who is in charge of the various tasks like keeping things up and running, applying critical security fixes, update software in general, keeping an eye on the bill and many more topics.\\nWe&#39;re not proposing a solution on how to split responsibilities here, but we want to raise awareness for bringing everybody together and formally discuss all responsibilities and write them down similar to (and possibly extending) AWS&#39;s <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://aws.amazon.com/compliance/shared-responsibility-model/\\">shared responsibility model</a>.\\nSome topics are 24/7 on-call support, broken deployment pipelines, and vulnerability scans.</p>\\n","featured":true,"flag":"default","tags":["devops"],"position":[586,229]},{"id":"sitespeed","release":"2022-03-28","title":"Sitespeed.io","ring":"assess","quadrant":"tools","body":"<p>Web Performance Monitoring is the process of measuring a Web service’s ability to respond efficiently to user interactions.\\nData gathered through monitoring helps analyze performance bottlenecks, plan improvements, and measure a site&#39;s responsiveness.</p>\\n<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.sitespeed.io/\\">Sitespeed.io</a> is a set of Open Source tools that makes it easy to monitor and measure the performance of a website.\\nIt tests websites using real (or headless) browsers, simulating users connectivity and collecting important user-centric metrics.\\nThe tools are packaged as a docker image that can be easily deployed.\\nData collected can be saved to different locations for later analysis which makes it easy to track changes.\\nLast, Sitespeed.io can be used as part of a continuous integration pipeline or as part of a monitoring solution.</p>\\n","featured":false,"flag":"default","position":[622,635]},{"id":"sketch","release":"2023-11-01","title":"Sketch","ring":"adopt","quadrant":"tools","body":"<p>Sketch is no longer used by Team XD as we have moved to <a href=\\"/digital_xp_techradar/tools/figma/\\">Figma</a> and just finished the last project done in Sketch.</p>\\n","featured":false,"flag":"changed","tags":["ux/ui"],"revisions":[{"release":"2021-07-01","ring":"adopt","body":"<p>Figma is a vector graphics editor and primarily web-based prototyping tool, with additional offline features enabled by desktop applications for macOS and Windows. The Figma Mirror companion apps for Android and iOS allow viewing Figma prototypes on mobile devices. The next step in our toolchain development comes right after the Sketch+Abstract approach. Figma enabled the next level of collaboration between designers, stakeholders, and frontend engineers.</p>\\n"}],"position":[527,515]},{"id":"sonarqube","release":"2023-11-01","title":"SonarQube","ring":"adopt","quadrant":"tools","body":"<p>SonarQube remains a good choice for checking your code quality. However, when using GitLab pipelines, it can be replaced with the built-in functionality provided by <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://docs.gitlab.com/ee/ci/testing/code_quality.html\\">GitLab</a>.</p>\\n","featured":false,"flag":"changed","tags":["ci/cd","quality assurance"],"revisions":[{"release":"2022-03-28","ring":"adopt","body":"<p>To track code quality of our projects and check for security issues (Static Application Security Testing), we recommend \\n<a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.sonarqube.org/\\">SonarQube</a>. At AOE we use it in CI pipelines to scan our code against the quality gate. If possible we \\neven check each merge request to prevent degrading code quality before adding it to our code basis.</p>\\n"},{"release":"2019-11-01","ring":"trial","body":"<p>At AOE, we are using SonarQube to get a historical overview of the code quality in our Projects.\\nWith SonarQube, you can get a quick insight into the condition of your code.\\nIt analyzes many languages and provides numerous static analysis rules.\\nSonarQube is also being used for Static Application Security Testing (SAST) which scans our code for potential security vulnerabilities and is an essential element of our Secure Software Development Lifecycle.</p>\\n"},{"release":"2018-03-01","ring":"assess","body":"<p>At AOE, we&#39;re evaluating SonarQube to get an historical overview of the code quality of our Projects. With SonarQube, you can get a quick hint about the condition of your code. It analyzes many languages and provides numerous static analysis rules.</p>\\n"}],"position":[529,490]},{"id":"specflow","release":"2023-11-01","title":"SpecFlow","ring":"assess","quadrant":"languages-and-frameworks","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://specflow.org\\">SpecFlow</a> is a free and open source BDD-framework for .NET</p>\\n<p>BDD frameworks in general enable teams to better collaborate on test automation by using for instance the Gherkin syntax\\nto make tests readable to everyone. SpecFlow is the most popular BDD framework for .NET projects.</p>\\n","featured":false,"flag":"changed","tags":["coding","quality assurance"],"position":[332,91]},{"id":"spock_geb","release":"2023-11-01","title":"Spock + Geb","ring":"hold","quadrant":"languages-and-frameworks","body":"<p>Most projects at AOE have transitioned away from Groovy, and other testing frameworks for JVM languages are more advanced and user-friendly. Consequently, mentioning Spock no longer seems relevant.</p>\\n","featured":false,"flag":"changed","tags":["coding","quality assurance"],"revisions":[{"release":"2022-03-28","ring":"hold","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://www.spockframework.org\\">spockframework.org</a> - Spock is a testing and specification framework for Java and Groovy\\napplications.</p>\\n<p>For the most parts we switched from Groovy to Java or Kotlin with JUnit 5. In this regard we think that the active\\ncommunity and regular updates and extension libraries of JUnit 5 cover everything we want or need.</p>\\n<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://www.gebish.org\\">gebish.org</a> - Geb is a browser automation solution.</p>\\n<p>UI testing with Geb is replaced by Cypress or Playwright.</p>\\n<!--except-->"},{"release":"2017-03-01","ring":"adopt","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://www.spockframework.org\\">spockframework.org</a> - Spock is a testing and specification framework for Java and Groovy applications. What makes it stand out from the crowd is its beautiful and highly expressive specification language. Thanks to its JUnit runner, Spock is compatible with most IDEs, build tools and continuous integration servers. Spock is inspired from JUnit, jMock, RSpec, Groovy, Scala, Vulcans, and other fascinating life forms.</p>\\n<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://www.gebish.org\\">gebish.org</a> - Geb is a browser automation solution. It brings together the power of WebDriver, the elegance of jQuery content selection, the robustness of Page Object modelling and the expressiveness of the Groovy language. It can be used for scripting, scraping and general automation or as a functional/web/acceptance testing solution via integration with testing frameworks such as Spock, JUnit &amp; TestNG.</p>\\n<p>At AOE, we use Spock in combination with Geb in various projects for black-box testing. Mainly, we implement our functional integration and acceptance testing automation with these frameworks, which work together seamlessly. And, we also like the convenience of extending the tests with Groovy built-ins or custom extensions.</p>\\n<p>Because of the successful use in two of our large projects and the wide range of opportunities within the testing domain with Spock and Geb, we classify this combo with adopt.</p>\\n<!--except-->"}],"position":[26,318]},{"id":"spring-boot","release":"2019-11-01","title":"Spring Boot","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p>We now have several years of experiences with Spring Boot, and a big projects Microservice Environment runs completely on Spring Boot, so it&#39;s time to update it to &quot;adopt&quot;.</p>\\n","featured":true,"flag":"default","tags":["coding"],"revisions":[{"release":"2018-03-01","ring":"trial","body":"<p>We have had good experiences with Spring Boot, and already have several Spring Boot-based services running in \\nproduction. We like the ease of kick-starting new services and the variety of tools in the Spring ecosystem.</p>\\n"},{"release":"2017-03-01","ring":"assess","body":"<p>With Spring Boot you create standalone Spring Applications with minimum configuration. <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://projects.spring.io/spring-boot/\\">Spring Boot</a> rapidly gets you up and running for production.</p>\\n<p>With an embedded Tomcat, Jetty and Undertow you have everything you need to deploy your application out-of-the-box.</p>\\n<p>The Spring Cloud ecosystem also gives you a lot of extension points for developing, deploying and running cloud applications.</p>\\n<p>It&#39;s based on the rock-solid Spring framework and provides excellent documentation.</p>\\n<p>At AOE, we use Spring Boot in a microservice architecture. Together with Groovy as the implementation Language, and some other Tools (Spring Security, Cloud, HATEOAS, Data, Session) from the Spring environment, we are able to create complex and powerful applications in no time.</p>\\n"}],"position":[280,375]},{"id":"spring-rest-docs","release":"2022-03-28","title":"Spring REST Docs","ring":"hold","quadrant":"tools","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://spring.io/projects/spring-restdocs/\\">Spring REST Docs</a> auto generates <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://asciidoctor.org/\\">Asciidoctor</a> snippets with the help of <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle#spring-mvc-test-framework\\">Spring MVC Test</a> or <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.aoe.com/techradar/tools/rest-assured.html\\">RestAssured</a>.\\nSo you can be sure that your tests are inline with the documentation.</p>\\n<p>We now use an Api First approach in conjunction with <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.aoe.com/techradar/tools/open-api.html\\">Open API</a>. We see an active community there and a lot of support with this approach.</p>\\n","featured":true,"flag":"default","tags":["documentation"],"revisions":[{"release":"2017-03-01","ring":"assess","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://projects.spring.io/spring-restdocs/\\">Spring REST Docs</a> auto generates <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://asciidoctor.org/\\">Asciidoctor</a> snippets with the help of <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle#spring-mvc-test-framework\\">Spring MVC Test</a> or <a href=\\"/digital_xp_techradar/tools/rest-assured/\\">RestAssured</a>.\\nSo you can be sure that your tests are inline with the documentation.</p>\\n<p>At AOE, we use <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://projects.spring.io/spring-restdocs/\\">Spring REST Docs</a> to document our Rest Services and Hal Resources.\\nWe also use it to auto generate <a href=\\"/digital_xp_techradar/tools/wiremock/\\">WireMock</a> Stubs, so the consumer of the service can test against the exact API of the service.</p>\\n"}],"position":[725,606]},{"id":"state-management-pattern","release":"2023-11-01","title":"State Management Pattern","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>State Management is a design pattern with the goal of efficiently sharing state data across components while separating domain representation from state management. This pattern is widely used in many popular web frameworks such as <a href=\\"/digital_xp_techradar/languages-and-frameworks/vuex/\\">Vuex</a> or <a href=\\"/digital_xp_techradar/languages-and-frameworks/redux/\\">Redux</a>.</p>\\n<p>Especially in <a href=\\"/digital_xp_techradar/methods-and-patterns/reactive-programming/\\">reactive</a> systems, this pattern helps in maintaining decoupled, stateless components with immutable data. The implementation of state management varies and depends on the specific requirements of the application at hand.</p>\\n<p>For distributed backend systems, one might consider utilizing <a href=\\"/digital_xp_techradar/languages-and-frameworks/akka/\\">Akka&#39;s</a> cluster sharding module to elastically manage domain object states.</p>\\n<p>We employ various state management patterns across most <a href=\\"/digital_xp_techradar/languages-and-frameworks/vue/\\">Vue</a> and <a href=\\"/digital_xp_techradar/languages-and-frameworks/react/\\">React</a> projects that require them.</p>\\n","featured":true,"flag":"changed","tags":["architecture","coding"],"revisions":[{"release":"2021-07-01","ring":"adopt","body":"<p>State Management is a design pattern with the goal of properly sharing state data across components and separating domain representation from state management.\\nThis pattern is applied by many popular web frameworks such as <a href=\\"/digital_xp_techradar/languages-and-frameworks/vuex/\\">Vuex</a>, <a href=\\"/digital_xp_techradar/languages-and-frameworks/redux/\\">Redux</a> or <a href=\\"/digital_xp_techradar/methods-and-patterns/flux/\\">Flux</a>.</p>\\n<p>Especially in <a href=\\"/digital_xp_techradar/methods-and-patterns/reactive-programming/\\">reactive</a> systems, this pattern helps to solve the task of maintaining decoupled, stateless components with immutable data.\\nThe ways of implementing state management differs and depends on the specific requirements of the application at hand.</p>\\n<p>For distributed backend systems one might want to utilize <a href=\\"/digital_xp_techradar/languages-and-frameworks/akka/\\">Akka&#39;s</a> cluster sharding module to elastically manage domain object states.</p>\\n<p>We use the various state management patterns across most <a href=\\"/digital_xp_techradar/languages-and-frameworks/vue/\\">Vue</a> and <a href=\\"/digital_xp_techradar/languages-and-frameworks/react/\\">React</a> projects that warrant them.</p>\\n"}],"position":[456,227]},{"id":"stitches","release":"2023-11-01","title":"Stitches","ring":"hold","quadrant":"languages-and-frameworks","body":"<p>Stitches is <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/stitchesjs/stitches/discussions/1149#discussioncomment-6223090\\">no longer actively maintained</a> due to compatibility issues with CSS-in-JS runtime injection and React 18 Server Components. Therefore, we do not recommend using it for new projects.</p>\\n","featured":true,"flag":"changed","tags":["coding","frontend"],"revisions":[{"release":"2022-03-28","ring":"trial","body":"<p>Stitches is a lightweight &amp; performant CSS-in-JS styling library with a focus on component architecture and developer\\nexperience.</p>\\n<p>Unlike most CSS-in-JS libraries, Stitches promises near-zero runtime costs. This is possible by avoiding unnecessary\\nprop interpolations and defining variants upfront.</p>\\n<p>Stitches has a fully typed API to provide an awesome developer experience. It comes with built-in theme support,\\nserver-side rendering &amp; much more.</p>\\n<p>At AOE we use Stitches when we want to write performant and scalable CSS, but don&#39;t want to give up the flexibility and\\ndeveloper experience of React components.</p>\\n"}],"position":[164,113]},{"id":"storybook","release":"2021-07-01","title":"Storybook","ring":"adopt","quadrant":"tools","body":"<p>In recent years, Storybook has become the de facto standard for creating UI components in isolation.\\nWe have been using Storybook in many projects for quite some time now and really loving the approach. </p>\\n<p>With version 6, the config has been greatly simplified to achieve the goal of a zero-config approach in the future.</p>\\n<ul>\\n<li>compatible and easy to integrate with major frameworks like React, Angular, Vue.js ...<ul>\\n<li>presets for Create React App, Next.js, nuxt ...</li>\\n</ul>\\n</li>\\n<li>build in TypeScript support</li>\\n<li>build in addons like controls, actions, docs ...</li>\\n<li>growing library of third party addons</li>\\n</ul>\\n","featured":true,"flag":"default","tags":["frontend","ux/ui"],"revisions":[{"release":"2019-11-01","ring":"assess","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://storybook.js.org/\\">Storybook</a> is a user interface development environment and playground for UI components.\\nThe tool enables developers to create components independently and showcase components interactively in an isolated development environment.\\nStorybook runs outside the main app so users can develop UI components in isolation without worrying about app specific dependencies and requirements.</p>\\n"}],"position":[428,527]},{"id":"strapi","release":"2021-07-01","title":"Strapi","ring":"trial","quadrant":"tools","body":"<p>Strapi is a headless CMS built with Javascript on Node.js.\\nIts data-centered approach offers great flexibility for many use cases by integrating with the available APIs.</p>\\n<p>Strapi&#39;s API comes in a RESTful and <a href=\\"/digital_xp_techradar/methods-and-patterns/graphql/\\">GraphQL</a> variant.\\nBoth perfectly support the <a href=\\"/digital_xp_techradar/methods-and-patterns/api-first-design-approach/\\">API-first design approach</a>.</p>\\n<p>Ever since the stable release version 3.0.0 from mid-2020, the CMS reached market maturity and offers a good choice for scalable headless CMSs.\\nAs of the 3.6 release in April 2021, Strapi features <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://strapi.io/blog/announcing-content-internationalization-v3-6\\">full internationalization support</a>, making it a viable candidate to be evaluated toe to toe with solutions like Drupal.</p>\\n<p>At AOE we are evaluating Strapi for various projects, appreciating its straightforward installation, setup, and use by editors in lieu of more heavy-weight solutions used in the past.</p>\\n","featured":true,"flag":"default","tags":["frontend"],"position":[476,616]},{"id":"strategic-domain-driven-design","release":"2017-03-01","title":"Strategic Domain Driven Design","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>Design of distributed applications need to be done wisely. Strategic Domain Driven Design is an approach for modelling large-scale applications and systems and is introduced in the last part of Eric Evans&#39; book <em><strong>Domain Driven Design</strong></em>.</p>\\n<p>Domain driven design is a well-known pattern family and has been established at AOE for quite some time now. Unlike Domain Driven Design, which focuses on the tactical design in an application, strategic domain driven design is an approach that is very helpful for the high-level strategic design of an application and distributed software architecture.</p>\\n<p>It is a pattern family focused on using and defining Bounded Context and thinking explicitly of the different relationship patterns and the required &quot;translation&quot; of similar &quot;concepts&quot; between the bounded contexts. It is helpful to argue and find a good strategic architecture in alignment with the requirements, the domain and by considering Conway&#39;s Law.\\nA context map and a common conceptional core help to understand and improve the overall strategic picture. Especially with the <a href=\\"/digital_xp_techradar/methods-and-patterns/microservices/\\">Microservice</a> approach, it is important to define and connect services following the low coupling - high cohesion principles by idendifying fitting bounded contexts.</p>\\n<p>The following chart gives an overview of possible relationships between bounded contexts:\\n<img src=\\"/digital_xp_techradar/images/strategic-domain-driven-design-relationships.png\\" alt=\\"strategic-domain-driven-design-relationships\\"></p>\\n<p>While we have found that this approach is especially useful in designing distributed systems and applications with <a href=\\"/digital_xp_techradar/methods-and-patterns/microservices/\\">microservices</a>, we have also extended this approach to provide guidelines for general enterprise architectures.</p>\\n","featured":true,"flag":"default","tags":["architecture"],"position":[501,379]},{"id":"stride-threat-modeling","release":"2019-11-01","title":"STRIDE Threat Modeling","ring":"trial","quadrant":"methods-and-patterns","body":"<p>STRIDE is a model of threat groups that helps to identify security threats to any application, component or infrastructure.</p>\\n<p>The acronym stands for:</p>\\n<ul>\\n<li>Spoofing</li>\\n<li>Tampering</li>\\n<li>Repudiation</li>\\n<li>Information disclosure</li>\\n<li>Denial of service</li>\\n<li>Elevation of privilege</li>\\n</ul>\\n<p>AOE is applying the threat model in collaborative sessions using the <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://social.technet.microsoft.com/wiki/contents/articles/285.elevation-of-privilege-the-game.aspx\\">Elevation of Privilege Card Game</a> which helps to spark imagination and makes threats more tangible.</p>\\n","featured":true,"flag":"default","tags":["security"],"position":[611,271]},{"id":"styleguide-driven-development","release":"2019-11-01","title":"Styleguide Driven Development","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>Updated to &quot;adopt&quot;.</p>\\n","featured":false,"flag":"default","revisions":[{"release":"2017-03-01","ring":"trial","body":"<p>The goal of Styleguide Driven Development is to develop your application user Interface independently and reusable in a Pattern Library.<br>In the old days, the frontend was developed based on page-centric Photoshop files which made it hard to change things afterwards. With styleguide driven development you build smaller elements, which are reusable in all of your frontends.</p>\\n<p>You can start developing your UI components (HTML/CSS/JavaScript) very early in the production phase without having to wait for a ready-to-use development system.<br>Designers and Testers can give feedback early and you can share the documentation and code with external teams.</p>\\n<p>At AOE, we use <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://trulia.github.io/hologram/\\">Hologram</a> to build a living documentation right from the source files. Whenever a new UI Element is needed, a developer starts building it in the styleguide -- not in the actual application code. By writing the code for the new component, the documentation for it is created instantly. Any other developer can easily see which elements exist and how it can be used in the code.</p>\\n"}],"position":[566,332]},{"id":"svelte","release":"2023-11-01","title":"Svelte","ring":"trial","quadrant":"languages-and-frameworks","body":"<p>We have some smaller <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://svelte.dev/\\">Svelte</a> projects at AOE, and there are some features we would like to further explore, such as:</p>\\n<ul>\\n<li>Compatibility with other libraries or frameworks</li>\\n<li>Server-side rendering by default</li>\\n<li>Exceptional performance</li>\\n</ul>\\n","featured":true,"flag":"changed","tags":["coding","frontend"],"revisions":[{"release":"2023-02-23","ring":"assess","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://svelte.dev/\\">Svelte</a> is neither a language nor a framework, but actually a compiler. It compiles HTML templates\\nto specialized code that manipulates the DOM directly, which may reduce the size of transferred files and give better\\nclient performance.</p>\\n<p>It is surprisingly easy to work with, and we currently assess it in an internal project.</p>\\n"}],"position":[202,251]},{"id":"symfony-components","release":"2019-11-01","title":"Symfony Components","ring":"trial","quadrant":"languages-and-frameworks","body":"<p>Symfony Components are part of the <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://symfony.com/\\">Symfony Framework</a> and they are designed as decoupled and reusable PHP components.</p>\\n<p>Their use cases vary from simple little helpers such as a <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://symfony.com/doc/current/components/var_dumper.html\\">beautified var_dump</a> to more complex ones such as access control, list-based <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://symfony.com/doc/current/components/security.html\\">security mechanisms</a> and an easy-to-integrate <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://symfony.com/doc/current/components/console.html\\">console component</a> to give your already existing applications some CLI capabilities. They are <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://symfony.com/projects\\">used by a lot of PHP-based projects</a> such as Typo3, Magento, Composer, PHPUnit and Doctrine, with contributions continually taking place. If you are planning the next project with PHP components, you should have a look at the <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://symfony.com/components\\">Symfony Components list</a>, which includes a lot of well-designed, decoupled <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://github.com/symfony\\">Open Source pieces of PHP code</a>.</p>\\n","featured":false,"flag":"default","position":[359,185]},{"id":"tailwindcss","release":"2022-03-28","title":"Tailwind CSS","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p>At AOE we use Tailwind now on several projects. From fast prototyping, over marketing websites to enterprise applications.</p>\\n","featured":true,"flag":"default","tags":["coding","frontend"],"revisions":[{"release":"2021-07-01","ring":"trial","body":"<p>Tailwind CSS is a framework that heavily utilizes CSS classes.\\nWhat seems to be a very different approach in the beginning, turns into a big &quot;ah-ha-moment&quot; during development and even more during the build step.\\nCSS classes are entirely generated based on a configuration file that outlines the entire design system including states, nuances, etc.\\nTailwind&#39;s high flexibility results in a set of CSS classes aligned with UX/design, requiring just a fraction of code compared to a self-built solution.\\nColours, sizes, spaces etc. can have meaningful names that are easy to remember and shared between developers and designers.\\nIn turn, this results in a shared language with less explanation required.\\nSupport for deep integration into the development and build processes ensure optimized build times with incremental rebuilds only on parts really necessary.\\nThis obviously leads to very small build sizes with nearly 100% CSS coverage.</p>\\n<p>The deep integration and the extraordinary small build sizes were the main aspects for us to choose Tailwind CSS for resource-limited projects in the field of industry 4.0.\\nThese projects have a huge demand on a variety of interaction forms.</p>\\n<p>Tailwind helps us to fulfil modern user expectations by reducing the complexity of sophisticated industrial processes with a multi-device approach.</p>\\n<p>This is an unspoken expectation of today&#39;s operators of industrial processes.\\nThe evolution from classic cellular phones towards smartphones showed, there is still a huge untapped potential for usability improvements and adaptive processes, that reduce complexity especially the industry 4.0 field.</p>\\n"}],"position":[357,319]},{"id":"team-start-page","release":"2023-11-01","title":"Team Start Page","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>A team start page helps (new) members to orientate themselves. \\nIt normally displays all team members with their roles and contact data as well as a collection of links to the necessary tools, e.g.</p>\\n<ul>\\n<li>Project environments (staging, prod, ...)</li>\\n<li>Project development setup</li>\\n<li>Version control system</li>\\n<li>Code Review Tool</li>\\n<li>Team rules</li>\\n<li>Slack invitation</li>\\n<li>...</li>\\n</ul>\\n<p>Simply things, everyone should know.</p>\\n<p>At AOE we care to have a team start page for each team in our wiki.</p>\\n","featured":false,"flag":"changed","tags":["quality assurance","documentation"],"position":[442,380]},{"id":"temporal-modeling","release":"2019-11-01","title":"Temporal Modeling","ring":"assess","quadrant":"methods-and-patterns","body":"<p>Temporal Modeling is way of modeling software systems and components by putting events first.</p>\\n<p>The usual way of modeling software is to find structures, things and relations.\\nWe try to find the relevant aspects of a domain and put all properties into an object-oriented model.\\nTrying to create a second model for a related business process, having the structural model already in place, might result in a process representation that is tightly coupled with the assumptions built up from the structural model and too far away from reality.</p>\\n<p>By focusing on the domain processes first, one can visualize all aspects of a process over time.\\nHaving the process visualized, allows to see potential pitfalls or forgotten aspects.\\nWith a temporal model at hand, it is easy to create an object-oriented or structural model that perfectly represents all required information.</p>\\n<p>We tried this method when tackling big or complex domains.</p>\\n","featured":true,"flag":"default","tags":["architecture"],"position":[700,287]},{"id":"trivy","release":"2023-02-23","title":"Trivy","ring":"adopt","quadrant":"tools","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://trivy.dev/\\">Trivy</a> is an open-source vulnerability scanner for containers and other targets. It utilizes\\nan extensive vulnerability database to scan for CVEs, software dependencies in use and common misconfigurations.</p>\\n<p>Trivy is lightweight and has no external dependencies, making it suitable for use in CI/CD pipelines. Additionally,\\nit can support developers by providing actionable remediation advice, making it easier to fix vulnerabilities.</p>\\n<p>As it has proven to be a good fit for both our needs and into our development pipelines, we strongly recommend to\\ngive it a try in your own projects.</p>\\n","featured":true,"flag":"default","tags":["ci/cd","devops","security"],"position":[521,430]},{"id":"turborepo","release":"2023-02-23","title":"Turborepo","ring":"trial","quadrant":"tools","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://turbo.build/repo\\">Turborepo</a> is a build system for JavaScript and TypeScript project,\\nwhich uses a <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.aoe.com/techradar/methods-and-patterns/monorepo.html\\">Monorepo</a> structure for their codebase.</p>\\n<p>It helps to build projects efficiently by clever caching and resolving dependencies.\\nAt the same time, Turborepo is very easy and fast to use and doesn&#39;t get in the way.</p>\\n","featured":true,"flag":"default","tags":["build","frontend"],"position":[569,568]},{"id":"typescript","release":"2023-11-01","title":"TypeScript","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p>TypeScript has become more widely used and is now considered the industry standard for most JavaScript projects and provides the means to prevent errors during development, refactor code, scale projects, and enhance code collaboration.</p>\\n<p>Its widespread adoption and the support of a large community contribute to further improving and documenting the language.</p>\\n<p>TypeScript is our language of choice for both existing and future projects, allowing us to write robust and clean JavaScript code.</p>\\n","featured":true,"flag":"changed","tags":["coding","frontend"],"revisions":[{"release":"2019-11-01","ring":"adopt","body":"<p>As writing frontend applications becomes more complex, <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.typescriptlang.org/\\">TypeScript</a> allows us to scale client side code easily, even with large code bases.\\nWe use Typescript successfully at production for many projects and we are only going to use it even more in the future.\\nWe highly recommend using Typescript over JavaScript, therefore we have decided to move it to adopt.</p>\\n"},{"release":"2017-03-01","ring":"assess","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.typescriptlang.org/\\">TypeScript</a> is a language that gets transpiled to native JavaScript code.</p>\\n<p>It offers support for the latest EcmaScript features and has strict typing and support for interfaces built in.</p>\\n<p>JavaScript scoping, which led into recurring workarounds such as **var self = this, myFunc.bind(this)<em>,</em>**was eliminated in TypeScript.</p>\\n<p>In TypeScript <strong>this</strong> stays <strong>this</strong>, which leads to more readable and understandable code from an OOP perspective.</p>\\n<p>TypeScript continues to be actively developed by Microsoft and is well-Integrated in today&#39;s IDEs.</p>\\n<p>The excellent structure and the possibilities for extension make it a good choice to consider for larger JavaScript projects.</p>\\n<p>Typescript was the choice for <a href=\\"/digital_xp_techradar/languages-and-frameworks/angular/\\">Angular</a> and one can assume that it will get more traction with the success of Angular in the future.</p>\\n<p>There are also projects that support Typescript „code execution“ on the server such as <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.npmjs.com/package/ts-node\\">ts-node</a>.</p>\\n"}],"position":[330,346]},{"id":"typo3-as-a-framework","release":"2018-03-01","title":"TYPO3 as a Framework","ring":"hold","quadrant":"tools","body":"<p>We should avoid building new projects around TYPO3 by default. A lot of past projects started with CMS-only features in the beginning, and, for example, developed toward highly customized E-Commerce platforms. Instead of rearranging the architecture in a useful way, functionality was built on top of TYPO3&#39;s core and its extension framework Extbase. In the context of larger projects, this lead to deployment monoliths and the inability to integrate new technologies.</p>\\n<p>While in the past it was easy to kickstart a TYPO3 project with AOE&#39;s custom-tailored kickstarter, we now have a lot of knowledge and tools available to start projects with a much smarter architecture.\\nThis does not mean you shouldn&#39;t use TYPO3 anymore, but use it as the tool it is: a content management system.</p>\\n","featured":false,"flag":"default","position":[657,686]},{"id":"unleash","release":"2022-03-28","title":"Unleash","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.getunleash.io/\\">Unleash</a> is a feature (toggle / flag) management service written in Node.js. \\nYou can enable/disable features independent of deployment schedules. For larger projects with many feature flags \\nyou can benefit from usage statistics and metrics which are collected for each flag.</p>\\n<!--except-->\\n\\n<p>A lot of activation strategies are provided by Unleash out of the box, like Boolean On/Off, Gradual Rollout, \\nIPs, and so on, while allowing you to add custom strategies.</p>\\n<p>To evaluate the feature flag you can choose one of the <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://docs.getunleash.io/sdks#official-sdks\\">official SDKs</a> \\nor use the <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://docs.getunleash.io/api\\">REST-API</a> directly.</p>\\n","featured":true,"flag":"default","tags":["coding","frontend","devops"],"position":[339,282]},{"id":"vistecture","release":"2022-03-28","title":"Vistecture","ring":"assess","quadrant":"tools","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://vistecture.me/\\">Vistecture</a> is a tool for the visualization and analysis of  distributed\\nand/or microservice-oriented software architectures of any scale. It can be integrated in a projects\\nCI pipeline for the automated generation of up-to-date documentation.</p>\\n<p>With projects at AOE reaching a certain threshold of size and complexity, we started struggling\\nwith keeping documentation up to date manually, especially with regard to e.g. architecture diagrams\\nor API request/response flows. Thus, we have developed a tool for the rendering of various kinds\\nof documentation and visualizations based on a single architecture description file.</p>\\n<p>Applications (microservices) and dependencies are defined using a simple, YAML-based syntax. This\\nservice definition can then be converted to the desired output formats or browsed in the Vistecture\\nonline viewer.</p>\\n","featured":true,"flag":"default","tags":["documentation","architecture"],"position":[478,694]},{"id":"vite","release":"2023-11-01","title":"Vite","ring":"adopt","quadrant":"tools","body":"<p>As modern browsers now support the native usage of <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\\">ES Modules</a>, it&#39;s possible to use them to enhance frontend development, which is the goal of <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://vitejs.dev/guide/why.html\\">Vite</a>.</p>\\n<p>Since its announcement in 2020, Vite has garnered significant attention and has grown a large community that provides pluggable features. Vite offers two key components: a native ESM-based development server and a bundler for production builds.</p>\\n<p>The development server boasts improved performance during development, as modules are loaded and transpiled only on demand. This leads to faster cold-start times and quicker Hot Module Replacement (HMR) support.</p>\\n<p>We consider Vite to be a stable and production-ready tool, and we would recommend it for upcoming projects.</p>\\n","featured":true,"flag":"new","tags":["frontend","coding"],"position":[542,441]},{"id":"vue","release":"2023-11-01","title":"Vue.js","ring":"adopt","quadrant":"languages-and-frameworks","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://vuejs.org/guide/introduction.html\\">Vue</a> is a progressive and incrementally adoptable framework for building user interfaces, renowned for its simplicity and flexibility. The core library focuses on views, making it easy to integrate with other libraries and existing projects. It excels in powering single-page applications when combined with supporting libraries like <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://pinia.vuejs.org\\">Pinia</a>, <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://router.vuejs.org\\">vue-router</a>, and <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://vueuse.org\\">VueUse</a>. However, it&#39;s also versatile enough to build server-side rendered and statically generated web applications using the <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://nuxt.com\\">Nuxt framework</a>.</p>\\n<p>Vue&#39;s HTML-based template syntax enables declarative binding of the rendered DOM to the underlying Vue instance&#39;s data. This, in conjunction with the <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://vuejs.org/guide/extras/reactivity-in-depth.html\\">reactivity system</a>, ensures high performance by intelligently determining the minimal components to re-render and applying the minimal DOM manipulations when the app-state changes. Furthermore, applications can be organized into <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://vuejs.org/guide/scaling-up/sfc.html\\">Single File Components</a>, each containing the template (HTML), style (CSS), and functionality (JS). The <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://vuejs.org/api/sfc-script-setup.html\\">Composition API and &#39;script setup&#39;</a> syntax further enhance code readability and modularity, promoting reusability and maintainability throughout the development process.</p>\\n<p>Vue introduces powerful features like Teleport, which enables components to render at any position on the page, and Fragment, removing the requirement for a single root element in a template. Additionally, Vue enhances performance through Tree-Shaking, reducing bundle size, and Compiler-informed Virtual DOM optimizations, resulting in faster initial renders and updates while consuming less memory.</p>\\n","featured":true,"flag":"changed","tags":["coding","frontend"],"revisions":[{"release":"2021-07-01","ring":"adopt","body":"<p>Updated to &quot;adopt&quot;.</p>\\n"},{"release":"2018-03-01","ring":"trial","body":"<p>Updated to &quot;trial&quot;.</p>\\n"},{"release":"2017-03-01","ring":"assess","body":"<p>Vue is a progressive, incrementally adoptable framework for building user interfaces maintained by Evan You. Unlike <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://vuejs.org/v2/guide/comparison.html\\">other monolithic frameworks</a>, the core library is focused on the view layer only and is very easy to pick up and integrate with other libraries or existing projects. Vue is also perfectly capable of powering sophisticated single-page applications when used in combination with modern tooling and supporting libraries such as <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://vuex.vuejs.org/en/\\">vuex</a> and <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://router.vuejs.org/en/\\">vue-router</a>.</p>\\n<p>Vue uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying Vue instance’s data. Under the hood, Vue compiles the templates into Virtual DOM render functions. Combined with the <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://vuejs.org/v2/guide/reactivity.html\\">reactivity system</a> Vue is able to intelligently figure out the minimal amount of components to re-render and apply the minimal amount of DOM manipulations when the app state changes, which provides for very high performance.</p>\\n<p>Applications can be split into <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://vuejs.org/v2/guide/single-file-components.html\\">Single File Components</a> - a single file containing the template (HTML), style (CSS) and functionality (JS) - which simplifies maintainability and testability of the code and promotes reusability across other projects.</p>\\n"}],"position":[324,369]},{"id":"vuex","release":"2021-07-01","title":"Vuex","ring":"assess","quadrant":"languages-and-frameworks","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://vuex.vuejs.org/\\">Vuex</a> is a state management pattern + library for Vue.js applications.</p>\\n","featured":false,"flag":"default","position":[106,309]},{"id":"webpack","release":"2023-11-01","title":"Webpack","ring":"adopt","quadrant":"tools","body":"<p>Webpack remains one of the, if not the most, widely used bundlers. The team behind it is continually fixing bugs and adding new features, which are released in major version updates. Despite the emergence of new bundlers in recent years, we still recommend using Webpack.</p>\\n","featured":false,"flag":"changed","tags":["frontend","coding"],"revisions":[{"release":"2018-03-01","ring":"adopt","body":"<p>In the last few years, Webpack has grown to become the de-facto standard for Web bundling in the JavaScript-Ecosystem. \\nWith Version 3, Webpack is a more robust and better documented bundler with nice new features such as <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://webpack.js.org/plugins/module-concatenation-plugin/\\">scope hoisting</a>. \\nBecause of this, and because of the continuously growing community, we have adopted Webpack for nearly every single-page application we have.</p>\\n"},{"release":"2017-03-01","ring":"trial","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://webpack.js.org/\\">Webpack</a> is a web bundler for JavaScript applications. Instead of writing scripts to build and bundle your app like you would with <a href=\\"/digital_xp_techradar/tools/gulp/\\">Gulp</a>, you just define what files you want to load into your bundle.</p>\\n<p>In the following example, we define that JavaScript files should be handled by babel-loader, excluding the files from node_modules. The logic behind the process comes from the <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://webpack.js.org/concepts/loaders/\\">loader</a>. You can find the right loader in <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.npmjs.com/search?q=loader%20webpack&page=1&ranking=optimal\\">npm</a>.</p>\\n<pre><code>{\\n    test: /\\\\.js$/,\\n    loader: &#x27;babel-loader&#x27;,\\n    exclude: /node_modules/,\\n}\\n</code></pre><p>On top of that you can use <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://webpack.js.org/plugins/\\">plugins</a> to optimize your bundle like uglifying your code or put your common libraries in a separate file.</p>\\n<p>Under the hood, you&#39;ve got nice features such as:</p>\\n<ul>\\n<li><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://webpack.js.org/guides/tree-shaking/\\">tree shaking</a> to just bundle the features from a library you need</li>\\n<li><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://webpack.js.org/guides/code-splitting/\\">chunk splitting</a> to split your code to manage the load prioritization</li>\\n</ul>\\n<p>The configuration is simple and there is excellent and extensive <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://webpack.js.org/configuration/\\">documentation</a>.</p>\\n"}],"position":[498,467]},{"id":"wiremock","release":"2021-07-01","title":"WireMock","ring":"adopt","quadrant":"tools","body":"<p>Updated to &quot;adopt&quot;.</p>\\n","featured":false,"flag":"default","revisions":[{"release":"2017-03-01","ring":"trial","body":"<p><strong><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://wiremock.org/docs/\\">WireMock</a></strong> is an HTTP mock server - it can be used to mock APIs for testing.</p>\\n<p>At its core, it is a web server that can be prepared to serve canned responses to particular requests (stubbing), and that captures incoming requests so that they can be checked later (verification). It also has an assortment of other useful features including record/playback of interactions with other APIs, injection of faults and delays, simulation of stateful behavior.</p>\\n<p>It can be used as a library by any JVM application, or run as a standalone process either on the same host as the system under test or a remote server. All of WireMock&#39;s features are accessible via its REST (JSON) interface and its Java API. Additionally, the mock server can be configured via JSON files.</p>\\n<p>At AOE, we use WireMock as a standalone server to mock APIs that are outside our system context to get a stable environment for testing and rapid feedback. Besides the decoupled test and development advantages, the mocked APIs can also be used in contract-based tests. We also use embedded WireMock in functional tests to stub external services. The explicit test of faults are especially helpful in building and testing the <a href=\\"/digital_xp_techradar/methods-and-patterns/resilience-thinking/\\">resilience of your application</a>.</p>\\n<p>Because of the features such as flexible deployment, powerful request matching and record/payback interactions, as well as the fact that the server runs stable in our project environments, we classify WireMock as <em>trial</em>.</p>\\n"}],"position":[412,451]},{"id":"xmlunit","release":"2019-11-01","title":"XMLUnit","ring":"assess","quadrant":"tools","body":"<p><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"http://www.xmlunit.org/\\">XMLUnit</a> is a Java and .NET testing framework for XML documents. It is very useful for performing contract tests with SOAP interfaces or other XML-based message types.</p>\\n<p>Comparing strings of XML can lead to unstable tests because of the changing order of elements or changed values, etc. XMLUnit provides features to address these issues. It is possible to validate against an XML Schema, use XPath queries or compare against expected outcomes. It also comes with a nice diff-engine which makes it easy to check the parts of an XML document that are important.</p>\\n","featured":false,"flag":"default","position":[564,650]},{"id":"yarn","release":"2023-11-01","title":"Yarn","ring":"adopt","quadrant":"tools","body":"<p>We have decided to move Yarn into the &quot;adopt&quot; ring as it has continued to establish itself in recent years and has proven to be successful in many of our projects.</p>\\n<p>Yarn consistently offers better performance than npm and, in addition, provides both offline installation and the Plug&#39;n&#39;Play approach. With Plug&#39;n&#39;Play mode, Yarn replaces the node_modules directory with a virtual file system to enhance performance and save disk space.</p>\\n<p>Yarn is an excellent choice for monorepos, thanks to its support for workspaces, and is highly recommended as a package manager.</p>\\n","featured":false,"flag":"changed","tags":["frontend","coding"],"revisions":[{"release":"2019-11-01","ring":"trial","body":""},{"release":"2018-03-01","ring":"trial","body":"<p>Yarn is a dependency management tool for frontend (node) projects similar to npm. It also uses the npm registry and \\ninfrastructure. According to Yarn, the benefits are that Yarn is much faster, automatically writes a .lock file and \\nbuilds up a local cache to be even faster when installing packages again.</p>\\n<p>At AOE, we started using Yarn in different projects to evaluate if we can switch to Yarn for all projects.</p>\\n"}],"position":[495,509]},{"id":"zero-trust","release":"2023-02-23","title":"Zero Trust","ring":"adopt","quadrant":"methods-and-patterns","body":"<p>Because this approach is more and more used and especially useful for distributed architectures, we updated this item to &quot;adopt&quot; and recommend using it in relevant problem areas.</p>\\n","featured":false,"flag":"default","tags":["security","architecture"],"revisions":[{"release":"2019-11-01","ring":"trial","body":"<p>Zero Trust is a security model where no trust is assumed within a known network.</p>\\n<p>With Zero Trust, there are no assumptions made about the level of trust, and everything is considered untrusted by default. Authentication and authorization occur continuously, rather than just once.</p>\\n<p>Frameworks like Google&#39;s BeyondCorp are built upon that pattern.</p>\\n<h2>Motivation and History</h2>\\n<p>Classical security paradigms traditionally safeguard a particular network perimeter, such as a company intranet.</p>\\n<p>Once a person is &quot;inside&quot; – for example, by working within the company network or connecting to it through VPN – they are generally deemed trustworthy.</p>\\n<p>However, with the rise of cloud technologies and microservices, and the fact that people are working from various locations, this security model is insufficient. The network perimeter is constantly evolving and expanding.</p>\\n<p>This presents challenges for authenticating subjects that previously relied heavily on network segments.</p>\\n<h2>Principles of Zero Trust</h2>\\n<p>Zero Trust assumes that no user, service, or device is trusted by default, regardless of location or network. It requires continuous verification of identity, strict access controls, and consistent monitoring of network activity.</p>\\n<p><strong>Basic Principles:</strong></p>\\n<ul>\\n<li>Least Privilege</li>\\n<li>Assume Breach</li>\\n<li>Strong Identity Verification</li>\\n<li>Verify Explicitly</li>\\n</ul>\\n<p>It involves many <strong>areas and aspects</strong>, including:</p>\\n<ul>\\n<li>Identities and Identity Awareness</li>\\n<li>Device and Device Authentication</li>\\n<li>Networking and Firewall</li>\\n<li>Application Security (Security by Design, Secure Architecture)</li>\\n<li>Infrastructure Security</li>\\n<li>Secure Data Handling</li>\\n<li>Organization and Culture</li>\\n<li>Secure Development and Delivery</li>\\n<li>Security Monitoring and Automation</li>\\n</ul>\\n<h2>Implementations</h2>\\n<p>In 2009 Google implemented a zero trust architecture referred to as <a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://cloud.google.com/beyondcorp\\">BeyondCorp</a>. It utilizes OAuth and OpenID standards for implementing Authn and Authz, and has influenced the development of modern Zero Trust architectures.</p>\\n<p>Typical implementations involve using standards and tools for IAM and SSO, such as <a href=\\"/digital_xp_techradar/tools/keycloak/\\">Keycloak</a>.</p>\\n<h2>Summary</h2>\\n<p>While network segments and VPN connections may still be relevant in specific areas, AOE is increasingly implementing a Zero Trust approach in all solutions, components, and services.</p>\\n<p>We are currently adopting best practices for Zero Trust, which align with the BeyondCorp framework and utilize the OAuth and OpenID Connect standards.</p>\\n<h2>Additional References</h2>\\n<ul>\\n<li><a target=\\"_blank\\" rel=\\"noopener noreferrer\\" href=\\"https://www.youtube.com/watch?v=fCENO_Jt3QE\\">Keynote: &quot;Zero Trust - The Hard Way&quot;, DevOpsCon Berlin 2023</a></li>\\n</ul>\\n"}],"position":[416,349]}]}'),o=JSON.parse('{"basePath":"/techradar","baseUrl":"","editUrl":"https://github.dev/AOEpeople/techradar/blob/main/radar/{release}/{id}.md","logoFile":"logo.svg","toggles":{"showChart":true,"showTagFilter":true,"showQuadrantList":true,"showEmptyRings":false},"sections":["radar","tags","list"],"colors":{"foreground":"#fcf2e6","background":"#113521","highlight":"#d4a373","content":"#fff","text":"#575757","link":"#bc6c25","border":"rgba(255, 255, 255, 0.1)","tag":"rgba(255, 255, 255, 0.1)"},"quadrants":[{"id":"languages-and-frameworks","title":"Languages & Frameworks","description":"A selection of programming languages, alongside essential frameworks for building a variety of custom software.","color":"#a3b18a"},{"id":"methods-and-patterns","title":"Methods & Patterns","description":"Key software development methods and design patterns, covering everything from continuous integration and testing to architecture.","color":"#588157"},{"id":"platforms-and-operations","title":"Platforms & Operations","description":"Technologies and tools for software and infrastructure operations, including platforms and services for managing and scaling applications.","color":"#3f633e"},{"id":"tools","title":"Tools","description":"A range of software tools, from simple productivity enhancers to comprehensive project solutions, catering to various project needs.","color":"#40713f"}],"rings":[{"id":"adopt","title":"Adopt","description":"","color":"#588157","radius":0.5,"strokeWidth":5},{"id":"trial","title":"Trial","description":"","color":"#457b9d","radius":0.69,"strokeWidth":3},{"id":"assess","title":"Assess","description":"","color":"#bc6c25","radius":0.85,"strokeWidth":2},{"id":"hold","title":"Hold","description":"","color":"#d62828","radius":1,"strokeWidth":0.75}],"flags":{"new":{"color":"#f1235a","title":"New","titleShort":"N","description":"New in this version"},"changed":{"color":"#40a7d1","title":"Changed","titleShort":"C","description":"Recently changed"},"default":{"description":"Unchanged"}},"chart":{"size":800,"blipSize":12},"social":[{"href":"https://twitter.com/aoepeople","icon":"x"},{"href":"https://www.linkedin.com/company/aoe","icon":"linkedIn"},{"href":"https://www.xing.com/company/aoe","icon":"xing"},{"href":"https://github.com/aoepeople","icon":"github"}],"imprint":"https://www.aoe.com/en/imprint.html","labels":{"title":"Technology Radar","imprint":"Legal Information","quadrant":"Quadrant","quadrantOverview":"Quadrant Overview","zoomIn":"Zoom in","filterByTag":"Filter by Tag","footer":"The technology radar is a project by AOE GmbH. Feel free to build your own radar based on the open source project.","notUpdated":"This item was not updated in last three versions of the Radar. Should it have appeared in one of the more recent editions, there is a good chance it remains pertinent. However, if the item dates back further, its relevance may have diminished and our current evaluation could vary. Regrettably, our capacity to consistently revisit items from past Radar editions is limited.","notFound":"404 - Page not found","pageAbout":"How to use AOE Technology Radar?","pageOverview":"Technologies Overview","pageSearch":"Search","searchPlaceholder":"What are you looking for?","metaDescription":""}}'),r=a(6513);let i={...o,...r};r.colors&&(i.colors={...o.colors,...r.colors}),r.labels&&(i.labels={...o.labels,...r.labels}),r.toggles&&(i.toggles={...o.toggles,...r.toggles});var s=a(8603),l=a(4733);function d(e){return i.labels[e]||""}function p(e){return i.toggles[e]||!1}function c(){return i.sections}function u(){return d("title")}function h(){return(0,l.p)("/"+i.logoFile)}function g(){return i.chart}function f(){return i.flags}function m(e){return i.flags[e]}function b(){return i.rings}function y(e){return b().find(t=>t.id===e)}function w(){return n.yN}function v(){return i.social}function k(){return n.pJ}function x(e){return i.editUrl?(0,s.WU)(i.editUrl,e):""}function S(){return i.quadrants.map((e,t)=>({...e,position:t+1}))}function _(e){return S().find(t=>t.id===e)}function A(e,t){return n.ev.filter(a=>(!e||a.quadrant===e)&&!(t&&!a.featured))}function j(){return i.imprint}function T(e){return n.ev.find(t=>t.id===e)}let q=(e,t)=>Number(t.featured)-Number(e.featured)||e.title.localeCompare(t.title),I=e=>{let t=p("showEmptyRings");return b().reduce((a,n)=>{let o=e.filter(e=>e.ring===n.id);return(o.length||t)&&(a[n.id]=o),a},{})},P=e=>S().reduce((t,a)=>{let n=e.filter(e=>e.quadrant===a.id);return n.length&&(t[a.id]=n),t},{})},8603:function(e,t,a){"use strict";a.d(t,{Ui:function(){return r},WU:function(){return o},vf:function(){return i}});var n=a(8153);function o(e,t){return e.replace(/{(\w+)}/g,(e,a)=>t[a]||e)}function r(){for(var e=arguments.length,t=Array(e),a=0;a<e;a++)t[a]=arguments[a];return[...t,(0,n.PO)()].join(" | ")}function i(e){return new Date(e).toLocaleDateString("en-US",{month:"long",year:"numeric"})}},4733:function(e,t,a){"use strict";a.d(t,{p:function(){return i},cn:function(){return r}});var n=a(2659),o=a.n(n);function r(){for(var e=arguments.length,t=Array(e),a=0;a<e;a++)t[a]=arguments[a];return function(){for(var e,t,a=0,n="",o=arguments.length;a<o;a++)(e=arguments[a])&&(t=function e(t){var a,n,o="";if("string"==typeof t||"number"==typeof t)o+=t;else if("object"==typeof t){if(Array.isArray(t)){var r=t.length;for(a=0;a<r;a++)t[a]&&(n=e(t[a]))&&(o&&(o+=" "),o+=n)}else for(n in t)t[n]&&(o&&(o+=" "),o+=n)}return o}(e))&&(n&&(n+=" "),n+=t);return n}(t)}function i(e){return o().basePath?"".concat(o().basePath).concat(e):e}},8676:function(e,t,a){"use strict";a.r(t),a.d(t,{default:function(){return O}});var n=a(5893),o=a(9008),r=a.n(o),i=a(1478),s=a.n(i),l=a(8165),d=a.n(l),p=a(1476),c=a.n(p),u=a(6726),h=a.n(u),g=a(1342),f=a(8153),m=a(4733);function b(e){let{className:t}=e,a=(0,f.dv)();return(0,n.jsx)("ul",{className:(0,m.cn)(h().links,t),children:a.map((e,t)=>{let a=function(e){switch(e.toLowerCase()){case"facebook":return g.rj;case"github":return g.yx;case"gitlab":return g.Tp;case"instagram":return g.bL;case"linkedin":return g.zU;case"x":return g.V7;case"xing":return g.CR;case"youtube":return g.PC;default:return null}}(e.icon);return a&&(0,n.jsx)("li",{children:(0,n.jsx)("a",{href:e.href,className:h().link,target:"_blank",rel:"noopener noreferrer",children:(0,n.jsx)(a,{className:h().icon})})},t)})})}function y(){let e=(0,f.OW)();return(0,n.jsxs)("div",{className:c().footer,children:[(0,n.jsxs)("div",{className:c().branding,children:[(0,n.jsx)("img",{src:e,className:c().logo,alt:(0,f.PO)()}),(0,n.jsx)("p",{className:c().description,children:(0,f.id)("footer")}),(0,n.jsx)(b,{className:c().socialLinks})]}),(0,n.jsx)("a",{href:(0,f.H1)(),className:c().imprint,target:"_blank",children:(0,f.id)("imprint")})]})}var w=a(1664),v=a.n(w),k=a(9332),x=a(9483),S=a.n(x);function _(){let e=(0,k.usePathname)(),t=(0,f.PO)(),a=(0,f.OW)();return(0,n.jsxs)(v(),{href:"/",className:(0,m.cn)(S().logo,"/"!=e&&S().small),children:[(0,n.jsx)("img",{src:a,className:(0,m.cn)(S().src),alt:t}),(0,n.jsx)("span",{className:S().subline,children:t})]})}var A=a(7062),j=a.n(A),T=a(4043),q=a(2929);function I(){return(0,n.jsx)("nav",{className:j().nav,children:(0,n.jsxs)("ul",{className:j().list,children:[(0,n.jsx)("li",{className:j().item,children:(0,n.jsxs)(v(),{href:"/help-and-about-tech-radar",children:[(0,n.jsx)(q.Z,{className:j().icon}),(0,n.jsx)("span",{className:j().label,children:(0,f.id)("pageAbout")})]})}),(0,n.jsx)("li",{className:j().item,children:(0,n.jsxs)(v(),{href:"/overview",children:[(0,n.jsx)(T.Z,{className:j().icon}),(0,n.jsx)("span",{className:j().label,children:(0,f.id)("pageOverview")})]})})]})})}let P=e=>{let{children:t,layoutClass:a="default"}=e;return(0,n.jsxs)("div",{id:"layout",className:(0,m.cn)(d().layout,s().className,d()[a]),children:[(0,n.jsxs)("header",{className:(0,m.cn)(d().container,d().header),children:[(0,n.jsx)(_,{}),(0,n.jsx)(I,{})]}),(0,n.jsx)("main",{className:(0,m.cn)(d().content),children:t}),(0,n.jsx)("footer",{className:(0,m.cn)(d().container,d().footer),children:(0,n.jsx)(y,{})})]})};var C=a(8603);function O(e){let{Component:t,pageProps:a,router:o}=e;return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(r(),{children:[(0,n.jsx)("title",{children:(0,C.Ui)()}),(0,n.jsx)("meta",{name:"viewport",content:"width=device-width, initial-scale=1"}),(0,n.jsx)("link",{rel:"icon",href:(0,m.p)("/favicon.ico")})]}),(0,n.jsx)(P,{layoutClass:t.layoutClass,children:(0,n.jsx)(t,{...a})})]})}a(7282),a(8359),a(3967)},7282:function(){},8359:function(){},3967:function(){},1478:function(e){e.exports={style:{fontFamily:"'__Roboto_3659b5', '__Roboto_Fallback_3659b5'",fontStyle:"normal"},className:"__className_3659b5"}},1476:function(e){e.exports={branding:"Footer_branding__feBRv",logo:"Footer_logo__C9vo8",description:"Footer_description__s_1Tl",imprint:"Footer_imprint__j5hGH",socialLinks:"Footer_socialLinks__22g9N"}},8165:function(e){e.exports={layout:"Layout_layout__fvRCC",container:"Layout_container__BVtmP",header:"Layout_header__WZgfV",default:"Layout_default__M3545",content:"Layout_content__PrPCk"}},9483:function(e){e.exports={logo:"Logo_logo__c5nVK",src:"Logo_src__xX_cm",subline:"Logo_subline__E9VoF",small:"Logo_small__JDg_A"}},7062:function(e){e.exports={list:"Navigation_list__VIGxa",icon:"Navigation_icon__uPnQs",label:"Navigation_label__QlTT7"}},6726:function(e){e.exports={links:"SocialLinks_links__P5z2P",icon:"SocialLinks_icon__9QZfU",link:"SocialLinks_link__Y7mGD"}},9008:function(e,t,a){e.exports=a(3709)},1664:function(e,t,a){e.exports=a(5494)},9332:function(e,t,a){e.exports=a(6522)},3241:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"actionAsyncStorage",{enumerable:!0,get:function(){return n}});let n=(0,a(693).createAsyncLocalStorage)();("function"==typeof t.default||"object"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,"__esModule",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},693:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"createAsyncLocalStorage",{enumerable:!0,get:function(){return r}});let a=Error("Invariant: AsyncLocalStorage accessed in runtime where it is not available");class n{disable(){throw a}getStore(){}run(){throw a}exit(){throw a}enterWith(){throw a}}let o=globalThis.AsyncLocalStorage;function r(){return o?new o:new n}("function"==typeof t.default||"object"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,"__esModule",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},8276:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"requestAsyncStorage",{enumerable:!0,get:function(){return n}});let n=(0,a(693).createAsyncLocalStorage)();("function"==typeof t.default||"object"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,"__esModule",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},6513:function(e){"use strict";e.exports=JSON.parse('{"basePath":"/digital_xp_techradar","baseUrl":"","editUrl":"https://github.dev/AOEpeople/techradar/blob/main/radar/{release}/{id}.md","logoFile":"logo.png","toggles":{"showChart":true,"showTagFilter":true,"showQuadrantList":true,"showEmptyRings":false},"sections":["radar","tags","list"],"colors":{"foreground":"#fcf2e6","background":"#272935","highlight":"#7d878d","content":"#fff","text":"#575757","link":"#bc6c25","border":"rgba(255, 255, 255, 0.1)","tag":"rgba(255, 255, 255, 0.1)"},"quadrants":[{"id":"languages-and-frameworks","title":"Languages & Frameworks","description":"A selection of programming languages, alongside essential frameworks for building a variety of custom software.","color":"#57cf80"},{"id":"methods-and-patterns","title":"Methods & Patterns","description":"Key software development methods and design patterns, covering everything from continuous integration and testing to architecture.","color":"#12abdb"},{"id":"platforms-and-operations","title":"Platforms & Operations","description":"Technologies and tools for software and infrastructure operations, including platforms and services for managing and scaling applications.","color":"#ff5770"},{"id":"tools","title":"Tools","description":"A range of software tools, from simple productivity enhancers to comprehensive project solutions, catering to various project needs.","color":"#ff8e12"}],"rings":[{"id":"adopt","title":"Adopt","description":"","color":"#588157","radius":0.5,"strokeWidth":5},{"id":"trial","title":"Trial","description":"","color":"#457b9d","radius":0.69,"strokeWidth":3},{"id":"assess","title":"Assess","description":"","color":"#bc6c25","radius":0.85,"strokeWidth":2},{"id":"hold","title":"Hold","description":"","color":"#d62828","radius":1,"strokeWidth":0.75}],"flags":{"new":{"color":"#f1235a","title":"New","titleShort":"N","description":"New in this version"},"changed":{"color":"#40a7d1","title":"Changed","titleShort":"C","description":"Recently changed"},"default":{"description":"Unchanged"}},"chart":{"size":800,"blipSize":12},"social":[{"href":"https://www.capgemini.com/","icon":"website"},{"href":"https://www.facebook.com/Capgemini/","icon":"facebook"},{"href":"https://twitter.com/Capgemini","icon":"x"},{"href":"https://www.linkedin.com/company/capgemini","icon":"linkedIn"},{"href":"https://www.instagram.com/capgemini/","icon":"instagram"},{"href":"https://www.youtube.com/user/capgeminimedia","icon":"youtube"}],"imprint":"https://www.capgemini.com/terms-of-use/","labels":{"title":"DCX Technology Radar","imprint":"Legal Information","quadrant":"Quadrant","quadrantOverview":"Quadrant Overview","zoomIn":"Zoom in","filterByTag":"Filter by Tag","footer":"OneCraft is a Capgemini service line dedicated to software development expertise promoting Craftsmanship and well-designed software architecture.","notUpdated":"This item was not updated in last three versions of the Radar. Should it have appeared in one of the more recent editions, there is a good chance it remains pertinent. However, if the item dates back further, its relevance may have diminished and our current evaluation could vary. Regrettably, our capacity to consistently revisit items from past Radar editions is limited.","notFound":"404 - Page not found","pageAbout":"How to use DCX Technology Radar?","pageOverview":"Technologies Overview","pageSearch":"Search","searchPlaceholder":"What are you looking for?","metaDescription":""}}')}},function(e){var t=function(t){return e(e.s=t)};e.O(0,[774,179],function(){return t(6840),t(4546)}),_N_E=e.O()}]);